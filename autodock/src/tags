!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
A1	parameters.h	/^{ NON, DS, D1, AS, A1, A2 };	\/* hbonding character: *\/$/;"	e	enum:hbond_type
A2	parameters.h	/^{ NON, DS, D1, AS, A1, A2 };	\/* hbonding character: *\/$/;"	e	enum:hbond_type
ABS	ranlib.cc	37;"	d	file:
ACCEPT	constants.h	68;"	d
ACCURACY	rep.h	49;"	d
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/xouyang1\/B-bond\/autodock\/googlecode\/covalentdock\/autodock\/missing --run aclocal-1.9$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
AD3	autoglobal.h	/^Linear_FE_Model AD3;$/;"	v
AD4	autoglobal.h	/^Linear_FE_Model AD4;$/;"	v
AD4_wrt_3	autoglobal.h	/^Linear_FE_Model AD4_wrt_3;$/;"	v
ADEvalFn	coliny.cc	/^double ADEvalFn(double* x, int n);$/;"	p	file:	signature:(double* x, int n)
ADEvalFn	eval.cc	/^double ADEvalFn(double* x, int n)$/;"	f	signature:(double* x, int n)
ALL_ATOMS_INSIDE_GRID	trilinterp.h	34;"	d
AMDEP_FALSE	Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_TRUE	Makefile	/^AMDEP_TRUE = $/;"	m
AMTAR	Makefile	/^AMTAR = ${SHELL} \/home\/xouyang1\/B-bond\/autodock\/googlecode\/covalentdock\/autodock\/missing --run tar$/;"	m
AM_CPPFLAGS	Makefile	/^AM_CPPFLAGS = -DNOSQRT \\$/;"	m
AM_CXXFLAGS	Makefile	/^AM_CXXFLAGS = -O3 -Wall -Wno-write-strings # increase compatibility \\$/;"	m
ANALYSIS	analysis.h	42;"	d
ANGSTROMS_TO_LITERS	conformation_sampler.cc	38;"	d	file:
APPROX_ZERO	autocomm.h	74;"	d
AR	Makefile	/^AR = ar$/;"	m
ARFLAGS	Makefile	/^ARFLAGS = cru$/;"	m
AS	parameters.h	/^{ NON, DS, D1, AS, A1, A2 };	\/* hbonding character: *\/$/;"	e	enum:hbond_type
ATM1	constants.h	186;"	d
ATM2	constants.h	187;"	d
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/xouyang1\/B-bond\/autodock\/googlecode\/covalentdock\/autodock\/missing --run autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/xouyang1\/B-bond\/autodock\/googlecode\/covalentdock\/autodock\/missing --run autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/xouyang1\/B-bond\/autodock\/googlecode\/covalentdock\/autodock\/missing --run automake-1.9$/;"	m
AVOGADRO	conformation_sampler.cc	34;"	d	file:
AWK	Makefile	/^AWK = gawk$/;"	m
A_DIV	constants.h	148;"	d
A_DIV	constants.h	160;"	d
AddNewHardCon	initautodock.cc	39;"	d	file:
AddNewHardCon	prTorConList.cc	38;"	d	file:
Add_vectors	constants.h	502;"	d
Always_Eval	support.h	/^enum EvalMode { Reset, Always_Eval, Normal_Eval, Always_Eval_Nonbond, Always_Eval_Elec };$/;"	e	enum:EvalMode
Always_Eval_Elec	support.h	/^enum EvalMode { Reset, Always_Eval, Normal_Eval, Always_Eval_Nonbond, Always_Eval_Elec };$/;"	e	enum:EvalMode
Always_Eval_Nonbond	support.h	/^enum EvalMode { Reset, Always_Eval, Normal_Eval, Always_Eval_Nonbond, Always_Eval_Elec };$/;"	e	enum:EvalMode
Ang_to_index	constants.h	291;"	d
Angle_between	constants.h	499;"	d
Arithmetic	gs.h	/^enum Xover_Mode { TwoPt=0, OnePt=1, Uniform=2, Arithmetic=3, Branch=4 };$/;"	e	enum:Xover_Mode
Atom	structs.h	/^} Atom;$/;"	t	typeref:struct:atom
AtomDesc	autocomm.h	/^	} AtomDesc;$/;"	t	typeref:struct:AtomDesc
AtomDesc	autocomm.h	/^typedef struct AtomDesc {$/;"	s
AtomDesc::crd	autocomm.h	/^	Real crd[XYZ];$/;"	m	struct:AtomDesc	access:public
AtomDesc::q	autocomm.h	/^	Real q;$/;"	m	struct:AtomDesc	access:public
AtomDesc::type	autocomm.h	/^	int   type;$/;"	m	struct:AtomDesc	access:public
AutoDock4_1pgp_ga_select_tournament_test	Tests/test_autodock4.py	/^class AutoDock4_1pgp_ga_select_tournament_test( AutoDock_simple_test ):$/;"	c	inherits: AutoDock_simple_test 
AutoDock4_1pgp_illegal_keyword_test	Tests/test_autodock4.py	/^class AutoDock4_1pgp_illegal_keyword_test( AutoDock_simple_test ):$/;"	c	inherits: AutoDock_simple_test 
AutoDock4_1pgp_just_right_number_torsions	Tests/test_autodock4.py	/^class AutoDock4_1pgp_just_right_number_torsions( AutoDock_simple_test ):$/;"	c	inherits: AutoDock_simple_test 
AutoDock4_1pgp_ligand_types_map_mismatch	Tests/test_autodock4.py	/^class AutoDock4_1pgp_ligand_types_map_mismatch( AutoDock_simple_test ):$/;"	c	inherits: AutoDock_simple_test 
AutoDock4_1pgp_no_desolvmap_test	Tests/test_autodock4.py	/^class AutoDock4_1pgp_no_desolvmap_test( AutoDock_simple_test ):$/;"	c	inherits: AutoDock_simple_test 
AutoDock4_1pgp_no_elec_desolv_maps_test	Tests/test_autodock4.py	/^class AutoDock4_1pgp_no_elec_desolv_maps_test( AutoDock_simple_test ):$/;"	c	inherits: AutoDock_simple_test 
AutoDock4_1pgp_no_elecmap_test	Tests/test_autodock4.py	/^class AutoDock4_1pgp_no_elecmap_test( AutoDock_simple_test ):$/;"	c	inherits: AutoDock_simple_test 
AutoDock4_1pgp_no_extension	Tests/test_autodock4.py	/^class AutoDock4_1pgp_no_extension( AutoDock_simple_test ):$/;"	c	inherits: AutoDock_simple_test 
AutoDock4_1pgp_no_extension.setUp	Tests/test_autodock4.py	/^    def setUp( self ):$/;"	m	class:AutoDock4_1pgp_no_extension	access:public
AutoDock4_1pgp_no_parameter_file_test	Tests/test_autodock4.py	/^class AutoDock4_1pgp_no_parameter_file_test( AutoDock_test ):$/;"	c	inherits: AutoDock_test 
AutoDock4_1pgp_smaller_test	Tests/test_autodock4.py	/^class AutoDock4_1pgp_smaller_test( AutoDock_test ):$/;"	c	inherits: AutoDock_test 
AutoDock4_1pgp_test	Tests/test_autodock4.py	/^class AutoDock4_1pgp_test( AutoDock_test ):$/;"	c	inherits: AutoDock_test 
AutoDock4_1pgp_too_many_ligand_types_test	Tests/test_autodock4.py	/^class AutoDock4_1pgp_too_many_ligand_types_test( AutoDock_simple_test ):$/;"	c	inherits: AutoDock_simple_test 
AutoDock4_1pgp_too_many_torsions	Tests/test_autodock4.py	/^class AutoDock4_1pgp_too_many_torsions( AutoDock_simple_test ):$/;"	c	inherits: AutoDock_simple_test 
AutoDock4_1pgp_two_extensions	Tests/test_autodock4.py	/^class AutoDock4_1pgp_two_extensions( AutoDock_simple_test ):$/;"	c	inherits: AutoDock_simple_test 
AutoDock4_1pgp_two_extensions.setUp	Tests/test_autodock4.py	/^    def setUp( self ):$/;"	m	class:AutoDock4_1pgp_two_extensions	access:public
AutoDock4_1pgp_two_ligands_test	Tests/test_autodock4.py	/^class AutoDock4_1pgp_two_ligands_test( AutoDock_simple_test ):$/;"	c	inherits: AutoDock_simple_test 
AutoDock4_1pgp_two_mapsets_test	Tests/test_autodock4.py	/^class AutoDock4_1pgp_two_mapsets_test( AutoDock_simple_test ):$/;"	c	inherits: AutoDock_simple_test 
AutoDock4_1pgp_unbound_compute_unbound_extended	Tests/test_autodock4.py	/^class AutoDock4_1pgp_unbound_compute_unbound_extended( AutoDock4_unbound_test ):$/;"	c	inherits: AutoDock4_unbound_test 
AutoDock4_1pgp_unbound_default_test	Tests/test_autodock4.py	/^class AutoDock4_1pgp_unbound_default_test( AutoDock4_unbound_test ):$/;"	c	inherits: AutoDock4_unbound_test 
AutoDock4_1pgp_unbound_model_bound	Tests/test_autodock4.py	/^class AutoDock4_1pgp_unbound_model_bound( AutoDock4_unbound_test ):$/;"	c	inherits: AutoDock4_unbound_test 
AutoDock4_1pgp_unbound_model_compact	Tests/test_autodock4.py	/^class AutoDock4_1pgp_unbound_model_compact( AutoDock4_unbound_test ):$/;"	c	inherits: AutoDock4_unbound_test 
AutoDock4_1pgp_unbound_model_extended	Tests/test_autodock4.py	/^class AutoDock4_1pgp_unbound_model_extended( AutoDock4_unbound_test ):$/;"	c	inherits: AutoDock4_unbound_test 
AutoDock4_1pgp_unbound_model_illegal_test	Tests/test_autodock4.py	/^class AutoDock4_1pgp_unbound_model_illegal_test( AutoDock_simple_test ):$/;"	c	inherits: AutoDock_simple_test 
AutoDock4_1pgp_unbound_model_value	Tests/test_autodock4.py	/^class AutoDock4_1pgp_unbound_model_value( AutoDock4_unbound_test ):$/;"	c	inherits: AutoDock4_unbound_test 
AutoDock4_1pgp_unbound_set0_test	Tests/test_autodock4.py	/^class AutoDock4_1pgp_unbound_set0_test( AutoDock4_unbound_test ):$/;"	c	inherits: AutoDock4_unbound_test 
AutoDock4_1pgp_unbound_set10_test	Tests/test_autodock4.py	/^class AutoDock4_1pgp_unbound_set10_test( AutoDock4_unbound_test ):$/;"	c	inherits: AutoDock4_unbound_test 
AutoDock4_1pgp_unbound_set_illegal_test	Tests/test_autodock4.py	/^class AutoDock4_1pgp_unbound_set_illegal_test( AutoDock_simple_test ):$/;"	c	inherits: AutoDock_simple_test 
AutoDock4_1pgp_wrong_extension	Tests/test_autodock4.py	/^class AutoDock4_1pgp_wrong_extension( AutoDock_simple_test ):$/;"	c	inherits: AutoDock_simple_test 
AutoDock4_1pgp_wrong_extension.setUp	Tests/test_autodock4.py	/^    def setUp( self ):$/;"	m	class:AutoDock4_1pgp_wrong_extension	access:public
AutoDock4_unbound_test	Tests/test_autodock4.py	/^class AutoDock4_unbound_test( AutoDock_base_test ):$/;"	c	inherits: AutoDock_base_test 
AutoDock4_unbound_test.test_dlg_exists_and_test_energy	Tests/test_autodock4.py	/^    def test_dlg_exists_and_test_energy( self):$/;"	m	class:AutoDock4_unbound_test	access:public
AutoDock_base_test	Tests/test_autodock4.py	/^class AutoDock_base_test( unittest.TestCase ):$/;"	c	inherits: unittest.TestCase 
AutoDock_base_test.setUp	Tests/test_autodock4.py	/^    def setUp( self ):$/;"	m	class:AutoDock_base_test	access:public
AutoDock_simple_test	Tests/test_autodock4.py	/^class AutoDock_simple_test( unittest.TestCase ):$/;"	c	inherits: unittest.TestCase 
AutoDock_simple_test.setUp	Tests/test_autodock4.py	/^    def setUp( self ):$/;"	m	class:AutoDock_simple_test	access:public
AutoDock_simple_test.test_dlg_exists	Tests/test_autodock4.py	/^    def test_dlg_exists( self ):$/;"	m	class:AutoDock_simple_test	access:public
AutoDock_test	Tests/test_autodock4.py	/^class AutoDock_test( AutoDock_base_test ):$/;"	c	inherits: AutoDock_base_test 
AutoDock_test.test_dlg_exists_and_test_energy	Tests/test_autodock4.py	/^    def test_dlg_exists_and_test_energy( self ):$/;"	m	class:AutoDock_test	access:public
AverageOfN	gs.h	/^enum Worst_Mode { AverageOfN, OfN, Ever };$/;"	e	enum:Worst_Mode
Axis	structs.h	/^} Axis;$/;"	t	typeref:struct:axis
AxisAngle	structs.h	/^} AxisAngle;$/;"	t	typeref:struct:axisangle
BANNER	banner.h	28;"	d
BASE_DIMENSIONS	conformation_sampler.h	38;"	d
BESTPDB	bestpdb.h	28;"	d
BIG	autocomm.h	75;"	d
BIG_ENERGY	energy.h	27;"	d
BIN_SIZE	conformation_sampler.h	40;"	d
BOND_LENGTH_TOLERANCE	mdist.h	30;"	d
BOUND_CALCULATION	constants.h	522;"	d
BUILT_SOURCES	Makefile	/^BUILT_SOURCES = main.cc default_parameters.h$/;"	m
B_ShowTorE	eval.h	/^      Boole B_calcIntElec, B_isGaussTorCon, B_ShowTorE;$/;"	m	class:Eval	access:private
B_calcIntElec	eval.h	/^      Boole B_calcIntElec, B_isGaussTorCon, B_ShowTorE;$/;"	m	class:Eval	access:private
B_compute_intermol_energy	eval.h	/^      Boole B_compute_intermol_energy; \/\/ use for computing unbound state$/;"	m	class:Eval	access:private
B_constrain	molstruct.h	/^	Boole B_constrain;$/;"	m	struct:molecule	access:public
B_constrain	structs.h	/^  Boole B_constrain;		\/* TRUE if any distance constraints *\/$/;"	m	struct:group	access:public
B_found_about_keyword	main.cc	/^static Boole B_found_about_keyword = FALSE; \/\/set false by 'move' true by 'about'$/;"	v	file:
B_found_desolvmap	main.cc	/^static Boole B_found_desolvmap = FALSE;$/;"	v	file:
B_found_elecmap	main.cc	/^static Boole B_found_elecmap = FALSE;$/;"	v	file:
B_haveCharges	molstruct.h	/^	Boole B_haveCharges;$/;"	m	struct:molecule	access:public
B_have_flexible_residues	eval.h	/^      Boole B_have_flexible_residues;$/;"	m	class:Eval	access:private
B_include_1_4_interactions	eval.h	/^      Boole         B_include_1_4_interactions; \/\/ gmm 2005-01-8, for scaling 1-4 nonbonds$/;"	m	class:Eval	access:private
B_isGaussTorCon	eval.h	/^      Boole B_calcIntElec, B_isGaussTorCon, B_ShowTorE;$/;"	m	class:Eval	access:private
B_isTorConstrained	eval.h	/^      Boole *B_isTorConstrained;$/;"	m	class:Eval	access:private
B_use_non_bond_cutoff	eval.h	/^      Boole B_use_non_bond_cutoff;  \/\/ set this to FALSE if we are computing unbound extended conformations$/;"	m	class:Eval	access:private
BitFlip	gs.h	/^enum M_mode { ERR = -1, BitFlip, CauchyDev, IUniformSub };$/;"	e	enum:M_mode
BitVector	rep.cc	/^BitVector::BitVector(const BitVector &original)$/;"	f	class:BitVector	signature:(const BitVector &original)
BitVector	rep.cc	/^BitVector::BitVector(int num_els)$/;"	f	class:BitVector	signature:(int num_els)
BitVector	rep.cc	/^BitVector::BitVector(int num_els, Real prob)$/;"	f	class:BitVector	signature:(int num_els, Real prob)
BitVector	rep.h	/^      BitVector(const BitVector &);$/;"	p	class:BitVector	access:public	signature:(const BitVector &)
BitVector	rep.h	/^      BitVector(int);$/;"	p	class:BitVector	access:public	signature:(int)
BitVector	rep.h	/^      BitVector(int, Real);$/;"	p	class:BitVector	access:public	signature:(int, Real)
BitVector	rep.h	/^      BitVector(int, unsigned char *);$/;"	p	class:BitVector	access:public	signature:(int, unsigned char *)
BitVector	rep.h	/^      BitVector(void);$/;"	p	class:BitVector	access:public	signature:(void)
BitVector	rep.h	/^class BitVector : public Representation$/;"	c	inherits:Representation
BitVector	rep.h	/^inline BitVector::BitVector(int num_els, unsigned char *array)$/;"	f	class:BitVector	signature:(int num_els, unsigned char *array)
BitVector	rep.h	/^inline BitVector::BitVector(void)$/;"	f	class:BitVector	signature:(void)
BitVector::BitVector	rep.cc	/^BitVector::BitVector(const BitVector &original)$/;"	f	class:BitVector	signature:(const BitVector &original)
BitVector::BitVector	rep.cc	/^BitVector::BitVector(int num_els)$/;"	f	class:BitVector	signature:(int num_els)
BitVector::BitVector	rep.cc	/^BitVector::BitVector(int num_els, Real prob)$/;"	f	class:BitVector	signature:(int num_els, Real prob)
BitVector::BitVector	rep.h	/^      BitVector(const BitVector &);$/;"	p	class:BitVector	access:public	signature:(const BitVector &)
BitVector::BitVector	rep.h	/^      BitVector(int);$/;"	p	class:BitVector	access:public	signature:(int)
BitVector::BitVector	rep.h	/^      BitVector(int, Real);$/;"	p	class:BitVector	access:public	signature:(int, Real)
BitVector::BitVector	rep.h	/^      BitVector(int, unsigned char *);$/;"	p	class:BitVector	access:public	signature:(int, unsigned char *)
BitVector::BitVector	rep.h	/^      BitVector(void);$/;"	p	class:BitVector	access:public	signature:(void)
BitVector::BitVector	rep.h	/^inline BitVector::BitVector(int num_els, unsigned char *array)$/;"	f	class:BitVector	signature:(int num_els, unsigned char *array)
BitVector::BitVector	rep.h	/^inline BitVector::BitVector(void)$/;"	f	class:BitVector	signature:(void)
BitVector::clone	rep.h	/^      Representation *clone(void) const;$/;"	p	class:BitVector	access:protected	signature:(void) const
BitVector::clone	rep.h	/^inline Representation *BitVector::clone(void) const$/;"	f	class:BitVector	signature:(void) const
BitVector::gene	rep.cc	/^const Element BitVector::gene(unsigned int gene_number) const$/;"	f	class:BitVector	signature:(unsigned int gene_number) const
BitVector::gene	rep.h	/^      const Element gene(unsigned int) const;$/;"	p	class:BitVector	access:public	signature:(unsigned int) const
BitVector::internals	rep.cc	/^const void *BitVector::internals(void) const$/;"	f	class:BitVector	signature:(void) const
BitVector::internals	rep.h	/^      const void *internals(void) const;$/;"	p	class:BitVector	access:protected	signature:(void) const
BitVector::one_prob	rep.cc	/^Real BitVector::one_prob = 0.5;$/;"	m	class:BitVector	file:
BitVector::one_prob	rep.h	/^      static Real one_prob;$/;"	m	class:BitVector	access:protected
BitVector::operator =	rep.cc	/^Representation &BitVector::operator=(const Representation &original)$/;"	f	class:BitVector	signature:(const Representation &original)
BitVector::operator =	rep.h	/^      Representation &operator=(const Representation &);$/;"	p	class:BitVector	access:public	signature:(const Representation &)
BitVector::vector	rep.h	/^      unsigned char *vector;$/;"	m	class:BitVector	access:protected
BitVector::write	rep.cc	/^void BitVector::write(FourByteLong value, int gene)$/;"	f	class:BitVector	signature:(FourByteLong value, int gene)
BitVector::write	rep.cc	/^void BitVector::write(const Element value, int gene)$/;"	f	class:BitVector	signature:(const Element value, int gene)
BitVector::write	rep.cc	/^void BitVector::write(double value, int gene)$/;"	f	class:BitVector	signature:(double value, int gene)
BitVector::write	rep.cc	/^void BitVector::write(unsigned char value, int gene)$/;"	f	class:BitVector	signature:(unsigned char value, int gene)
BitVector::write	rep.h	/^      void write(FourByteLong, int);$/;"	p	class:BitVector	access:public	signature:(FourByteLong, int)
BitVector::write	rep.h	/^      void write(const Element, int);$/;"	p	class:BitVector	access:public	signature:(const Element, int)
BitVector::write	rep.h	/^      void write(double, int);$/;"	p	class:BitVector	access:public	signature:(double, int)
BitVector::write	rep.h	/^      void write(unsigned char, int);$/;"	p	class:BitVector	access:public	signature:(unsigned char, int)
BitVector::~BitVector	rep.h	/^      ~BitVector(void);$/;"	p	class:BitVector	access:public	signature:(void)
BitVector::~BitVector	rep.h	/^inline BitVector::~BitVector(void)$/;"	f	class:BitVector	signature:(void)
Boltzmann	gs.h	/^enum Selection_Mode { Proportional=0, LinearRanking=1, Tournament=2, Boltzmann=3 };$/;"	e	enum:Selection_Mode
Boltzmann_diff_sum	conformation_sampler.h	/^		Real Boltzmann_sum, Boltzmann_diff_sum;$/;"	m	class:ConformationSampler	access:public
Boltzmann_sum	conformation_sampler.h	/^		Real Boltzmann_sum, Boltzmann_diff_sum;$/;"	m	class:ConformationSampler	access:public
Bond	structs.h	/^} Bond;$/;"	t	typeref:struct:bond
Boole	autocomm.h	/^typedef char Boole;$/;"	t
BoundedAng_to_index	constants.h	294;"	d
BoundedNdiel	constants.h	311;"	d
BoundedNeint	constants.h	308;"	d
BoundedSqAng_to_index	constants.h	305;"	d
Branch	gs.h	/^enum Xover_Mode { TwoPt=0, OnePt=1, Uniform=2, Arithmetic=3, Branch=4 };$/;"	e	enum:Xover_Mode
C	mdist.h	/^enum {C=0,N=1,O=2,H=3,XX=4,P=5,S=6};  \/\/ see "bond_index" in the "AD4.1_bound.dat" or "AD4_parameters.dat" file.$/;"	e	enum:__anon1
CALCULATEENERGIES	calculateEnergies.h	28;"	d
CALL_GLSS	hybrids.h	45;"	d
CALL_GLSS_TORS	hybrids.h	69;"	d
CALL_GS	hybrids.h	96;"	d
CALL_LS	hybrids.h	88;"	d
CALL_PSO	hybrids.h	108;"	d
CARBON	autocomm.h	113;"	d
CC	Makefile	/^CC = gcc$/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -O2$/;"	m
CHANGESTATE	changeState.h	28;"	d
CHANGE_MODE	investigate.cc	44;"	d	file:
CHECK_ISNAN	gs.cc	990;"	d	file:
CHKHDFLOAT	check_header_float.h	28;"	d
CHKHDINT	check_header_int.h	28;"	d
CHKHDLINE	check_header_line.h	28;"	d
CLEANFILES	Makefile	/^CLEANFILES = default_parameters.h$/;"	m
CLMODE	clmode.h	29;"	d
CLOCKS_PER_SEC	constants.h	394;"	d
CLUSTER_ANALYSIS	cluster_analysis.h	28;"	d
CNV_STATE_TO_COORDS	cnv_state_to_coords.h	28;"	d
COMMON_STUFF	autocomm.h	55;"	d
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONSTANTS	constants.h	65;"	d
CONST_FLOAT	constants.h	402;"	d
CONST_INT	constants.h	401;"	d
COPYDIMENSION	dimLibrary.h	2;"	d
COPYSTATE	stateLibrary.h	28;"	d
COVALENT	autocomm.h	120;"	d
COVALENT2	autocomm.h	121;"	d
COVALENTTYPE	autocomm.h	110;"	d
COVALENTTYPE2	autocomm.h	111;"	d
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = $/;"	m
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CXX	Makefile	/^CXX = g++$/;"	m
CXXCOMPILE	Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXDEPMODE	Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = $/;"	m
CXXLD	Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	Makefile	/^CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \\$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
CauchyDev	gs.h	/^enum M_mode { ERR = -1, BitFlip, CauchyDev, IUniformSub };$/;"	e	enum:M_mode
Charge	structs.h	/^} Charge;$/;"	t	typeref:struct:chargestruct
Clock	autocomm.h	182;"	d
Clock	autocomm.h	184;"	d
Clock	test_times.cc	41;"	d	file:
Clock	test_times.cc	43;"	d	file:
Compact	constants.h	/^enum Unbound_Model { Unbound_Default=0, Unbound_Same_As_Bound=1, Extended=2, Compact=3, User=4 };$/;"	e	enum:Unbound_Model
ConformationSampler	conformation_sampler.cc	/^ConformationSampler::ConformationSampler(State init_state) {$/;"	f	class:ConformationSampler	signature:(State init_state)
ConformationSampler	conformation_sampler.h	/^		ConformationSampler(State);$/;"	p	class:ConformationSampler	access:public	signature:(State)
ConformationSampler	conformation_sampler.h	/^class ConformationSampler {$/;"	c
ConformationSampler::Boltzmann_diff_sum	conformation_sampler.h	/^		Real Boltzmann_sum, Boltzmann_diff_sum;$/;"	m	class:ConformationSampler	access:public
ConformationSampler::Boltzmann_sum	conformation_sampler.h	/^		Real Boltzmann_sum, Boltzmann_diff_sum;$/;"	m	class:ConformationSampler	access:public
ConformationSampler::ConformationSampler	conformation_sampler.cc	/^ConformationSampler::ConformationSampler(State init_state) {$/;"	f	class:ConformationSampler	signature:(State init_state)
ConformationSampler::ConformationSampler	conformation_sampler.h	/^		ConformationSampler(State);$/;"	p	class:ConformationSampler	access:public	signature:(State)
ConformationSampler::RK_entropy	conformation_sampler.cc	/^Real ConformationSampler::RK_entropy(void) {$/;"	f	class:ConformationSampler	signature:(void)
ConformationSampler::RK_entropy	conformation_sampler.h	/^		Real RK_entropy(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
ConformationSampler::average_favorable_energy	conformation_sampler.cc	/^Real ConformationSampler::average_favorable_energy(void) {$/;"	f	class:ConformationSampler	signature:(void)
ConformationSampler::average_favorable_energy	conformation_sampler.h	/^		Real average_favorable_energy(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
ConformationSampler::base_axis_angle	conformation_sampler.h	/^		Real base_axis_angle[4];$/;"	m	class:ConformationSampler	access:public
ConformationSampler::base_crd	conformation_sampler.h	/^		Real base_crd[MAX_ATOMS][SPACE]; \/\/probe_crd?;$/;"	m	class:ConformationSampler	access:public
ConformationSampler::base_energy	conformation_sampler.h	/^		Real base_energy, total_energy, total_favorable_energy;$/;"	m	class:ConformationSampler	access:public
ConformationSampler::base_ind	conformation_sampler.h	/^		Individual base_ind, probe_ind;$/;"	m	class:ConformationSampler	access:public
ConformationSampler::base_point	conformation_sampler.h	/^		Phenotype base_point, probe_point;$/;"	m	class:ConformationSampler	access:public
ConformationSampler::base_q	conformation_sampler.h	/^        Quat base_q;$/;"	m	class:ConformationSampler	access:public
ConformationSampler::base_state	conformation_sampler.h	/^		State base_state, probe_state;$/;"	m	class:ConformationSampler	access:public
ConformationSampler::bin_Boltzmann_sum	conformation_sampler.h	/^		Real bin_Boltzmann_sum[NUM_BINS];$/;"	m	class:ConformationSampler	access:public
ConformationSampler::bin_count	conformation_sampler.h	/^		int bin_count[NUM_BINS];$/;"	m	class:ConformationSampler	access:public
ConformationSampler::bin_count_favorable	conformation_sampler.h	/^		int bin_count_favorable[NUM_BINS];$/;"	m	class:ConformationSampler	access:public
ConformationSampler::bin_max_energy	conformation_sampler.h	/^		Real bin_max_energy[NUM_BINS];$/;"	m	class:ConformationSampler	access:public
ConformationSampler::bin_min_energy	conformation_sampler.h	/^		Real bin_min_energy[NUM_BINS];$/;"	m	class:ConformationSampler	access:public
ConformationSampler::bin_total_energy	conformation_sampler.h	/^		Real bin_total_energy[NUM_BINS];$/;"	m	class:ConformationSampler	access:public
ConformationSampler::bin_total_favorable_energy	conformation_sampler.h	/^		Real bin_total_favorable_energy[NUM_BINS];$/;"	m	class:ConformationSampler	access:public
ConformationSampler::configurational_integral	conformation_sampler.cc	/^Real ConformationSampler::configurational_integral(void) {$/;"	f	class:ConformationSampler	signature:(void)
ConformationSampler::configurational_integral	conformation_sampler.h	/^		Real configurational_integral(void);$/;"	p	class:ConformationSampler	access:private	signature:(void)
ConformationSampler::current_energy	conformation_sampler.cc	/^Real ConformationSampler::current_energy(void) {$/;"	f	class:ConformationSampler	signature:(void)
ConformationSampler::current_energy	conformation_sampler.h	/^		Real current_energy(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
ConformationSampler::current_rmsd	conformation_sampler.cc	/^Real ConformationSampler::current_rmsd(void) {$/;"	f	class:ConformationSampler	signature:(void)
ConformationSampler::current_rmsd	conformation_sampler.h	/^		Real current_rmsd(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
ConformationSampler::dimensionality	conformation_sampler.h	/^		int dimensionality, evals, favorable_evals;$/;"	m	class:ConformationSampler	access:public
ConformationSampler::energy_volume	conformation_sampler.cc	/^Real ConformationSampler::energy_volume(void) {$/;"	f	class:ConformationSampler	signature:(void)
ConformationSampler::energy_volume	conformation_sampler.h	/^		Real energy_volume(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
ConformationSampler::entropy_estimate	conformation_sampler.cc	/^Real ConformationSampler::entropy_estimate(void) {$/;"	f	class:ConformationSampler	signature:(void)
ConformationSampler::entropy_estimate	conformation_sampler.h	/^		Real entropy_estimate(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
ConformationSampler::evals	conformation_sampler.h	/^		int dimensionality, evals, favorable_evals;$/;"	m	class:ConformationSampler	access:public
ConformationSampler::favorable_evals	conformation_sampler.h	/^		int dimensionality, evals, favorable_evals;$/;"	m	class:ConformationSampler	access:public
ConformationSampler::fraction_favorable	conformation_sampler.cc	/^Real ConformationSampler::fraction_favorable(void) {$/;"	f	class:ConformationSampler	signature:(void)
ConformationSampler::fraction_favorable	conformation_sampler.h	/^		Real fraction_favorable(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
ConformationSampler::max_values	conformation_sampler.h	/^		Real max_values[BASE_DIMENSIONS-1];$/;"	m	class:ConformationSampler	access:public
ConformationSampler::min_energy	conformation_sampler.h	/^		Real min_energy, min_energy_rmsd;$/;"	m	class:ConformationSampler	access:public
ConformationSampler::min_energy_rmsd	conformation_sampler.h	/^		Real min_energy, min_energy_rmsd;$/;"	m	class:ConformationSampler	access:public
ConformationSampler::min_values	conformation_sampler.h	/^		Real min_values[BASE_DIMENSIONS-1];$/;"	m	class:ConformationSampler	access:public
ConformationSampler::normalized_Boltzmann	conformation_sampler.cc	/^Real ConformationSampler::normalized_Boltzmann(void) {$/;"	f	class:ConformationSampler	signature:(void)
ConformationSampler::normalized_Boltzmann	conformation_sampler.h	/^		Real normalized_Boltzmann(void);$/;"	p	class:ConformationSampler	access:private	signature:(void)
ConformationSampler::normalized_volume	conformation_sampler.cc	/^Real ConformationSampler::normalized_volume(void) {$/;"	f	class:ConformationSampler	signature:(void)
ConformationSampler::normalized_volume	conformation_sampler.h	/^		Real normalized_volume(void);$/;"	p	class:ConformationSampler	access:private	signature:(void)
ConformationSampler::output_statistics	conformation_sampler.cc	/^void ConformationSampler::output_statistics(void) {$/;"	f	class:ConformationSampler	signature:(void)
ConformationSampler::output_statistics	conformation_sampler.h	/^		void output_statistics(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
ConformationSampler::partition_function	conformation_sampler.cc	/^Real ConformationSampler::partition_function(int bin) {$/;"	f	class:ConformationSampler	signature:(int bin)
ConformationSampler::partition_function	conformation_sampler.cc	/^Real ConformationSampler::partition_function(void) {$/;"	f	class:ConformationSampler	signature:(void)
ConformationSampler::partition_function	conformation_sampler.h	/^		Real partition_function(int bin);$/;"	p	class:ConformationSampler	access:public	signature:(int bin)
ConformationSampler::partition_function	conformation_sampler.h	/^		Real partition_function(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
ConformationSampler::probe_ind	conformation_sampler.h	/^		Individual base_ind, probe_ind;$/;"	m	class:ConformationSampler	access:public
ConformationSampler::probe_point	conformation_sampler.h	/^		Phenotype base_point, probe_point;$/;"	m	class:ConformationSampler	access:public
ConformationSampler::probe_state	conformation_sampler.h	/^		State base_state, probe_state;$/;"	m	class:ConformationSampler	access:public
ConformationSampler::random_sample	conformation_sampler.cc	/^void ConformationSampler::random_sample(int num_samples) {$/;"	f	class:ConformationSampler	signature:(int num_samples)
ConformationSampler::random_sample	conformation_sampler.cc	/^void ConformationSampler::random_sample(void) {$/;"	f	class:ConformationSampler	signature:(void)
ConformationSampler::random_sample	conformation_sampler.h	/^		void random_sample(int);$/;"	p	class:ConformationSampler	access:public	signature:(int)
ConformationSampler::random_sample	conformation_sampler.h	/^		void random_sample(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
ConformationSampler::reference_rmsd	conformation_sampler.cc	/^Real ConformationSampler::reference_rmsd(void) {$/;"	f	class:ConformationSampler	signature:(void)
ConformationSampler::reference_rmsd	conformation_sampler.h	/^		Real reference_rmsd(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
ConformationSampler::systematic_search	conformation_sampler.cc	/^void ConformationSampler::systematic_search(int index) {$/;"	f	class:ConformationSampler	signature:(int index)
ConformationSampler::systematic_search	conformation_sampler.h	/^		void systematic_search(int index);$/;"	p	class:ConformationSampler	access:public	signature:(int index)
ConformationSampler::temp_rotation_angle	conformation_sampler.h	/^		Real temp_rotation_angle;$/;"	m	class:ConformationSampler	access:public
ConformationSampler::total_energy	conformation_sampler.h	/^		Real base_energy, total_energy, total_favorable_energy;$/;"	m	class:ConformationSampler	access:public
ConformationSampler::total_favorable_energy	conformation_sampler.h	/^		Real base_energy, total_energy, total_favorable_energy;$/;"	m	class:ConformationSampler	access:public
ConformationSampler::update_bounds	conformation_sampler.cc	/^void ConformationSampler::update_bounds(void) {$/;"	f	class:ConformationSampler	signature:(void)
ConformationSampler::update_bounds	conformation_sampler.h	/^		void update_bounds(void);$/;"	p	class:ConformationSampler	access:private	signature:(void)
ConformationSampler::~ConformationSampler	conformation_sampler.cc	/^ConformationSampler::~ConformationSampler(void) {$/;"	f	class:ConformationSampler	signature:(void)
ConformationSampler::~ConformationSampler	conformation_sampler.h	/^		~ConformationSampler(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
ConstrainedRealVector	rep.cc	/^ConstrainedRealVector::ConstrainedRealVector(const ConstrainedRealVector &original)$/;"	f	class:ConstrainedRealVector	signature:(const ConstrainedRealVector &original)
ConstrainedRealVector	rep.cc	/^ConstrainedRealVector::ConstrainedRealVector(int num_els)$/;"	f	class:ConstrainedRealVector	signature:(int num_els)
ConstrainedRealVector	rep.cc	/^ConstrainedRealVector::ConstrainedRealVector(int num_els, double init_low, double init_high)$/;"	f	class:ConstrainedRealVector	signature:(int num_els, double init_low, double init_high)
ConstrainedRealVector	rep.h	/^      ConstrainedRealVector(const ConstrainedRealVector &);$/;"	p	class:ConstrainedRealVector	access:public	signature:(const ConstrainedRealVector &)
ConstrainedRealVector	rep.h	/^      ConstrainedRealVector(int);$/;"	p	class:ConstrainedRealVector	access:public	signature:(int)
ConstrainedRealVector	rep.h	/^      ConstrainedRealVector(int, double *);$/;"	p	class:ConstrainedRealVector	access:public	signature:(int, double *)
ConstrainedRealVector	rep.h	/^      ConstrainedRealVector(int, double, double);$/;"	p	class:ConstrainedRealVector	access:public	signature:(int, double, double)
ConstrainedRealVector	rep.h	/^      ConstrainedRealVector(void);$/;"	p	class:ConstrainedRealVector	access:public	signature:(void)
ConstrainedRealVector	rep.h	/^class ConstrainedRealVector : public Representation$/;"	c	inherits:Representation
ConstrainedRealVector	rep.h	/^inline ConstrainedRealVector::ConstrainedRealVector(int num_els, double *array)$/;"	f	class:ConstrainedRealVector	signature:(int num_els, double *array)
ConstrainedRealVector	rep.h	/^inline ConstrainedRealVector::ConstrainedRealVector(void)$/;"	f	class:ConstrainedRealVector	signature:(void)
ConstrainedRealVector::ConstrainedRealVector	rep.cc	/^ConstrainedRealVector::ConstrainedRealVector(const ConstrainedRealVector &original)$/;"	f	class:ConstrainedRealVector	signature:(const ConstrainedRealVector &original)
ConstrainedRealVector::ConstrainedRealVector	rep.cc	/^ConstrainedRealVector::ConstrainedRealVector(int num_els)$/;"	f	class:ConstrainedRealVector	signature:(int num_els)
ConstrainedRealVector::ConstrainedRealVector	rep.cc	/^ConstrainedRealVector::ConstrainedRealVector(int num_els, double init_low, double init_high)$/;"	f	class:ConstrainedRealVector	signature:(int num_els, double init_low, double init_high)
ConstrainedRealVector::ConstrainedRealVector	rep.h	/^      ConstrainedRealVector(const ConstrainedRealVector &);$/;"	p	class:ConstrainedRealVector	access:public	signature:(const ConstrainedRealVector &)
ConstrainedRealVector::ConstrainedRealVector	rep.h	/^      ConstrainedRealVector(int);$/;"	p	class:ConstrainedRealVector	access:public	signature:(int)
ConstrainedRealVector::ConstrainedRealVector	rep.h	/^      ConstrainedRealVector(int, double *);$/;"	p	class:ConstrainedRealVector	access:public	signature:(int, double *)
ConstrainedRealVector::ConstrainedRealVector	rep.h	/^      ConstrainedRealVector(int, double, double);$/;"	p	class:ConstrainedRealVector	access:public	signature:(int, double, double)
ConstrainedRealVector::ConstrainedRealVector	rep.h	/^      ConstrainedRealVector(void);$/;"	p	class:ConstrainedRealVector	access:public	signature:(void)
ConstrainedRealVector::ConstrainedRealVector	rep.h	/^inline ConstrainedRealVector::ConstrainedRealVector(int num_els, double *array)$/;"	f	class:ConstrainedRealVector	signature:(int num_els, double *array)
ConstrainedRealVector::ConstrainedRealVector	rep.h	/^inline ConstrainedRealVector::ConstrainedRealVector(void)$/;"	f	class:ConstrainedRealVector	signature:(void)
ConstrainedRealVector::clone	rep.h	/^      Representation *clone(void) const;$/;"	p	class:ConstrainedRealVector	access:protected	signature:(void) const
ConstrainedRealVector::clone	rep.h	/^inline Representation *ConstrainedRealVector::clone(void) const$/;"	f	class:ConstrainedRealVector	signature:(void) const
ConstrainedRealVector::gene	rep.cc	/^const Element ConstrainedRealVector::gene(unsigned int gene_number) const$/;"	f	class:ConstrainedRealVector	signature:(unsigned int gene_number) const
ConstrainedRealVector::gene	rep.h	/^      const Element gene(unsigned int) const;$/;"	p	class:ConstrainedRealVector	access:public	signature:(unsigned int) const
ConstrainedRealVector::high	rep.cc	/^Real ConstrainedRealVector::high = REALV_HIGH;$/;"	m	class:ConstrainedRealVector	file:
ConstrainedRealVector::high	rep.h	/^      static Real high, low;$/;"	m	class:ConstrainedRealVector	access:protected
ConstrainedRealVector::internals	rep.cc	/^const void *ConstrainedRealVector::internals(void) const$/;"	f	class:ConstrainedRealVector	signature:(void) const
ConstrainedRealVector::internals	rep.h	/^      const void *internals(void) const;$/;"	p	class:ConstrainedRealVector	access:protected	signature:(void) const
ConstrainedRealVector::low	rep.cc	/^Real ConstrainedRealVector::low = REALV_LOW;$/;"	m	class:ConstrainedRealVector	file:
ConstrainedRealVector::low	rep.h	/^      static Real high, low;$/;"	m	class:ConstrainedRealVector	access:protected
ConstrainedRealVector::normalize	rep.cc	/^void ConstrainedRealVector::normalize(void)$/;"	f	class:ConstrainedRealVector	signature:(void)
ConstrainedRealVector::normalize	rep.h	/^      void normalize(void);$/;"	p	class:ConstrainedRealVector	access:protected	signature:(void)
ConstrainedRealVector::operator =	rep.cc	/^Representation &ConstrainedRealVector::operator=(const Representation &original)$/;"	f	class:ConstrainedRealVector	signature:(const Representation &original)
ConstrainedRealVector::operator =	rep.h	/^      Representation &operator=(const Representation &);$/;"	p	class:ConstrainedRealVector	access:public	signature:(const Representation &)
ConstrainedRealVector::sum	rep.cc	/^double ConstrainedRealVector::sum = 1.0;$/;"	m	class:ConstrainedRealVector	file:
ConstrainedRealVector::sum	rep.h	/^      static double sum;$/;"	m	class:ConstrainedRealVector	access:protected
ConstrainedRealVector::vector	rep.h	/^      double *vector;$/;"	m	class:ConstrainedRealVector	access:protected
ConstrainedRealVector::write	rep.cc	/^void ConstrainedRealVector::write(FourByteLong value, int gene)$/;"	f	class:ConstrainedRealVector	signature:(FourByteLong value, int gene)
ConstrainedRealVector::write	rep.cc	/^void ConstrainedRealVector::write(const Element value, int gene)$/;"	f	class:ConstrainedRealVector	signature:(const Element value, int gene)
ConstrainedRealVector::write	rep.cc	/^void ConstrainedRealVector::write(double a, double b, double c, double d)$/;"	f	class:ConstrainedRealVector	signature:(double a, double b, double c, double d)
ConstrainedRealVector::write	rep.cc	/^void ConstrainedRealVector::write(double value, int gene)$/;"	f	class:ConstrainedRealVector	signature:(double value, int gene)
ConstrainedRealVector::write	rep.cc	/^void ConstrainedRealVector::write(unsigned char value, int gene)$/;"	f	class:ConstrainedRealVector	signature:(unsigned char value, int gene)
ConstrainedRealVector::write	rep.h	/^      void write(FourByteLong, int);$/;"	p	class:ConstrainedRealVector	access:public	signature:(FourByteLong, int)
ConstrainedRealVector::write	rep.h	/^      void write(const Element, int);$/;"	p	class:ConstrainedRealVector	access:public	signature:(const Element, int)
ConstrainedRealVector::write	rep.h	/^      void write(double, double, double, double);$/;"	p	class:ConstrainedRealVector	access:public	signature:(double, double, double, double)
ConstrainedRealVector::write	rep.h	/^      void write(double, int);$/;"	p	class:ConstrainedRealVector	access:public	signature:(double, int)
ConstrainedRealVector::write	rep.h	/^      void write(unsigned char, int);$/;"	p	class:ConstrainedRealVector	access:public	signature:(unsigned char, int)
ConstrainedRealVector::~ConstrainedRealVector	rep.h	/^      ~ConstrainedRealVector(void);$/;"	p	class:ConstrainedRealVector	access:public	signature:(void)
ConstrainedRealVector::~ConstrainedRealVector	rep.h	/^inline ConstrainedRealVector::~ConstrainedRealVector(void)$/;"	f	class:ConstrainedRealVector	signature:(void)
Coord	structs.h	/^} Coord;$/;"	t	typeref:struct:coord
Cross_product	constants.h	490;"	d
D	main.cc	/^int D; \/\/search space dimension $/;"	v
D1	parameters.h	/^{ NON, DS, D1, AS, A1, A2 };	\/* hbonding character: *\/$/;"	e	enum:hbond_type
DEBUG_STUFF	constants.h	367;"	d
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I. -I$(srcdir)$/;"	m
DEFAULT_INCREMENTAL_STEPS	conformation_sampler.cc	48;"	d	file:
DEFAULT_RANDOM_SAMPLES	conformation_sampler.cc	47;"	d	file:
DEFHWDTH	constants.h	128;"	d
DEFS	Makefile	/^DEFS = -DPACKAGE_NAME=\\"covdock\\" -DPACKAGE_TARNAME=\\"covdock\\" -DPACKAGE_VERSION=\\"0.2\\" -DPACKAGE_STRING=\\"covdock\\ 0.2\\" -DPACKAGE_BUGREPORT=\\"xouyang1@ntu.edu.sg\\" -DPACKAGE=\\"covdock\\" -DVERSION=\\"0.2\\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE__BOOL=1 -DHAVE_STDBOOL_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MALLOC=1 -DHAVE_GETHOSTNAME=1 -DHAVE_STRNCASECMP=1 $/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_ARCHIVES	Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = README $(am__configure_deps) $(srcdir)\/Makefile.am \\$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(libad_a_SOURCES) $(covalentDock_SOURCES)$/;"	m
DOCKED	main.h	64;"	d
DPF_	dpftoken.h	49;"	d
DPF_ABOUT	dpftoken.h	56;"	d
DPF_ACCS	dpftoken.h	73;"	d
DPF_ANALYSIS	dpftoken.h	125;"	d
DPF_AXISANGLE0	dpftoken.h	58;"	d
DPF_BARRIER	dpftoken.h	95;"	d
DPF_CHARMAP	dpftoken.h	99;"	d
DPF_CLUSALL	dpftoken.h	86;"	d
DPF_CLUSTER	dpftoken.h	85;"	d
DPF_COLINY	dpftoken.h	131;"	d
DPF_COMMENT	dpftoken.h	51;"	d
DPF_COMPUTE_UNBOUND_EXTENDED	dpftoken.h	142;"	d
DPF_CONFSAMPLER	dpftoken.h	148;"	d
DPF_COPYRIGHT	dpftoken.h	151;"	d
DPF_CYCLES	dpftoken.h	72;"	d
DPF_DESOLVMAP	dpftoken.h	145;"	d
DPF_DIHE0	dpftoken.h	60;"	d
DPF_DIHRF	dpftoken.h	66;"	d
DPF_DSTEP	dpftoken.h	63;"	d
DPF_E0MAX	dpftoken.h	98;"	d
DPF_ELECMAP	dpftoken.h	144;"	d
DPF_EPDB	dpftoken.h	137;"	d
DPF_EXTNRG	dpftoken.h	83;"	d
DPF_FLD	dpftoken.h	53;"	d
DPF_FLEX	dpftoken.h	67;"	d
DPF_FLEXRES	dpftoken.h	143;"	d
DPF_GALS	dpftoken.h	102;"	d
DPF_GAUSSTORCON	dpftoken.h	94;"	d
DPF_GS	dpftoken.h	124;"	d
DPF_HARDTORCON	dpftoken.h	97;"	d
DPF_HOLLOW_OUT	dpftoken.h	130;"	d
DPF_INCLUDE_1_4_INTERACTIONS	dpftoken.h	132;"	d
DPF_INTELEC	dpftoken.h	90;"	d
DPF_INTNBP_COEFFS	dpftoken.h	68;"	d
DPF_INTNBP_REQM_EPS	dpftoken.h	92;"	d
DPF_INVESTIGATE	dpftoken.h	127;"	d
DPF_LIGAND_TYPES	dpftoken.h	135;"	d
DPF_LIG_NOT_INHIB	dpftoken.h	128;"	d
DPF_LS	dpftoken.h	123;"	d
DPF_MAP	dpftoken.h	54;"	d
DPF_MOVE	dpftoken.h	55;"	d
DPF_NDIHE	dpftoken.h	59;"	d
DPF_NEWCRD	dpftoken.h	84;"	d
DPF_NULL	dpftoken.h	50;"	d
DPF_OUTLEV	dpftoken.h	76;"	d
DPF_PARAMETER_LIBRARY	dpftoken.h	133;"	d
DPF_PARAMETER_VERSION	dpftoken.h	154;"	d
DPF_PARSWARMOPT	dpftoken.h	176;"	d
DPF_POPFILE	dpftoken.h	140;"	d
DPF_PSO_CONSTRICTION	dpftoken.h	172;"	d
DPF_PSO_SSM	dpftoken.h	175;"	d
DPF_PSO_STANDARD_CW	dpftoken.h	174;"	d
DPF_PSO_STANDARD_VW	dpftoken.h	173;"	d
DPF_QSTEP	dpftoken.h	62;"	d
DPF_QUARF	dpftoken.h	65;"	d
DPF_QUAT0	dpftoken.h	153;"	d
DPF_QUATERNION0	dpftoken.h	150;"	d
DPF_RAMP_VDW_REPULSION	dpftoken.h	100;"	d
DPF_RECEPTOR_TYPES	dpftoken.h	134;"	d
DPF_REJS	dpftoken.h	74;"	d
DPF_REORIENT	dpftoken.h	149;"	d
DPF_RMSATOMS	dpftoken.h	147;"	d
DPF_RMSNOSYM	dpftoken.h	87;"	d
DPF_RMSREF	dpftoken.h	89;"	d
DPF_RMSTOL	dpftoken.h	77;"	d
DPF_RT0	dpftoken.h	69;"	d
DPF_RTRF	dpftoken.h	70;"	d
DPF_RUNS	dpftoken.h	71;"	d
DPF_SCHEDLIN	dpftoken.h	88;"	d
DPF_SEED	dpftoken.h	91;"	d
DPF_SELECT	dpftoken.h	75;"	d
DPF_SET_GA	dpftoken.h	103;"	d
DPF_SET_PATTERN	dpftoken.h	141;"	d
DPF_SET_PSW1	dpftoken.h	105;"	d
DPF_SET_SW1	dpftoken.h	104;"	d
DPF_SHOWTORPEN	dpftoken.h	96;"	d
DPF_SIMANNEAL	dpftoken.h	101;"	d
DPF_TEMPL_ENERGY	dpftoken.h	129;"	d
DPF_TERMINATION	dpftoken.h	138;"	d
DPF_TOKENS	dpftoken.h	47;"	d
DPF_TORSDOF	dpftoken.h	126;"	d
DPF_TRAN0	dpftoken.h	57;"	d
DPF_TRJBEG	dpftoken.h	79;"	d
DPF_TRJEND	dpftoken.h	80;"	d
DPF_TRJFRQ	dpftoken.h	78;"	d
DPF_TRJOUT	dpftoken.h	81;"	d
DPF_TRJSEL	dpftoken.h	82;"	d
DPF_TRNRF	dpftoken.h	64;"	d
DPF_TSTEP	dpftoken.h	61;"	d
DPF_UNBOUND	dpftoken.h	136;"	d
DPF_UNBOUND_INTNBP_COEFFS	dpftoken.h	146;"	d
DPF_UNBOUND_MODEL	dpftoken.h	155;"	d
DPF_WARRANTY	dpftoken.h	152;"	d
DPF_WATCH	dpftoken.h	93;"	d
DPrint	constants.h	383;"	d
DS	parameters.h	/^{ NON, DS, D1, AS, A1, A2 };	\/* hbonding character: *\/$/;"	e	enum:hbond_type
D_max	constants.h	535;"	d
DegreesToRadians	constants.h	251;"	d
DesolvMap	autoglobal.h	/^int	    DesolvMap = 0;$/;"	v
DisCon	structs.h	/^} DisCon;$/;"	t	typeref:struct:dist_constraint
DivsToRadians	constants.h	125;"	d
DlgParser	Tests/DlgParser.py	/^class DlgParser:$/;"	c	inherits:
DlgParser.__init__	Tests/DlgParser.py	/^    def __init__(self, dlgFile=None):$/;"	m	class:DlgParser	access:public
DlgParser.getClusterInfo	Tests/DlgParser.py	/^    def getClusterInfo(self, lines):$/;"	m	class:DlgParser	access:public
DlgParser.getClusterRecord	Tests/DlgParser.py	/^    def getClusterRecord(self, cl):$/;"	m	class:DlgParser	access:public
DlgParser.getDlgStates	Tests/DlgParser.py	/^    def getDlgStates(self, lines):$/;"	m	class:DlgParser	access:public
DlgParser.getLigandAtomCount	Tests/DlgParser.py	/^    def getLigandAtomCount(self, lines):$/;"	m	class:DlgParser	access:public
DlgParser.getModelLines	Tests/DlgParser.py	/^    def getModelLines(self, lines):$/;"	m	class:DlgParser	access:public
DlgParser.getNewDpfInfo	Tests/DlgParser.py	/^    def getNewDpfInfo(self, lines):$/;"	m	class:DlgParser	access:public
DlgParser.getNonBondTable	Tests/DlgParser.py	/^    def getNonBondTable(self, lines, echo=False):$/;"	m	class:DlgParser	access:public
DlgParser.getReDict	Tests/DlgParser.py	/^    def getReDict(self):$/;"	m	class:DlgParser	access:public
DlgParser.getSeedInfo	Tests/DlgParser.py	/^    def getSeedInfo(self, lines):$/;"	m	class:DlgParser	access:public
DlgParser.getShortModelLines	Tests/DlgParser.py	/^    def getShortModelLines(self, lines):$/;"	m	class:DlgParser	access:public
DlgParser.makeModel	Tests/DlgParser.py	/^    def makeModel(self, lines):$/;"	m	class:DlgParser	access:public
DlgParser.makeModels	Tests/DlgParser.py	/^    def makeModels(self, modelList):$/;"	m	class:DlgParser	access:public
DlgParser.match	Tests/DlgParser.py	/^    def match(self, allLines, verbose=False):$/;"	m	class:DlgParser	access:public
DlgParser.parse	Tests/DlgParser.py	/^    def parse(self, filename):$/;"	m	class:DlgParser	access:public
DlgParser.processDpfLines	Tests/DlgParser.py	/^    def processDpfLines(self, lines):$/;"	m	class:DlgParser	access:public
DlgParser.processFlexResLinesV4	Tests/DlgParser.py	/^    def processFlexResLinesV4(self, lines):$/;"	m	class:DlgParser	access:public
DlgParser.processLigLines	Tests/DlgParser.py	/^    def processLigLines(self, lines):$/;"	m	class:DlgParser	access:public
DlgParser.processLigLinesV4	Tests/DlgParser.py	/^    def processLigLinesV4(self, lines):$/;"	m	class:DlgParser	access:public
DlgParser.setADVersion	Tests/DlgParser.py	/^    def setADVersion(self,lines):$/;"	m	class:DlgParser	access:public
DlgParser.setOutlev	Tests/DlgParser.py	/^    def setOutlev(self,lines):$/;"	m	class:DlgParser	access:public
DlgParser.setWroteAll	Tests/DlgParser.py	/^    def setWroteAll(self, lines):$/;"	m	class:DlgParser	access:public
Dot_product	constants.h	487;"	d
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
EGREP	Makefile	/^EGREP = grep -E$/;"	m
EINTCAL	eintcal.h	29;"	d
EINTCALPRINT	eintcalPrint.cc	27;"	d	file:
EINTCLAMP	autocomm.h	98;"	d
ENERGYPENALTY	trilinterp.h	30;"	d
ENERGY_CUTOFF	constants.h	137;"	d
EPS	scauchy.cc	58;"	d	file:
EPSIJ_MAX	constants.h	209;"	d
EPSIJ_MIN	constants.h	208;"	d
ERR	gs.h	/^enum M_mode { ERR = -1, BitFlip, CauchyDev, IUniformSub };$/;"	e	enum:M_mode
ETAGS	Makefile	/^ETAGS = etags$/;"	m
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EXTRA_DIST	Makefile	/^EXTRA_DIST = AD4_PARM99.dat AD4_parameters.dat AD4.1_bound.dat AD4.1_extended.dat AD4.1_compact.dat paramdat2h.csh Tests$/;"	m
ElecMap	autoglobal.h	/^int	    ElecMap = 0;$/;"	v
Element	rep.h	/^} Element;$/;"	t	typeref:union:__anon2
Energy	structs.h	/^} Energy;$/;"	t	typeref:struct:energy
EnergyBreakdown	structs.h	/^} EnergyBreakdown;$/;"	t	typeref:struct:energy_breakdown
EnergyTables	structs.h	/^} EnergyTables;$/;"	t	typeref:struct:energy_tables
Eval	eval.h	/^      Eval(void);$/;"	p	class:Eval	access:public	signature:(void)
Eval	eval.h	/^class Eval$/;"	c
Eval	eval.h	/^inline Eval::Eval(void)$/;"	f	class:Eval	signature:(void)
Eval::B_ShowTorE	eval.h	/^      Boole B_calcIntElec, B_isGaussTorCon, B_ShowTorE;$/;"	m	class:Eval	access:private
Eval::B_calcIntElec	eval.h	/^      Boole B_calcIntElec, B_isGaussTorCon, B_ShowTorE;$/;"	m	class:Eval	access:private
Eval::B_compute_intermol_energy	eval.h	/^      Boole B_compute_intermol_energy; \/\/ use for computing unbound state$/;"	m	class:Eval	access:private
Eval::B_have_flexible_residues	eval.h	/^      Boole B_have_flexible_residues;$/;"	m	class:Eval	access:private
Eval::B_include_1_4_interactions	eval.h	/^      Boole         B_include_1_4_interactions; \/\/ gmm 2005-01-8, for scaling 1-4 nonbonds$/;"	m	class:Eval	access:private
Eval::B_isGaussTorCon	eval.h	/^      Boole B_calcIntElec, B_isGaussTorCon, B_ShowTorE;$/;"	m	class:Eval	access:private
Eval::B_isTorConstrained	eval.h	/^      Boole *B_isTorConstrained;$/;"	m	class:Eval	access:private
Eval::B_use_non_bond_cutoff	eval.h	/^      Boole B_use_non_bond_cutoff;  \/\/ set this to FALSE if we are computing unbound extended conformations$/;"	m	class:Eval	access:private
Eval::Eval	eval.h	/^      Eval(void);$/;"	p	class:Eval	access:public	signature:(void)
Eval::Eval	eval.h	/^inline Eval::Eval(void)$/;"	f	class:Eval	signature:(void)
Eval::Nnb	eval.h	/^      int natom, Nnb;$/;"	m	class:Eval	access:private
Eval::US_TorE	eval.h	/^      unsigned short *US_TorE, (*US_torProfile)[NTORDIVS];$/;"	m	class:Eval	access:private
Eval::US_torProfile	eval.h	/^      unsigned short *US_TorE, (*US_torProfile)[NTORDIVS];$/;"	m	class:Eval	access:private
Eval::abs_charge	eval.h	/^      Real *charge, *abs_charge, *qsp_abs_charge;$/;"	m	class:Eval	access:private
Eval::charge	eval.h	/^      Real *charge, *abs_charge, *qsp_abs_charge;$/;"	m	class:Eval	access:private
Eval::compute_intermol_energy	eval.h	/^      void compute_intermol_energy(Boole init_B_compute_intermol_energy); \/\/ for computing unbound state$/;"	p	class:Eval	access:public	signature:(Boole init_B_compute_intermol_energy)
Eval::compute_intermol_energy	eval.h	/^inline void Eval::compute_intermol_energy(Boole init_B_compute_intermol_energy)$/;"	f	class:Eval	signature:(Boole init_B_compute_intermol_energy)
Eval::crd	eval.h	/^      Real (*crd)[SPACE], (*vt)[SPACE], (*crdpdb)[SPACE], (*crdreo)[SPACE];$/;"	m	class:Eval	access:private
Eval::crdpdb	eval.h	/^      Real (*crd)[SPACE], (*vt)[SPACE], (*crdpdb)[SPACE], (*crdreo)[SPACE];$/;"	m	class:Eval	access:private
Eval::crdreo	eval.h	/^      Real (*crd)[SPACE], (*vt)[SPACE], (*crdpdb)[SPACE], (*crdreo)[SPACE];$/;"	m	class:Eval	access:private
Eval::eval	eval.cc	/^double Eval::eval()$/;"	f	class:Eval	signature:()
Eval::eval	eval.cc	/^double Eval::eval(int term)$/;"	f	class:Eval	signature:(int term)
Eval::eval	eval.h	/^      double eval();    \/\/ WEH - a basic change that facilitates the use of Coliny$/;"	p	class:Eval	access:public	signature:()
Eval::eval	eval.h	/^      double eval(int); \/\/ GMM - allows calculation of a particular term of the total energy$/;"	p	class:Eval	access:public	signature:(int)
Eval::eval_elec	eval.h	/^      Real eval_elec[MAX_ATOMS]; \/\/ gmm added 21-Jan-1998, for writePDBQState$/;"	m	class:Eval	access:private
Eval::eval_emap	eval.h	/^      Real eval_emap[MAX_ATOMS]; \/\/ gmm added 21-Jan-1998, for writePDBQState$/;"	m	class:Eval	access:private
Eval::evalpso	eval.cc	/^double Eval::evalpso(State *state)$/;"	f	class:Eval	signature:(State *state)
Eval::evalpso	eval.h	/^      double evalpso(State *state);$/;"	p	class:Eval	access:public	signature:(State *state)
Eval::evals	eval.h	/^      UnsignedFourByteLong evals(void);$/;"	p	class:Eval	access:public	signature:(void)
Eval::evals	eval.h	/^inline UnsignedFourByteLong Eval::evals(void)$/;"	f	class:Eval	signature:(void)
Eval::ignore_inter	eval.h	/^      int ignore_inter[MAX_ATOMS]; \/\/ gmm 2002-05-21, for CA, CB in flexible sidechains$/;"	m	class:Eval	access:private
Eval::info	eval.h	/^      GridMapSetInfo *info;$/;"	m	class:Eval	access:private
Eval::map	eval.h	/^      Real (*map)[MAX_GRID_PTS][MAX_GRID_PTS][MAX_MAPS];$/;"	m	class:Eval	access:private
Eval::mol	eval.h	/^      Molecule mol;$/;"	m	class:Eval	access:private
Eval::natom	eval.h	/^      int natom, Nnb;$/;"	m	class:Eval	access:private
Eval::nonbondlist	eval.h	/^      NonbondParam *nonbondlist;$/;"	m	class:Eval	access:private
Eval::num_evals	eval.h	/^      UnsignedFourByteLong num_evals;$/;"	m	class:Eval	access:private
Eval::operator ()	eval.cc	/^double Eval::operator()(Representation **rep)$/;"	f	class:Eval	signature:(Representation **rep)
Eval::operator ()	eval.cc	/^double Eval::operator()(Representation **rep, int term)$/;"	f	class:Eval	signature:(Representation **rep, int term)
Eval::operator ()	eval.cc	/^double Eval::operator()(double* vec, int len)$/;"	f	class:Eval	signature:(double* vec, int len)
Eval::operator ()	eval.h	/^      double operator()(Representation **);$/;"	p	class:Eval	access:public	signature:(Representation **)
Eval::operator ()	eval.h	/^      double operator()(Representation **, int); \/\/ GMM - allows calculation of a particular term of the total energy$/;"	p	class:Eval	access:public	signature:(Representation **, int)
Eval::operator ()	eval.h	/^      double operator()(double*, int);$/;"	p	class:Eval	access:public	signature:(double*, int)
Eval::ptr_ad_energy_tables	eval.h	/^      EnergyTables *ptr_ad_energy_tables;$/;"	m	class:Eval	access:private
Eval::qsp_abs_charge	eval.h	/^      Real *charge, *abs_charge, *qsp_abs_charge;$/;"	m	class:Eval	access:private
Eval::reset	eval.h	/^      void reset(void);$/;"	p	class:Eval	access:public	signature:(void)
Eval::reset	eval.h	/^inline void Eval::reset(void)$/;"	f	class:Eval	signature:(void)
Eval::scale_1_4	eval.h	/^      Real scale_1_4;                  \/\/ gmm 2005-01-8, for scaling 1-4 nonbonds$/;"	m	class:Eval	access:private
Eval::setup	eval.h	/^      void setup( Real init_crd[MAX_ATOMS][SPACE],$/;"	p	class:Eval	access:public	signature:( Real init_crd[MAX_ATOMS][SPACE], Real init_charge[MAX_ATOMS], Real init_abs_charge[MAX_ATOMS], Real init_qsp_abs_charge[MAX_ATOMS], int init_type[MAX_ATOMS], int init_natom, Real init_map[MAX_GRID_PTS][MAX_GRID_PTS][MAX_GRID_PTS][MAX_MAPS], Real init_elec[MAX_ATOMS], Real init_emap[MAX_ATOMS], NonbondParam *init_nonbondlist, EnergyTables *init_ptr_ad_energy_tables, int init_Nnb, Boole init_B_calcIntElec, Boole init_B_isGaussTorCon, Boole init_B_isTorConstrained[MAX_TORS], Boole init_B_ShowTorE, unsigned short init_US_TorE[MAX_TORS], unsigned short init_US_torProfile[MAX_TORS][NTORDIVS], Real init_vt[MAX_TORS][SPACE], int init_tlist[MAX_TORS][MAX_ATOMS], Real init_crdpdb[MAX_ATOMS][SPACE], Real init_crdreo[MAX_ATOMS][SPACE], State stateInit, Molecule molInit, int init_ignore_inter[MAX_ATOMS], Boole init_B_include_1_4_interactions, Real init_scale_1_4, Real init_unbound_internal_FE, GridMapSetInfo *init_info, Boole init_B_use_non_bond_cutoff, Boole init_B_have_flexible_residues )
Eval::setup	eval.h	/^inline void Eval::setup(Real init_crd[MAX_ATOMS][SPACE],$/;"	f	class:Eval	signature:(Real init_crd[MAX_ATOMS][SPACE], Real init_charge[MAX_ATOMS], Real init_abs_charge[MAX_ATOMS], Real init_qsp_abs_charge[MAX_ATOMS], int init_type[MAX_ATOMS], int init_natom, Real init_map[MAX_GRID_PTS][MAX_GRID_PTS][MAX_GRID_PTS][MAX_MAPS], Real init_elec[MAX_ATOMS], Real init_emap[MAX_ATOMS], NonbondParam *init_nonbondlist, EnergyTables *init_ptr_ad_energy_tables, int init_Nnb, Boole init_B_calcIntElec, Boole init_B_isGaussTorCon, Boole init_B_isTorConstrained[MAX_TORS], Boole init_B_ShowTorE, unsigned short init_US_TorE[MAX_TORS], unsigned short init_US_torProfile[MAX_TORS][NTORDIVS], Real init_vt[MAX_TORS][SPACE], int init_tlist[MAX_TORS][MAX_ATOMS], Real init_crdpdb[MAX_ATOMS][SPACE], Real init_crdreo[MAX_ATOMS][SPACE], State stateInit, Molecule molInit, int init_ignore_inter[MAX_ATOMS], Boole init_B_include_1_4_interactions, Real init_scale_1_4, Real init_unbound_internal_FE, GridMapSetInfo *init_info, Boole init_B_use_non_bond_cutoff, Boole init_B_have_flexible_residues )
Eval::stateNow	eval.h	/^      State stateNow;$/;"	m	class:Eval	access:private
Eval::tlist	eval.h	/^      int *type, (*tlist)[MAX_ATOMS];$/;"	m	class:Eval	access:private
Eval::type	eval.h	/^      int *type, (*tlist)[MAX_ATOMS];$/;"	m	class:Eval	access:private
Eval::unbound_internal_FE	eval.h	/^      Real  unbound_internal_FE;$/;"	m	class:Eval	access:private
Eval::update_crds	eval.h	/^      void update_crds( Real init_crdreo[MAX_ATOMS][SPACE], $/;"	p	class:Eval	access:public	signature:( Real init_crdreo[MAX_ATOMS][SPACE], Real init_vt[MAX_TORS][SPACE] )
Eval::update_crds	eval.h	/^inline void Eval::update_crds( Real init_crdreo[MAX_ATOMS][SPACE], $/;"	f	class:Eval	signature:( Real init_crdreo[MAX_ATOMS][SPACE], Real init_vt[MAX_TORS][SPACE] )
Eval::vt	eval.h	/^      Real (*crd)[SPACE], (*vt)[SPACE], (*crdpdb)[SPACE], (*crdreo)[SPACE];$/;"	m	class:Eval	access:private
Eval::write	eval.cc	/^int Eval::write(FILE *out_file, Representation **rep)$/;"	f	class:Eval	signature:(FILE *out_file, Representation **rep)
Eval::write	eval.h	/^      int write(FILE *out_file, Representation **rep);$/;"	p	class:Eval	access:public	signature:(FILE *out_file, Representation **rep)
EvalMode	support.h	/^enum EvalMode { Reset, Always_Eval, Normal_Eval, Always_Eval_Nonbond, Always_Eval_Elec };$/;"	g
Ever	gs.h	/^enum Worst_Mode { AverageOfN, OfN, Ever };$/;"	e	enum:Worst_Mode
Extended	constants.h	/^enum Unbound_Model { Unbound_Default=0, Unbound_Same_As_Bound=1, Extended=2, Compact=3, User=4 };$/;"	e	enum:Unbound_Model
FALSE	autocomm.h	61;"	d
FDFMT	typedefs.h	58;"	d
FDFMT	typedefs.h	61;"	d
FDFMT2	typedefs.h	63;"	d
FDFMT3	typedefs.h	64;"	d
FE	structs.h	/^  double FE;			\/* estimated Free Energy of binding *\/$/;"	m	struct:energy	access:public
FN_gdfld	grid.h	/^    char            FN_gdfld[PATH_MAX]; \/\/ filename of the field file$/;"	m	struct:grid_map_set_info	access:public
FN_gpf	grid.h	/^    char            FN_gpf[PATH_MAX]; \/\/ filename of the AutoGrid parameter file$/;"	m	struct:grid_map_set_info	access:public
FN_receptor	grid.h	/^    char            FN_receptor[PATH_MAX]; \/\/ filename of the receptor used to calculate the grids$/;"	m	struct:grid_map_set_info	access:public
FORMAT_PDB2_ATOM	constants.h	420;"	d
FORMAT_PDBQT_ATOM_RANKRUN_STR	constants.h	459;"	d
FORMAT_PDBQT_ATOM_RESNUM	constants.h	458;"	d
FORMAT_PDBQT_ATOM_RESSTR	constants.h	457;"	d
FORMAT_PDBQT_ATOM_RUN_NUM	constants.h	460;"	d
FORMAT_PDBQ_ATOM_RANKRUN_STR	bestpdb.cc	109;"	d	file:
FORMAT_PDBQ_ATOM_RESNUM	writePDBQT.cc	376;"	d	file:
FORMAT_PDBQ_ATOM_RESSTR	writePDBQT.cc	355;"	d	file:
FORMAT_PDBQ_ATOM_RUN_NUM	bestpdb.cc	118;"	d	file:
Float4	typedefs.h	/^} Float4;$/;"	t	typeref:union:__anon5
FourByteLong	structs.h	/^typedef int FourByteLong;$/;"	t
FourByteLong	structs.h	/^typedef long FourByteLong;$/;"	t
FourByteLong	test_times.cc	/^    typedef int  FourByteLong;$/;"	t	file:
FourByteLong	test_times.cc	/^    typedef long FourByteLong;$/;"	t	file:
FourByteLong	typedefs.h	/^    typedef int  FourByteLong;$/;"	t
FourByteLong	typedefs.h	/^    typedef long FourByteLong;$/;"	t
GA_BOLTZMAN_SELECTION	dpftoken.h	161;"	d
GA_CROSSOVER_MODE	dpftoken.h	139;"	d
GA_Cauchy_alpha	dpftoken.h	115;"	d
GA_Cauchy_beta	dpftoken.h	116;"	d
GA_LINEAR_RANKING_SELECTION	dpftoken.h	177;"	d
GA_PROPORTIONAL_SELECTION	dpftoken.h	159;"	d
GA_TOURNAMENT_SELECTION	dpftoken.h	160;"	d
GA_crossover_rate	dpftoken.h	114;"	d
GA_elitism	dpftoken.h	112;"	d
GA_high	dpftoken.h	111;"	d
GA_low	dpftoken.h	110;"	d
GA_mutation_rate	dpftoken.h	113;"	d
GA_num_evals	dpftoken.h	108;"	d
GA_num_generations	dpftoken.h	107;"	d
GA_pop_size	dpftoken.h	106;"	d
GA_window_size	dpftoken.h	109;"	d
GETBONDS	nonbonds.h	39;"	d
GETINITIALSTATE	getInitialState.h	28;"	d
GETPDBCRDS	getpdbcrds.h	28;"	d
GETRMS	getrms.h	28;"	d
GET_ATOM_TYPE	get_atom_type.h	28;"	d
GPF	autoglobal.h	/^FILE    *GPF;$/;"	v
GRID_MACROS	grid.h	28;"	d
GZIP_ENV	Makefile	/^GZIP_ENV = --best$/;"	m
Genetic_Algorithm	gs.cc	/^Genetic_Algorithm::Genetic_Algorithm( EvalMode init_e_mode, $/;"	f	class:Genetic_Algorithm	signature:( EvalMode init_e_mode, Selection_Mode init_s_mode, Xover_Mode init_c_mode, Worst_Mode init_w_mode, int init_elitism, Real init_c_rate, Real init_m_rate, int init_window_size, unsigned int init_max_generations, unsigned int outputEveryNgens)
Genetic_Algorithm	gs.h	/^      Genetic_Algorithm(EvalMode, Selection_Mode, Xover_Mode, Worst_Mode, int, Real, Real, int, unsigned int, unsigned int); \/\/ after 2000.11.1$/;"	p	class:Genetic_Algorithm	access:public	signature:(EvalMode, Selection_Mode, Xover_Mode, Worst_Mode, int, Real, Real, int, unsigned int, unsigned int)
Genetic_Algorithm	gs.h	/^      Genetic_Algorithm(void);$/;"	p	class:Genetic_Algorithm	access:public	signature:(void)
Genetic_Algorithm	gs.h	/^class Genetic_Algorithm : public Global_Search$/;"	c	inherits:Global_Search
Genetic_Algorithm	gs.h	/^inline Genetic_Algorithm::Genetic_Algorithm(void)$/;"	f	class:Genetic_Algorithm	signature:(void)
Genetic_Algorithm::Genetic_Algorithm	gs.cc	/^Genetic_Algorithm::Genetic_Algorithm( EvalMode init_e_mode, $/;"	f	class:Genetic_Algorithm	signature:( EvalMode init_e_mode, Selection_Mode init_s_mode, Xover_Mode init_c_mode, Worst_Mode init_w_mode, int init_elitism, Real init_c_rate, Real init_m_rate, int init_window_size, unsigned int init_max_generations, unsigned int outputEveryNgens)
Genetic_Algorithm::Genetic_Algorithm	gs.h	/^      Genetic_Algorithm(EvalMode, Selection_Mode, Xover_Mode, Worst_Mode, int, Real, Real, int, unsigned int, unsigned int); \/\/ after 2000.11.1$/;"	p	class:Genetic_Algorithm	access:public	signature:(EvalMode, Selection_Mode, Xover_Mode, Worst_Mode, int, Real, Real, int, unsigned int, unsigned int)
Genetic_Algorithm::Genetic_Algorithm	gs.h	/^      Genetic_Algorithm(void);$/;"	p	class:Genetic_Algorithm	access:public	signature:(void)
Genetic_Algorithm::Genetic_Algorithm	gs.h	/^inline Genetic_Algorithm::Genetic_Algorithm(void)$/;"	f	class:Genetic_Algorithm	signature:(void)
Genetic_Algorithm::alloc	gs.h	/^ 	  Real *alloc;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::alpha	gs.h	/^      Real alpha;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::avg	gs.h	/^      double worst, avg;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::beta	gs.h	/^	  Real beta;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::c_mode	gs.h	/^      Xover_Mode c_mode;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::c_rate	gs.h	/^	  Real c_rate;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::check_table	gs.cc	/^int Genetic_Algorithm::check_table(Real prob)$/;"	f	class:Genetic_Algorithm	signature:(Real prob)
Genetic_Algorithm::check_table	gs.h	/^      int check_table(Real);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Real)
Genetic_Algorithm::converged	gs.h	/^      unsigned int converged; \/\/ gmm 7-jan-98$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::crossover	gs.cc	/^void Genetic_Algorithm::crossover(Population &original_population)$/;"	f	class:Genetic_Algorithm	signature:(Population &original_population)
Genetic_Algorithm::crossover	gs.h	/^      void crossover(Population &);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Population &)
Genetic_Algorithm::crossover_2pt	gs.cc	/^void Genetic_Algorithm::crossover_2pt(Genotype &father, Genotype &mother, unsigned int pt1, unsigned int pt2)$/;"	f	class:Genetic_Algorithm	signature:(Genotype &father, Genotype &mother, unsigned int pt1, unsigned int pt2)
Genetic_Algorithm::crossover_2pt	gs.h	/^      void crossover_2pt(Genotype &, Genotype &, unsigned int, unsigned int);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Genotype &, Genotype &, unsigned int, unsigned int)
Genetic_Algorithm::crossover_arithmetic	gs.cc	/^void Genetic_Algorithm::crossover_arithmetic(Genotype &A, Genotype &B, Real alpha)$/;"	f	class:Genetic_Algorithm	signature:(Genotype &A, Genotype &B, Real alpha)
Genetic_Algorithm::crossover_arithmetic	gs.h	/^      void crossover_arithmetic(Genotype &, Genotype &, Real);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Genotype &, Genotype &, Real)
Genetic_Algorithm::crossover_uniform	gs.cc	/^void Genetic_Algorithm::crossover_uniform(Genotype &father, Genotype &mother, unsigned int num_genes)$/;"	f	class:Genetic_Algorithm	signature:(Genotype &father, Genotype &mother, unsigned int num_genes)
Genetic_Algorithm::crossover_uniform	gs.h	/^      void crossover_uniform(Genotype &, Genotype &, unsigned int);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Genotype &, Genotype &, unsigned int)
Genetic_Algorithm::e_mode	gs.h	/^      EvalMode e_mode;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::elitism	gs.h	/^      unsigned int elitism;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::generations	gs.h	/^      unsigned int generations; $/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::high	gs.h	/^      int low, high; \/\/ should these be int or Real?$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::initialize	gs.cc	/^void Genetic_Algorithm::initialize(unsigned int pop_size, unsigned int num_poss_mutations)$/;"	f	class:Genetic_Algorithm	signature:(unsigned int pop_size, unsigned int num_poss_mutations)
Genetic_Algorithm::initialize	gs.h	/^      void initialize(unsigned int, unsigned int);$/;"	p	class:Genetic_Algorithm	access:public	signature:(unsigned int, unsigned int)
Genetic_Algorithm::linear_ranking_selection_probability_ratio	gs.h	/^      Real linear_ranking_selection_probability_ratio;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::low	gs.h	/^      int low, high; \/\/ should these be int or Real?$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::m_rate	gs.h	/^	  Real m_rate;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::m_table_size	gs.h	/^      unsigned int m_table_size;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::m_type	gs.cc	/^M_mode Genetic_Algorithm::m_type(RepType type)$/;"	f	class:Genetic_Algorithm	signature:(RepType type)
Genetic_Algorithm::m_type	gs.h	/^      M_mode m_type(RepType);$/;"	p	class:Genetic_Algorithm	access:private	signature:(RepType)
Genetic_Algorithm::make_table	gs.cc	/^void Genetic_Algorithm::make_table(int size, Real prob)$/;"	f	class:Genetic_Algorithm	signature:(int size, Real prob)
Genetic_Algorithm::make_table	gs.h	/^      void make_table(int, Real);$/;"	p	class:Genetic_Algorithm	access:private	signature:(int, Real)
Genetic_Algorithm::max_generations	gs.h	/^	  unsigned int max_generations;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::mutate	gs.cc	/^void Genetic_Algorithm::mutate(Genotype &mutant, int gene_number)$/;"	f	class:Genetic_Algorithm	signature:(Genotype &mutant, int gene_number)
Genetic_Algorithm::mutate	gs.h	/^      void mutate(Genotype &, int);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Genotype &, int)
Genetic_Algorithm::mutation	gs.cc	/^void Genetic_Algorithm::mutation(Population &pure)$/;"	f	class:Genetic_Algorithm	signature:(Population &pure)
Genetic_Algorithm::mutation	gs.h	/^      void mutation(Population &);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Population &)
Genetic_Algorithm::mutation_table	gs.h	/^      Real *mutation_table;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::mutation_values	gs.h	/^      void mutation_values(int, int, Real, Real,  Real, Real, Real );$/;"	p	class:Genetic_Algorithm	access:public	signature:(int, int, Real, Real, Real, Real, Real )
Genetic_Algorithm::mutation_values	gs.h	/^inline void Genetic_Algorithm::mutation_values(int init_low, int init_high, $/;"	f	class:Genetic_Algorithm	signature:(int init_low, int init_high, Real init_alpha, Real init_beta, Real init_tranStep, Real init_quatStep, Real init_torStep )
Genetic_Algorithm::num_generations	gs.h	/^      unsigned int num_generations(void);$/;"	p	class:Genetic_Algorithm	access:public	signature:(void)
Genetic_Algorithm::num_generations	gs.h	/^inline unsigned int Genetic_Algorithm::num_generations(void)$/;"	f	class:Genetic_Algorithm	signature:(void)
Genetic_Algorithm::ordering	gs.h	/^      unsigned int *ordering;	  $/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::outputEveryNgens	gs.h	/^      unsigned int outputEveryNgens; \/\/ gmm 2000.11.1,2003.08.18$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::quatStep	gs.h	/^      Real tranStep, quatStep, torsStep;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::reset	gs.h	/^      void reset(unsigned int);$/;"	p	class:Genetic_Algorithm	access:public	signature:(unsigned int)
Genetic_Algorithm::reset	gs.h	/^      void reset(void);$/;"	p	class:Genetic_Algorithm	access:public	signature:(void)
Genetic_Algorithm::reset	gs.h	/^inline void Genetic_Algorithm::reset(unsigned int extOutputEveryNgens) \/\/ gmm 2000.11.1$/;"	f	class:Genetic_Algorithm	signature:(unsigned int extOutputEveryNgens)
Genetic_Algorithm::reset	gs.h	/^inline void Genetic_Algorithm::reset(void)$/;"	f	class:Genetic_Algorithm	signature:(void)
Genetic_Algorithm::s_mode	gs.h	/^      Selection_Mode s_mode;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::search	gs.cc	/^int Genetic_Algorithm::search(Population &solutions)$/;"	f	class:Genetic_Algorithm	signature:(Population &solutions)
Genetic_Algorithm::search	gs.h	/^      int search(Population &);$/;"	p	class:Genetic_Algorithm	access:public	signature:(Population &)
Genetic_Algorithm::selection	gs.cc	/^Individual *Genetic_Algorithm::selection(Population &solutions)$/;"	f	class:Genetic_Algorithm	signature:(Population &solutions)
Genetic_Algorithm::selection	gs.h	/^      Individual *selection(Population &);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Population &)
Genetic_Algorithm::selection_linear_ranking	gs.cc	/^void Genetic_Algorithm::selection_linear_ranking(Population &original_population, Individual *new_pop)$/;"	f	class:Genetic_Algorithm	signature:(Population &original_population, Individual *new_pop)
Genetic_Algorithm::selection_linear_ranking	gs.h	/^      void selection_linear_ranking(Population &, Individual *);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Population &, Individual *)
Genetic_Algorithm::selection_proportional	gs.cc	/^void Genetic_Algorithm::selection_proportional(Population &original_population, Individual *new_pop)$/;"	f	class:Genetic_Algorithm	signature:(Population &original_population, Individual *new_pop)
Genetic_Algorithm::selection_proportional	gs.h	/^      void selection_proportional(Population &, Individual *);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Population &, Individual *)
Genetic_Algorithm::selection_tournament	gs.cc	/^void Genetic_Algorithm::selection_tournament(Population &original_population, Individual *new_pop)$/;"	f	class:Genetic_Algorithm	signature:(Population &original_population, Individual *new_pop)
Genetic_Algorithm::selection_tournament	gs.h	/^      void selection_tournament(Population &, Individual *);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Population &, Individual *)
Genetic_Algorithm::set_linear_ranking_selection_probability_ratio	gs.cc	/^int Genetic_Algorithm::set_linear_ranking_selection_probability_ratio(Real r)$/;"	f	class:Genetic_Algorithm	signature:(Real r)
Genetic_Algorithm::set_linear_ranking_selection_probability_ratio	gs.h	/^      int set_linear_ranking_selection_probability_ratio(Real);$/;"	p	class:Genetic_Algorithm	access:public	signature:(Real)
Genetic_Algorithm::set_worst	gs.cc	/^void Genetic_Algorithm::set_worst(Population &currentPop)$/;"	f	class:Genetic_Algorithm	signature:(Population &currentPop)
Genetic_Algorithm::set_worst	gs.h	/^      void set_worst(Population &);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Population &)
Genetic_Algorithm::terminate	gs.h	/^      int terminate(void);$/;"	p	class:Genetic_Algorithm	access:public	signature:(void)
Genetic_Algorithm::terminate	gs.h	/^inline int Genetic_Algorithm::terminate(void)$/;"	f	class:Genetic_Algorithm	signature:(void)
Genetic_Algorithm::torsStep	gs.h	/^      Real tranStep, quatStep, torsStep;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::tranStep	gs.h	/^      Real tranStep, quatStep, torsStep;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::w_mode	gs.h	/^      Worst_Mode w_mode;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::window_size	gs.h	/^      unsigned int window_size;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::worst	gs.h	/^      double worst, avg;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::worst_this_generation	gs.cc	/^double Genetic_Algorithm::worst_this_generation(Population &pop)$/;"	f	class:Genetic_Algorithm	signature:(Population &pop)
Genetic_Algorithm::worst_this_generation	gs.h	/^      double worst_this_generation(Population &);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Population &)
Genetic_Algorithm::worst_window	gs.h	/^      double *worst_window;$/;"	m	class:Genetic_Algorithm	access:private
Genetic_Algorithm::~Genetic_Algorithm	gs.h	/^      ~Genetic_Algorithm(void);$/;"	p	class:Genetic_Algorithm	access:public	signature:(void)
Genetic_Algorithm::~Genetic_Algorithm	gs.h	/^inline Genetic_Algorithm::~Genetic_Algorithm(void)$/;"	f	class:Genetic_Algorithm	signature:(void)
Genotype	support.cc	/^Genotype::Genotype(Genotype &original)$/;"	f	class:Genotype	signature:(Genotype &original)
Genotype	support.cc	/^Genotype::Genotype(Genotype const &original)$/;"	f	class:Genotype	signature:(Genotype const &original)
Genotype	support.cc	/^Genotype::Genotype(unsigned int init_number_of_vectors, Representation **$/;"	f	class:Genotype	signature:(unsigned int init_number_of_vectors, Representation ** init_rep_vector)
Genotype	support.h	/^      Genotype(Genotype &); \/* copy constructor *\/$/;"	p	class:Genotype	access:public	signature:(Genotype &)
Genotype	support.h	/^      Genotype(Genotype const &);$/;"	p	class:Genotype	access:public	signature:(Genotype const &)
Genotype	support.h	/^      Genotype(unsigned int, Representation **); \/* creates a genotype from the$/;"	p	class:Genotype	access:public	signature:(unsigned int, Representation **)
Genotype	support.h	/^      Genotype(void);$/;"	p	class:Genotype	access:public	signature:(void)
Genotype	support.h	/^class Genotype$/;"	c
Genotype	support.h	/^inline Genotype::Genotype(void)$/;"	f	class:Genotype	signature:(void)
Genotype::Genotype	support.cc	/^Genotype::Genotype(Genotype &original)$/;"	f	class:Genotype	signature:(Genotype &original)
Genotype::Genotype	support.cc	/^Genotype::Genotype(Genotype const &original)$/;"	f	class:Genotype	signature:(Genotype const &original)
Genotype::Genotype	support.cc	/^Genotype::Genotype(unsigned int init_number_of_vectors, Representation **$/;"	f	class:Genotype	signature:(unsigned int init_number_of_vectors, Representation ** init_rep_vector)
Genotype::Genotype	support.h	/^      Genotype(Genotype &); \/* copy constructor *\/$/;"	p	class:Genotype	access:public	signature:(Genotype &)
Genotype::Genotype	support.h	/^      Genotype(Genotype const &);$/;"	p	class:Genotype	access:public	signature:(Genotype const &)
Genotype::Genotype	support.h	/^      Genotype(unsigned int, Representation **); \/* creates a genotype from the$/;"	p	class:Genotype	access:public	signature:(unsigned int, Representation **)
Genotype::Genotype	support.h	/^      Genotype(void);$/;"	p	class:Genotype	access:public	signature:(void)
Genotype::Genotype	support.h	/^inline Genotype::Genotype(void)$/;"	f	class:Genotype	signature:(void)
Genotype::gread	support.h	/^      const Element gread(int);$/;"	p	class:Genotype	access:public	signature:(int)
Genotype::gread	support.h	/^inline const Element Genotype::gread(int gene_number)$/;"	f	class:Genotype	signature:(int gene_number)
Genotype::gtype	support.h	/^      RepType gtype(int); \/* returns the type (real,bit,int) for $/;"	p	class:Genotype	access:public	signature:(int)
Genotype::gtype	support.h	/^inline RepType Genotype::gtype(int gene_number)$/;"	f	class:Genotype	signature:(int gene_number)
Genotype::lookup	support.h	/^      Lookup *lookup;		      \/\/ a table that helps in looking up a gene$/;"	m	class:Genotype	access:protected
Genotype::num_genes	support.h	/^      unsigned int num_genes(void); \/* returns number_of_genes (see above) *\/$/;"	p	class:Genotype	access:public	signature:(void)
Genotype::num_genes	support.h	/^inline unsigned int Genotype::num_genes(void)$/;"	f	class:Genotype	signature:(void)
Genotype::num_vectors	support.h	/^      unsigned int num_vectors(void); \/* e.g. "real,bit,bit,int" would = 4 *\/$/;"	p	class:Genotype	access:public	signature:(void)
Genotype::num_vectors	support.h	/^inline unsigned int Genotype::num_vectors(void)$/;"	f	class:Genotype	signature:(void)
Genotype::number_of_genes	support.h	/^      unsigned int number_of_genes;$/;"	m	class:Genotype	access:protected
Genotype::number_of_vectors	support.h	/^      unsigned int number_of_vectors; \/\/ #vectors in rep_vector$/;"	m	class:Genotype	access:protected
Genotype::operator =	support.cc	/^Genotype &Genotype::operator=(const Genotype &original)$/;"	f	class:Genotype	signature:(const Genotype &original)
Genotype::operator =	support.h	/^      Genotype &operator=(const Genotype &);$/;"	p	class:Genotype	access:public	signature:(const Genotype &)
Genotype::readQuat	support.cc	/^Quat Genotype::readQuat()$/;"	f	class:Genotype	signature:()
Genotype::readQuat	support.h	/^      Quat readQuat();$/;"	p	class:Genotype	access:public	signature:()
Genotype::rep_vector	support.h	/^      Representation **rep_vector; \/* the actual representation of the genotype$/;"	m	class:Genotype	access:protected
Genotype::vread	support.h	/^      const Representation *vread(int);$/;"	p	class:Genotype	access:public	signature:(int)
Genotype::vread	support.h	/^inline const Representation *Genotype::vread(int vector_number)$/;"	f	class:Genotype	signature:(int vector_number)
Genotype::write	support.cc	/^void Genotype::write(Element value, int gene_number)$/;"	f	class:Genotype	signature:(Element value, int gene_number)
Genotype::write	support.cc	/^void Genotype::write(FourByteLong value, int gene_number)$/;"	f	class:Genotype	signature:(FourByteLong value, int gene_number)
Genotype::write	support.cc	/^void Genotype::write(const Representation &value, int gene_number)$/;"	f	class:Genotype	signature:(const Representation &value, int gene_number)
Genotype::write	support.cc	/^void Genotype::write(double value, int gene_number)$/;"	f	class:Genotype	signature:(double value, int gene_number)
Genotype::write	support.cc	/^void Genotype::write(unsigned char value, int gene_number)$/;"	f	class:Genotype	signature:(unsigned char value, int gene_number)
Genotype::write	support.h	/^      void write(Element, int);$/;"	p	class:Genotype	access:public	signature:(Element, int)
Genotype::write	support.h	/^      void write(FourByteLong, int);$/;"	p	class:Genotype	access:public	signature:(FourByteLong, int)
Genotype::write	support.h	/^      void write(const Representation &, int);$/;"	p	class:Genotype	access:public	signature:(const Representation &, int)
Genotype::write	support.h	/^      void write(double, int);$/;"	p	class:Genotype	access:public	signature:(double, int)
Genotype::write	support.h	/^      void write(unsigned char, int);$/;"	p	class:Genotype	access:public	signature:(unsigned char, int)
Genotype::writeQuat	support.cc	/^void Genotype::writeQuat( Quat q )$/;"	f	class:Genotype	signature:( Quat q )
Genotype::writeQuat	support.h	/^      void writeQuat( Quat q );$/;"	p	class:Genotype	access:public	signature:( Quat q )
Genotype::~Genotype	support.cc	/^Genotype::~Genotype(void)$/;"	f	class:Genotype	signature:(void)
Genotype::~Genotype	support.h	/^      ~Genotype(void); \/* destructor *\/$/;"	p	class:Genotype	access:public	signature:(void)
Global_Search	gs.h	/^      Global_Search(void);$/;"	p	class:Global_Search	access:public	signature:(void)
Global_Search	gs.h	/^class Global_Search$/;"	c
Global_Search	gs.h	/^inline Global_Search::Global_Search(void)$/;"	f	class:Global_Search	signature:(void)
Global_Search::Global_Search	gs.h	/^      Global_Search(void);$/;"	p	class:Global_Search	access:public	signature:(void)
Global_Search::Global_Search	gs.h	/^inline Global_Search::Global_Search(void)$/;"	f	class:Global_Search	signature:(void)
Global_Search::cg_count	gs.h	/^      unsigned int cg_count; \/\/ statistics - crossover gene-by-gene count$/;"	m	class:Global_Search	access:public
Global_Search::ci_count	gs.h	/^      unsigned int ci_count; \/\/ statistics - crossover indiv-by-indiv count$/;"	m	class:Global_Search	access:public
Global_Search::mg_count	gs.h	/^      unsigned int mg_count; \/\/ statistics - mutation gene-by-gene count$/;"	m	class:Global_Search	access:public
Global_Search::mi_count	gs.h	/^      unsigned int mi_count; \/\/ statistics - mutation indiv-by-indiv count$/;"	m	class:Global_Search	access:public
Global_Search::reset	gs.h	/^      virtual void reset(unsigned int) = 0;$/;"	p	class:Global_Search	access:public	signature:(unsigned int)
Global_Search::reset	gs.h	/^      virtual void reset(void) = 0;$/;"	p	class:Global_Search	access:public	signature:(void)
Global_Search::search	gs.h	/^      virtual int search(Population &) = 0;$/;"	p	class:Global_Search	access:public	signature:(Population &)
Global_Search::terminate	gs.h	/^      virtual int terminate(void) = 0;$/;"	p	class:Global_Search	access:public	signature:(void)
Global_Search::~Global_Search	gs.h	/^      virtual ~Global_Search(void);$/;"	p	class:Global_Search	access:public	signature:(void)
Global_Search::~Global_Search	gs.h	/^inline Global_Search::~Global_Search(void)$/;"	f	class:Global_Search	signature:(void)
GridIndex	grid.h	86;"	d
GridMapSetInfo	grid.h	/^}                   GridMapSetInfo;$/;"	t	typeref:struct:grid_map_set_info
GridMapSetSize	grid.h	66;"	d
Group	structs.h	/^} Group;$/;"	t	typeref:struct:group
H	mdist.h	/^enum {C=0,N=1,O=2,H=3,XX=4,P=5,S=6};  \/\/ see "bond_index" in the "AD4.1_bound.dat" or "AD4_parameters.dat" file.$/;"	e	enum:__anon1
HALF_PI	autocomm.h	66;"	d
HALF_ROTATION	qmultiply.cc	565;"	d	file:
HI_NRG_JUMP_FACTOR	constants.h	139;"	d
HYDROGEN	autocomm.h	117;"	d
Htype	molstruct.h	/^	int   Htype;$/;"	m	struct:molecule	access:public
ICO_X	conformation_sampler.cc	51;"	d	file:
ICO_Y	conformation_sampler.cc	52;"	d	file:
IDmove	structs.h	/^  int IDmove[MAX_ATOMS];	\/* atom serial-IDs of atoms moved by this *\/$/;"	m	struct:torsion	access:public
INITAUTODOCK	initautodock.h	28;"	d
INPUT_STATE	input_state.h	28;"	d
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INTER	constants.h	468;"	d
INTNBTABLE	intnbtable.h	28;"	d
INTRA_LIGAND	constants.h	467;"	d
INTRA_RECEPTOR	constants.h	469;"	d
INT_SQA_DIV	constants.h	151;"	d
INT_SQA_DIV	constants.h	163;"	d
INVESTIGATE	investigate.h	28;"	d
INV_A_DIV	constants.h	149;"	d
INV_A_DIV	constants.h	161;"	d
INV_SQA_DIV	constants.h	152;"	d
INV_SQA_DIV	constants.h	164;"	d
ISNAN	constants.h	346;"	d
ISNAN	constants.h	348;"	d
IUniformSub	gs.h	/^enum M_mode { ERR = -1, BitFlip, CauchyDev, IUniformSub };$/;"	e	enum:M_mode
IndexToDistance	intnbtable.cc	45;"	d	file:
IndexToDistance	intnbtable.cc	49;"	d	file:
Individual	support.h	/^      Individual(Genotype &, Phenotype &);$/;"	p	class:Individual	access:public	signature:(Genotype &, Phenotype &)
Individual	support.h	/^      Individual(Individual &); \/* copy constructor *\/$/;"	p	class:Individual	access:public	signature:(Individual &)
Individual	support.h	/^      Individual(Individual const &);$/;"	p	class:Individual	access:public	signature:(Individual const &)
Individual	support.h	/^      Individual(void);$/;"	p	class:Individual	access:public	signature:(void)
Individual	support.h	/^class Individual$/;"	c
Individual	support.h	/^inline Individual::Individual(Genotype &init_genotyp, Phenotype &init_phenotyp)$/;"	f	class:Individual	signature:(Genotype &init_genotyp, Phenotype &init_phenotyp)
Individual	support.h	/^inline Individual::Individual(Individual &original)$/;"	f	class:Individual	signature:(Individual &original)
Individual	support.h	/^inline Individual::Individual(void)$/;"	f	class:Individual	signature:(void)
Individual::Individual	support.h	/^      Individual(Genotype &, Phenotype &);$/;"	p	class:Individual	access:public	signature:(Genotype &, Phenotype &)
Individual::Individual	support.h	/^      Individual(Individual &); \/* copy constructor *\/$/;"	p	class:Individual	access:public	signature:(Individual &)
Individual::Individual	support.h	/^      Individual(Individual const &);$/;"	p	class:Individual	access:public	signature:(Individual const &)
Individual::Individual	support.h	/^      Individual(void);$/;"	p	class:Individual	access:public	signature:(void)
Individual::Individual	support.h	/^inline Individual::Individual(Genotype &init_genotyp, Phenotype &init_phenotyp)$/;"	f	class:Individual	signature:(Genotype &init_genotyp, Phenotype &init_phenotyp)
Individual::Individual	support.h	/^inline Individual::Individual(Individual &original)$/;"	f	class:Individual	signature:(Individual &original)
Individual::Individual	support.h	/^inline Individual::Individual(void)$/;"	f	class:Individual	signature:(void)
Individual::age	support.h	/^      unsigned long age;	\/* age of this individual; gmm, 1998-07-10 *\/$/;"	m	class:Individual	access:public
Individual::genotyp	support.h	/^      Genotype genotyp;   \/* Genotype  is operated upon by *global search* operators *\/$/;"	m	class:Individual	access:public
Individual::getMol	support.cc	/^void Individual::getMol(Molecule *returnedMol)$/;"	f	class:Individual	signature:(Molecule *returnedMol)
Individual::getMol	support.h	/^      void  getMol(Molecule *); \/* converts phenotype to mol's state and returns this individual's mol data *\/$/;"	p	class:Individual	access:public	signature:(Molecule *)
Individual::incrementAge	support.cc	/^void Individual::incrementAge(void)$/;"	f	class:Individual	signature:(void)
Individual::incrementAge	support.h	/^      void incrementAge(); \/* make individual grow 1 generation older *\/$/;"	p	class:Individual	access:public	signature:()
Individual::inverse_mapping	mapping.cc	/^Individual &Individual::inverse_mapping(void)$/;"	f	class:Individual	signature:(void)
Individual::inverse_mapping	support.h	/^      Individual &inverse_mapping(void); \/\/updates genotype from current phenotype values $/;"	p	class:Individual	access:public	signature:(void)
Individual::mapping	mapping.cc	/^Individual &Individual::mapping(void)$/;"	f	class:Individual	signature:(void)
Individual::mapping	support.h	/^      Individual &mapping(void);         \/\/updates phenotype from current genotype values $/;"	p	class:Individual	access:public	signature:(void)
Individual::mol	support.h	/^      Molecule *mol;		\/* molecule *\/$/;"	m	class:Individual	access:public
Individual::operator =	support.h	/^      Individual &operator=(const Individual &); \/* assignment function for$/;"	p	class:Individual	access:public	signature:(const Individual &)
Individual::operator =	support.h	/^inline Individual &Individual::operator=(const Individual &original)$/;"	f	class:Individual	signature:(const Individual &original)
Individual::phenotyp	support.h	/^      Phenotype phenotyp; \/* Phenotype  "     "      "   " *local search*  operators, eg SW *\/$/;"	m	class:Individual	access:public
Individual::printIndividualsState	support.cc	/^void Individual::printIndividualsState(FILE *filePtr, int ntor, int detail) $/;"	f	class:Individual	signature:(FILE *filePtr, int ntor, int detail)
Individual::printIndividualsState	support.h	/^      void printIndividualsState(FILE *, int, int); \/* print out the state of this individual *\/$/;"	p	class:Individual	access:public	signature:(FILE *, int, int)
Individual::serial	support.h	/^      int serial; \/\/ serial number of this individual$/;"	m	class:Individual	access:public
Individual::state	support.cc	/^State Individual::state(int ntor)$/;"	f	class:Individual	signature:(int ntor)
Individual::state	support.h	/^      State state(int); \/* state variables in AutoDock *\/$/;"	p	class:Individual	access:public	signature:(int)
Individual::value	support.h	/^      double value(EvalMode); \/* evaluation of the individual gives its value *\/$/;"	p	class:Individual	access:public	signature:(EvalMode)
Individual::value	support.h	/^inline double Individual::value(EvalMode mode)$/;"	f	class:Individual	signature:(EvalMode mode)
Individual::~Individual	support.h	/^      ~Individual(void); \/* destructor *\/$/;"	p	class:Individual	access:public	signature:(void)
Individual::~Individual	support.h	/^inline Individual::~Individual(void)$/;"	f	class:Individual	signature:(void)
IntVector	rep.cc	/^IntVector::IntVector(const IntVector &original)$/;"	f	class:IntVector	signature:(const IntVector &original)
IntVector	rep.cc	/^IntVector::IntVector(int num_els, FourByteLong init_low, FourByteLong init_high)$/;"	f	class:IntVector	signature:(int num_els, FourByteLong init_low, FourByteLong init_high)
IntVector	rep.cc	/^IntVector::IntVector(int number_of_els)$/;"	f	class:IntVector	signature:(int number_of_els)
IntVector	rep.h	/^      IntVector(const IntVector &);$/;"	p	class:IntVector	access:public	signature:(const IntVector &)
IntVector	rep.h	/^      IntVector(int);$/;"	p	class:IntVector	access:public	signature:(int)
IntVector	rep.h	/^      IntVector(int, FourByteLong *);$/;"	p	class:IntVector	access:public	signature:(int, FourByteLong *)
IntVector	rep.h	/^      IntVector(int, FourByteLong, FourByteLong);$/;"	p	class:IntVector	access:public	signature:(int, FourByteLong, FourByteLong)
IntVector	rep.h	/^      IntVector(void);$/;"	p	class:IntVector	access:public	signature:(void)
IntVector	rep.h	/^class IntVector : public Representation$/;"	c	inherits:Representation
IntVector	rep.h	/^inline IntVector::IntVector(int num_els, FourByteLong *array)$/;"	f	class:IntVector	signature:(int num_els, FourByteLong *array)
IntVector	rep.h	/^inline IntVector::IntVector(void)$/;"	f	class:IntVector	signature:(void)
IntVector::IntVector	rep.cc	/^IntVector::IntVector(const IntVector &original)$/;"	f	class:IntVector	signature:(const IntVector &original)
IntVector::IntVector	rep.cc	/^IntVector::IntVector(int num_els, FourByteLong init_low, FourByteLong init_high)$/;"	f	class:IntVector	signature:(int num_els, FourByteLong init_low, FourByteLong init_high)
IntVector::IntVector	rep.cc	/^IntVector::IntVector(int number_of_els)$/;"	f	class:IntVector	signature:(int number_of_els)
IntVector::IntVector	rep.h	/^      IntVector(const IntVector &);$/;"	p	class:IntVector	access:public	signature:(const IntVector &)
IntVector::IntVector	rep.h	/^      IntVector(int);$/;"	p	class:IntVector	access:public	signature:(int)
IntVector::IntVector	rep.h	/^      IntVector(int, FourByteLong *);$/;"	p	class:IntVector	access:public	signature:(int, FourByteLong *)
IntVector::IntVector	rep.h	/^      IntVector(int, FourByteLong, FourByteLong);$/;"	p	class:IntVector	access:public	signature:(int, FourByteLong, FourByteLong)
IntVector::IntVector	rep.h	/^      IntVector(void);$/;"	p	class:IntVector	access:public	signature:(void)
IntVector::IntVector	rep.h	/^inline IntVector::IntVector(int num_els, FourByteLong *array)$/;"	f	class:IntVector	signature:(int num_els, FourByteLong *array)
IntVector::IntVector	rep.h	/^inline IntVector::IntVector(void)$/;"	f	class:IntVector	signature:(void)
IntVector::clone	rep.h	/^      Representation *clone(void) const;$/;"	p	class:IntVector	access:protected	signature:(void) const
IntVector::clone	rep.h	/^inline Representation *IntVector::clone(void) const$/;"	f	class:IntVector	signature:(void) const
IntVector::gene	rep.cc	/^const Element IntVector::gene(unsigned int gene_number) const$/;"	f	class:IntVector	signature:(unsigned int gene_number) const
IntVector::gene	rep.h	/^      const Element gene(unsigned int) const;$/;"	p	class:IntVector	access:public	signature:(unsigned int) const
IntVector::high	rep.cc	/^FourByteLong IntVector::high = INT_MAX\/4;$/;"	m	class:IntVector	file:
IntVector::high	rep.h	/^      static FourByteLong low, high;$/;"	m	class:IntVector	access:protected
IntVector::internals	rep.cc	/^const void *IntVector::internals(void) const$/;"	f	class:IntVector	signature:(void) const
IntVector::internals	rep.h	/^      const void *internals(void) const;$/;"	p	class:IntVector	access:protected	signature:(void) const
IntVector::low	rep.cc	/^FourByteLong IntVector::low = -INT_MAX\/4;$/;"	m	class:IntVector	file:
IntVector::low	rep.h	/^      static FourByteLong low, high;$/;"	m	class:IntVector	access:protected
IntVector::operator =	rep.cc	/^Representation &IntVector::operator=(const Representation &original)$/;"	f	class:IntVector	signature:(const Representation &original)
IntVector::operator =	rep.h	/^      Representation &operator=(const Representation &);$/;"	p	class:IntVector	access:public	signature:(const Representation &)
IntVector::vector	rep.h	/^      FourByteLong *vector;$/;"	m	class:IntVector	access:protected
IntVector::write	rep.cc	/^void IntVector::write(FourByteLong value, int gene)$/;"	f	class:IntVector	signature:(FourByteLong value, int gene)
IntVector::write	rep.cc	/^void IntVector::write(const Element value, int gene)$/;"	f	class:IntVector	signature:(const Element value, int gene)
IntVector::write	rep.cc	/^void IntVector::write(double value, int gene)$/;"	f	class:IntVector	signature:(double value, int gene)
IntVector::write	rep.cc	/^void IntVector::write(unsigned char value, int gene)$/;"	f	class:IntVector	signature:(unsigned char value, int gene)
IntVector::write	rep.h	/^      void write(FourByteLong, int);$/;"	p	class:IntVector	access:public	signature:(FourByteLong, int)
IntVector::write	rep.h	/^      void write(const Element, int);$/;"	p	class:IntVector	access:public	signature:(const Element, int)
IntVector::write	rep.h	/^      void write(double, int);$/;"	p	class:IntVector	access:public	signature:(double, int)
IntVector::write	rep.h	/^      void write(unsigned char, int);$/;"	p	class:IntVector	access:public	signature:(unsigned char, int)
IntVector::~IntVector	rep.h	/^      ~IntVector(void);$/;"	p	class:IntVector	access:public	signature:(void)
IntVector::~IntVector	rep.h	/^inline IntVector::~IntVector(void)$/;"	f	class:IntVector	signature:(void)
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LERP	trilinterp.cc	37;"	d	file:
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBRARIES	Makefile	/^LIBRARIES = $(noinst_LIBRARIES)$/;"	m
LIBS	Makefile	/^LIBS = $/;"	m
LINELEN	input_state.cc	36;"	d	file:
LINE_LEN	autocomm.h	83;"	d
LINE_LEN	autocomm.h	85;"	d
LINK	Makefile	/^LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@$/;"	m
LOWER	constants.h	82;"	d
LS_search_freq	dpftoken.h	122;"	d
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
Length	constants.h	495;"	d
LinearRanking	gs.h	/^enum Selection_Mode { Proportional=0, LinearRanking=1, Tournament=2, Boltzmann=3 };$/;"	e	enum:Selection_Mode
Linear_FE_Model	structs.h	/^} Linear_FE_Model;$/;"	t	typeref:struct:linear_FE_model
Local_Search	ls.h	/^      Local_Search(void);$/;"	p	class:Local_Search	access:public	signature:(void)
Local_Search	ls.h	/^class Local_Search$/;"	c
Local_Search	ls.h	/^inline Local_Search::Local_Search(void)$/;"	f	class:Local_Search	signature:(void)
Local_Search::Local_Search	ls.h	/^      Local_Search(void);$/;"	p	class:Local_Search	access:public	signature:(void)
Local_Search::Local_Search	ls.h	/^inline Local_Search::Local_Search(void)$/;"	f	class:Local_Search	signature:(void)
Local_Search::count	ls.h	/^      unsigned int count;\/\/search invocation count, for run statistics$/;"	m	class:Local_Search	access:public
Local_Search::reset	ls.h	/^      virtual void reset(void) = 0;$/;"	p	class:Local_Search	access:public	signature:(void)
Local_Search::search	ls.h	/^      virtual int search(Individual &) = 0;$/;"	p	class:Local_Search	access:public	signature:(Individual &)
Local_Search::terminate	ls.h	/^      virtual int terminate(void) = 0;$/;"	p	class:Local_Search	access:public	signature:(void)
Local_Search::~Local_Search	ls.h	/^      virtual ~Local_Search(void);$/;"	p	class:Local_Search	access:public	signature:(void)
Local_Search::~Local_Search	ls.h	/^inline Local_Search::~Local_Search(void)$/;"	f	class:Local_Search	signature:(void)
LookUpProc	nbe.cc	44;"	d	file:
LookUpProc	nbe.cc	53;"	d	file:
Lookup	support.h	/^} Lookup;$/;"	t	typeref:struct:__anon4
MACROS	constants.h	242;"	d
MAIN	main.h	28;"	d
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/xouyang1\/B-bond\/autodock\/googlecode\/covalentdock\/autodock\/missing --run makeinfo$/;"	m
MAPC2F	readmap.h	29;"	d
MAPFMT	typedefs.h	67;"	d
MAX	ranlib.cc	39;"	d	file:
MAXKEY	atom_parameter_manager.cc	27;"	d	file:
MAX_ANGLE	qmultiply.cc	569;"	d	file:
MAX_ATOMS	constants.h	103;"	d
MAX_ATOMS	constants.h	98;"	d
MAX_ATOM_TYPES	autocomm.h	102;"	d
MAX_CHARS	autocomm.h	76;"	d
MAX_GRID_PTS	autocomm.h	90;"	d
MAX_GRID_PTS	autocomm.h	92;"	d
MAX_GRID_PTS	autocomm.h	94;"	d
MAX_LEN_AUTOGRID_TYPE	parameters.h	34;"	d
MAX_LINES	autocomm.h	77;"	d
MAX_MAPS	autocomm.h	103;"	d
MAX_MAPS_PAD	autocomm.h	100;"	d
MAX_NBDATA	constants.h	194;"	d
MAX_NONBONDS	constants.h	100;"	d
MAX_NONBONDS	constants.h	105;"	d
MAX_NUM_AUTOGRID_TYPES	parameters.h	33;"	d
MAX_RECORDS	constants.h	104;"	d
MAX_RECORDS	constants.h	99;"	d
MAX_RUNS	constants.h	102;"	d
MAX_RUNS	constants.h	97;"	d
MAX_TORS	constants.h	109;"	d
MAX_TORS_IN_ROTAMER	constants.h	110;"	d
MAX_TOR_CON	constants.h	111;"	d
MAX_TREES	constants.h	108;"	d
METAL	autocomm.h	119;"	d
MIN	ranlib.cc	38;"	d	file:
MIN_ANGLE	qmultiply.cc	568;"	d	file:
MKNEWSTATE	mkNewState.h	28;"	d
MKRANDOMSTATE	mkRandomState.h	28;"	d
MKTORTREE	mkTorTree.h	28;"	d
MMM	hybrids.h	116;"	d
M_mode	gs.h	/^enum M_mode { ERR = -1, BitFlip, CauchyDev, IUniformSub };$/;"	g
Magnitude	constants.h	497;"	d
MapType	typedefs.h	/^typedef float MapType; \/\/the grid map type can be changed independent of other 'Real's$/;"	t
ModDeg	constants.h	256;"	d
ModRad	constants.h	258;"	d
Molecule	molstruct.h	/^} Molecule;$/;"	t	typeref:struct:molecule
Molecule	structs.h	/^} Molecule;$/;"	t	typeref:struct:molecule
N	mdist.h	/^enum {C=0,N=1,O=2,H=3,XX=4,P=5,S=6};  \/\/ see "bond_index" in the "AD4.1_bound.dat" or "AD4_parameters.dat" file.$/;"	e	enum:__anon1
NBC	constants.h	153;"	d
NBC	constants.h	165;"	d
NBC2	constants.h	154;"	d
NBC2	constants.h	166;"	d
NBE	nbe.h	28;"	d
NBTYPE	constants.h	193;"	d
NCOLS	constants.h	222;"	d
NDIEL	constants.h	170;"	d
NDIEL_1	constants.h	173;"	d
NEINT	constants.h	146;"	d
NEINT	constants.h	158;"	d
NEINT_1	constants.h	147;"	d
NEINT_1	constants.h	159;"	d
NITROGEN	autocomm.h	114;"	d
NLIG	constants.h	85;"	d
NLIGTOR	constants.h	86;"	d
NMOL	constants.h	91;"	d
NON	parameters.h	/^{ NON, DS, D1, AS, A1, A2 };	\/* hbonding character: *\/$/;"	e	enum:hbond_type
NONBONDS	nonbonds.h	28;"	d
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NQTN	constants.h	80;"	d
NRES	constants.h	88;"	d
NRESTOR	constants.h	89;"	d
NROWS	constants.h	226;"	d
NTORDIVS	constants.h	115;"	d
NTORDIVS_2	constants.h	116;"	d
NTRN	constants.h	79;"	d
NULL_ELEC	trilinterp.h	38;"	d
NULL_ELEC_TOTAL	trilinterp.h	40;"	d
NULL_EVDW	trilinterp.h	37;"	d
NULL_EVDW_TOTAL	trilinterp.h	39;"	d
NULL_IGNORE_INTERMOL	trilinterp.h	41;"	d
NUMRMSBINS	investigate.h	40;"	d
NUM_ATM_MOVED	constants.h	189;"	d
NUM_BINS	conformation_sampler.h	39;"	d
NUM_BINS	minmeanmax.cc	41;"	d	file:
NUM_ENUM_ATOMTYPES	mdist.h	38;"	d
NUM_NON_VDW_MAPS	autocomm.h	101;"	d
NX	structs.h	93;"	d
NY	structs.h	94;"	d
NZ	structs.h	95;"	d
NewGridMapSet	grid.h	68;"	d
Nnb	eval.h	/^      int natom, Nnb;$/;"	m	class:Eval	access:private
Nnb	molstruct.h	/^	int   Nnb;$/;"	m	struct:molecule	access:public
Nnb_array	autoglobal.h	/^int     Nnb_array[3] = {0};    \/\/ number of nonbonds in the ligand, intermolecular and receptor groups$/;"	v
Nnbonds	molstruct.h	/^	int   Nnbonds[ MAX_ATOMS ];$/;"	m	struct:molecule	access:public
NonbondParam	structs.h	/^} NonbondParam;$/;"	t	typeref:struct:nonbond_param
Normal_Eval	support.h	/^enum EvalMode { Reset, Always_Eval, Normal_Eval, Always_Eval_Nonbond, Always_Eval_Elec };$/;"	e	enum:EvalMode
O	mdist.h	/^enum {C=0,N=1,O=2,H=3,XX=4,P=5,S=6};  \/\/ see "bond_index" in the "AD4.1_bound.dat" or "AD4_parameters.dat" file.$/;"	e	enum:__anon1
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
ONE_MINUS_EPSILON	autocomm.h	196;"	d
ONE_PLUS_EPSILON	autocomm.h	197;"	d
ONE_RAD_IN_DIVS	constants.h	117;"	d
ONE_ROTATION	qmultiply.cc	564;"	d	file:
OPENFILE	openfile.h	28;"	d
OUTLEV0_GENS	constants.h	230;"	d
OUTLEV1_GENS	constants.h	231;"	d
OUTLEV2_GENS	constants.h	232;"	d
OUTNUMCLUST	constants.h	214;"	d
OUTPUT_STATE	output_state.h	29;"	d
OUTPUT_XML_VERSION	version.h	27;"	d
OXYGEN	autocomm.h	115;"	d
OfN	gs.h	/^enum Worst_Mode { AverageOfN, OfN, Ever };$/;"	e	enum:Worst_Mode
OnePt	gs.h	/^enum Xover_Mode { TwoPt=0, OnePt=1, Uniform=2, Arithmetic=3, Branch=4 };$/;"	e	enum:Xover_Mode
P	mdist.h	/^enum {C=0,N=1,O=2,H=3,XX=4,P=5,S=6};  \/\/ see "bond_index" in the "AD4.1_bound.dat" or "AD4_parameters.dat" file.$/;"	e	enum:__anon1
PACKAGE	Makefile	/^PACKAGE = covdock$/;"	m
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = xouyang1@ntu.edu.sg$/;"	m
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = covdock$/;"	m
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = covdock 0.2$/;"	m
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = covdock$/;"	m
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 0.2$/;"	m
PARSE_DPF_LINE	parse_dpf_line.h	28;"	d
PARSE_PAR_LINE	parse_param_line.h	28;"	d
PARSE_PDBQT_LINE	parse_PDBQT_line.h	28;"	d
PARSE_TRJ_LINE	parse_trj_line.h	28;"	d
PAR_	partokens.h	47;"	d
PAR_ATOM_PAR	partokens.h	54;"	d
PAR_COMMENT	partokens.h	55;"	d
PAR_DESOLV	partokens.h	52;"	d
PAR_ESTAT	partokens.h	51;"	d
PAR_HBOND	partokens.h	50;"	d
PAR_NULL	partokens.h	48;"	d
PAR_TOKENS	partokens.h	45;"	d
PAR_TORS	partokens.h	53;"	d
PAR_UNBOUND	partokens.h	56;"	d
PAR_VDW	partokens.h	49;"	d
PATH_MAX	autocomm.h	79;"	d
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PDBQ_ATOM	PDBQT_tokens.h	51;"	d
PDBQ_BEGIN_RES	PDBQT_tokens.h	59;"	d
PDBQ_BRANCH	PDBQT_tokens.h	54;"	d
PDBQ_CONECT	PDBQT_tokens.h	62;"	d
PDBQ_CONSTRAINT	PDBQT_tokens.h	58;"	d
PDBQ_ENDBRANCH	PDBQT_tokens.h	55;"	d
PDBQ_ENDROOT	PDBQT_tokens.h	50;"	d
PDBQ_ENDTORS	PDBQT_tokens.h	56;"	d
PDBQ_END_RES	PDBQT_tokens.h	60;"	d
PDBQ_HETATM	PDBQT_tokens.h	52;"	d
PDBQ_NULL	PDBQT_tokens.h	48;"	d
PDBQ_REMARK	PDBQT_tokens.h	57;"	d
PDBQ_ROOT	PDBQT_tokens.h	49;"	d
PDBQ_TORS	PDBQT_tokens.h	53;"	d
PDBQ_TORSDOF	PDBQT_tokens.h	61;"	d
PDBQ_UNRECOGNIZED	PDBQT_tokens.h	47;"	d
PE	atom_parameter_manager.cc	/^typedef ParameterEntry PE;$/;"	t	file:
PERMS	output_state.cc	43;"	d	file:
PI	autocomm.h	64;"	d
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
PRCLUSTERHIST	prClusterHist.h	28;"	d
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PRINITIALSTATE	prInitialState.h	28;"	d
PRINT14	nonbonds.h	55;"	d
PRINTBONDS	nonbonds.h	49;"	d
PRINTDATE	printdate.h	28;"	d
PRINTENERGIES	printEnergies.h	28;"	d
PRINTHMS	printhms.h	28;"	d
PRINT_2X	print_2x.h	28;"	d
PRINT_ATOMIC_ENERGIES	print_atomic_energies.h	28;"	d
PRINT_AVSFLD	print_avsfld.h	28;"	d
PRINT_NONBONDS	weedbonds.h	48;"	d
PRINT_REM	print_rem.h	28;"	d
PROGRAMS	Makefile	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
PRTORCONLIST	prTorConList.h	28;"	d
PSO_c1	dpftoken.h	165;"	d
PSO_c2	dpftoken.h	166;"	d
PSO_k	dpftoken.h	171;"	d
PSO_mc	dpftoken.h	167;"	d
PSO_n_exec	dpftoken.h	170;"	d
PSO_swarm_moves	dpftoken.h	168;"	d
PSO_swarm_size_factor	dpftoken.h	169;"	d
PSO_w	dpftoken.h	162;"	d
PSO_w_end	dpftoken.h	164;"	d
PSO_w_start	dpftoken.h	163;"	d
PSW_ROT_SCALE	dpftoken.h	157;"	d
PSW_TORS_SCALE	dpftoken.h	158;"	d
PSW_TRANS_SCALE	dpftoken.h	156;"	d
PairID	structs.h	/^} PairID;$/;"	t	typeref:struct:pair_id
ParameterEntry	parameters.h	/^} ParameterEntry;$/;"	t	typeref:struct:parameter_entry
Pattern_Search	ls.cc	/^Pattern_Search::Pattern_Search(unsigned int init_size, unsigned int init_max_success, Real init_step_size, Real init_step_threshold, Real init_expansion, Real init_contraction, Real init_search_frequency)$/;"	f	class:Pattern_Search	signature:(unsigned int init_size, unsigned int init_max_success, Real init_step_size, Real init_step_threshold, Real init_expansion, Real init_contraction, Real init_search_frequency)
Pattern_Search	ls.cc	/^Pattern_Search::Pattern_Search(void)$/;"	f	class:Pattern_Search	signature:(void)
Pattern_Search	ls.h	/^      Pattern_Search(unsigned int, unsigned int, Real, Real, Real, Real, Real);$/;"	p	class:Pattern_Search	access:public	signature:(unsigned int, unsigned int, Real, Real, Real, Real, Real)
Pattern_Search	ls.h	/^      Pattern_Search(void);$/;"	p	class:Pattern_Search	access:public	signature:(void)
Pattern_Search	ls.h	/^class Pattern_Search : public Local_Search$/;"	c	inherits:Local_Search
Pattern_Search::Pattern_Search	ls.cc	/^Pattern_Search::Pattern_Search(unsigned int init_size, unsigned int init_max_success, Real init_step_size, Real init_step_threshold, Real init_expansion, Real init_contraction, Real init_search_frequency)$/;"	f	class:Pattern_Search	signature:(unsigned int init_size, unsigned int init_max_success, Real init_step_size, Real init_step_threshold, Real init_expansion, Real init_contraction, Real init_search_frequency)
Pattern_Search::Pattern_Search	ls.cc	/^Pattern_Search::Pattern_Search(void)$/;"	f	class:Pattern_Search	signature:(void)
Pattern_Search::Pattern_Search	ls.h	/^      Pattern_Search(unsigned int, unsigned int, Real, Real, Real, Real, Real);$/;"	p	class:Pattern_Search	access:public	signature:(unsigned int, unsigned int, Real, Real, Real, Real, Real)
Pattern_Search::Pattern_Search	ls.h	/^      Pattern_Search(void);$/;"	p	class:Pattern_Search	access:public	signature:(void)
Pattern_Search::contraction	ls.h	/^      Real step_threshold, expansion, contraction;$/;"	m	class:Pattern_Search	access:protected
Pattern_Search::current_step_size	ls.h	/^      Real step_size, current_step_size;$/;"	m	class:Pattern_Search	access:protected
Pattern_Search::expansion	ls.h	/^      Real step_threshold, expansion, contraction;$/;"	m	class:Pattern_Search	access:protected
Pattern_Search::exploratory_move	ls.cc	/^Phenotype Pattern_Search::exploratory_move(const Phenotype& base) {$/;"	f	class:Pattern_Search	signature:(const Phenotype& base)
Pattern_Search::exploratory_move	ls.h	/^			Phenotype exploratory_move(const Phenotype&);$/;"	p	class:Pattern_Search	access:protected	signature:(const Phenotype&)
Pattern_Search::index	ls.h	/^			unsigned int *index;$/;"	m	class:Pattern_Search	access:protected
Pattern_Search::max_success	ls.h	/^			unsigned int max_success;$/;"	m	class:Pattern_Search	access:protected
Pattern_Search::pattern	ls.h	/^			Real *pattern;$/;"	m	class:Pattern_Search	access:protected
Pattern_Search::pattern_explore	ls.cc	/^Phenotype Pattern_Search::pattern_explore(const Phenotype& base) {$/;"	f	class:Pattern_Search	signature:(const Phenotype& base)
Pattern_Search::pattern_explore	ls.h	/^			Phenotype pattern_explore(const Phenotype&);$/;"	p	class:Pattern_Search	access:protected	signature:(const Phenotype&)
Pattern_Search::pattern_move	ls.cc	/^Phenotype Pattern_Search::pattern_move(const Phenotype& base) {$/;"	f	class:Pattern_Search	signature:(const Phenotype& base)
Pattern_Search::pattern_move	ls.h	/^			Phenotype pattern_move(const Phenotype&);$/;"	p	class:Pattern_Search	access:protected	signature:(const Phenotype&)
Pattern_Search::reset	ls.cc	/^void Pattern_Search::reset()$/;"	f	class:Pattern_Search	signature:()
Pattern_Search::reset	ls.h	/^      void reset(void);$/;"	p	class:Pattern_Search	access:public	signature:(void)
Pattern_Search::reset_indexes	ls.cc	/^void Pattern_Search::reset_indexes() {$/;"	f	class:Pattern_Search	signature:()
Pattern_Search::reset_indexes	ls.h	/^			void reset_indexes(void);$/;"	p	class:Pattern_Search	access:protected	signature:(void)
Pattern_Search::reset_pattern	ls.cc	/^void Pattern_Search::reset_pattern() {$/;"	f	class:Pattern_Search	signature:()
Pattern_Search::reset_pattern	ls.h	/^			void reset_pattern(void);$/;"	p	class:Pattern_Search	access:protected	signature:(void)
Pattern_Search::search	ls.cc	/^int Pattern_Search::search(Individual &solution)$/;"	f	class:Pattern_Search	signature:(Individual &solution)
Pattern_Search::search	ls.h	/^      int search(Individual &);$/;"	p	class:Pattern_Search	access:public	signature:(Individual &)
Pattern_Search::search_frequency	ls.h	/^			Real search_frequency;$/;"	m	class:Pattern_Search	access:protected
Pattern_Search::shuffle_indexes	ls.cc	/^void Pattern_Search::shuffle_indexes() {$/;"	f	class:Pattern_Search	signature:()
Pattern_Search::shuffle_indexes	ls.h	/^			void shuffle_indexes(void);$/;"	p	class:Pattern_Search	access:protected	signature:(void)
Pattern_Search::size	ls.h	/^      unsigned int size; $/;"	m	class:Pattern_Search	access:protected
Pattern_Search::step_size	ls.h	/^      Real step_size, current_step_size;$/;"	m	class:Pattern_Search	access:protected
Pattern_Search::step_threshold	ls.h	/^      Real step_threshold, expansion, contraction;$/;"	m	class:Pattern_Search	access:protected
Pattern_Search::successes	ls.h	/^			unsigned int successes;$/;"	m	class:Pattern_Search	access:protected
Pattern_Search::terminate	ls.cc	/^int Pattern_Search::terminate(void)$/;"	f	class:Pattern_Search	signature:(void)
Pattern_Search::terminate	ls.h	/^      int terminate(void);$/;"	p	class:Pattern_Search	access:public	signature:(void)
Pattern_Search::~Pattern_Search	ls.cc	/^Pattern_Search::~Pattern_Search(void)$/;"	f	class:Pattern_Search	signature:(void)
Pattern_Search::~Pattern_Search	ls.h	/^      ~Pattern_Search(void);$/;"	p	class:Pattern_Search	access:public	signature:(void)
Phenotype	support.cc	/^Phenotype::Phenotype(const Phenotype &original)$/;"	f	class:Phenotype	signature:(const Phenotype &original)
Phenotype	support.cc	/^Phenotype::Phenotype(unsigned int init_number_of_dimensions, Representation **init_value_vector)$/;"	f	class:Phenotype	signature:(unsigned int init_number_of_dimensions, Representation **init_value_vector)
Phenotype	support.h	/^      Phenotype(const Phenotype &);$/;"	p	class:Phenotype	access:public	signature:(const Phenotype &)
Phenotype	support.h	/^      Phenotype(unsigned int, Representation **);$/;"	p	class:Phenotype	access:public	signature:(unsigned int, Representation **)
Phenotype	support.h	/^      Phenotype(void);$/;"	p	class:Phenotype	access:public	signature:(void)
Phenotype	support.h	/^class Phenotype$/;"	c
Phenotype	support.h	/^inline Phenotype::Phenotype(void)$/;"	f	class:Phenotype	signature:(void)
Phenotype::Phenotype	support.cc	/^Phenotype::Phenotype(const Phenotype &original)$/;"	f	class:Phenotype	signature:(const Phenotype &original)
Phenotype::Phenotype	support.cc	/^Phenotype::Phenotype(unsigned int init_number_of_dimensions, Representation **init_value_vector)$/;"	f	class:Phenotype	signature:(unsigned int init_number_of_dimensions, Representation **init_value_vector)
Phenotype::Phenotype	support.h	/^      Phenotype(const Phenotype &);$/;"	p	class:Phenotype	access:public	signature:(const Phenotype &)
Phenotype::Phenotype	support.h	/^      Phenotype(unsigned int, Representation **);$/;"	p	class:Phenotype	access:public	signature:(unsigned int, Representation **)
Phenotype::Phenotype	support.h	/^      Phenotype(void);$/;"	p	class:Phenotype	access:public	signature:(void)
Phenotype::Phenotype	support.h	/^inline Phenotype::Phenotype(void)$/;"	f	class:Phenotype	signature:(void)
Phenotype::evaluate	support.cc	/^double Phenotype::evaluate(EvalMode mode)$/;"	f	class:Phenotype	signature:(EvalMode mode)
Phenotype::evaluate	support.h	/^      double evaluate(EvalMode);  \/\/  This should return evaluation if that's the right answer, and it should evaluate otherwise.$/;"	p	class:Phenotype	access:public	signature:(EvalMode)
Phenotype::gread	support.h	/^      const Element gread(int);$/;"	p	class:Phenotype	access:public	signature:(int)
Phenotype::gread	support.h	/^inline const Element Phenotype::gread(int gene_number)$/;"	f	class:Phenotype	signature:(int gene_number)
Phenotype::gtype	support.h	/^      RepType gtype(int);$/;"	p	class:Phenotype	access:public	signature:(int)
Phenotype::gtype	support.h	/^inline RepType Phenotype::gtype(int gene_number)$/;"	f	class:Phenotype	signature:(int gene_number)
Phenotype::lookup	support.h	/^      Lookup *lookup;$/;"	m	class:Phenotype	access:protected
Phenotype::make_state	support.cc	/^State Phenotype::make_state(int ntor)$/;"	f	class:Phenotype	signature:(int ntor)
Phenotype::make_state	support.h	/^      State make_state(int);$/;"	p	class:Phenotype	access:public	signature:(int)
Phenotype::num_dimensions	support.h	/^      unsigned int num_dimensions(void);$/;"	p	class:Phenotype	access:public	signature:(void)
Phenotype::num_pts	support.h	/^      unsigned int num_pts(void);$/;"	p	class:Phenotype	access:public	signature:(void)
Phenotype::num_pts	support.h	/^inline unsigned int Phenotype::num_pts(void)$/;"	f	class:Phenotype	signature:(void)
Phenotype::number_of_dimensions	support.h	/^      unsigned int number_of_dimensions, number_of_points;$/;"	m	class:Phenotype	access:protected
Phenotype::number_of_points	support.h	/^      unsigned int number_of_dimensions, number_of_points;$/;"	m	class:Phenotype	access:protected
Phenotype::operator =	support.cc	/^Phenotype &Phenotype::operator=(const Phenotype &original)$/;"	f	class:Phenotype	signature:(const Phenotype &original)
Phenotype::operator =	support.h	/^      Phenotype &operator=(const Phenotype &);$/;"	p	class:Phenotype	access:public	signature:(const Phenotype &)
Phenotype::readQuat	support.cc	/^Quat Phenotype::readQuat()$/;"	f	class:Phenotype	signature:()
Phenotype::readQuat	support.h	/^      Quat readQuat();$/;"	p	class:Phenotype	access:public	signature:()
Phenotype::value	support.h	/^      double value;$/;"	m	class:Phenotype	access:protected
Phenotype::value_vector	support.h	/^      Representation **value_vector;$/;"	m	class:Phenotype	access:protected
Phenotype::vread	support.h	/^      const Representation *vread(int);$/;"	p	class:Phenotype	access:public	signature:(int)
Phenotype::vread	support.h	/^inline const Representation *Phenotype::vread(int vector_number)$/;"	f	class:Phenotype	signature:(int vector_number)
Phenotype::write	support.cc	/^void Phenotype::write(Element value, int gene_number)$/;"	f	class:Phenotype	signature:(Element value, int gene_number)
Phenotype::write	support.cc	/^void Phenotype::write(FourByteLong value, int gene_number)$/;"	f	class:Phenotype	signature:(FourByteLong value, int gene_number)
Phenotype::write	support.cc	/^void Phenotype::write(const Representation &value, int gene_number)$/;"	f	class:Phenotype	signature:(const Representation &value, int gene_number)
Phenotype::write	support.cc	/^void Phenotype::write(double value, int gene_number)$/;"	f	class:Phenotype	signature:(double value, int gene_number)
Phenotype::write	support.cc	/^void Phenotype::write(unsigned char value, int gene_number)$/;"	f	class:Phenotype	signature:(unsigned char value, int gene_number)
Phenotype::write	support.h	/^      void write(Element, int);$/;"	p	class:Phenotype	access:public	signature:(Element, int)
Phenotype::write	support.h	/^      void write(FourByteLong, int);$/;"	p	class:Phenotype	access:public	signature:(FourByteLong, int)
Phenotype::write	support.h	/^      void write(const Representation &, int);$/;"	p	class:Phenotype	access:public	signature:(const Representation &, int)
Phenotype::write	support.h	/^      void write(double, int);$/;"	p	class:Phenotype	access:public	signature:(double, int)
Phenotype::write	support.h	/^      void write(unsigned char, int);$/;"	p	class:Phenotype	access:public	signature:(unsigned char, int)
Phenotype::writeQuat	support.cc	/^void Phenotype::writeQuat( Quat q )$/;"	f	class:Phenotype	signature:( Quat q )
Phenotype::writeQuat	support.h	/^      void writeQuat( Quat q );$/;"	p	class:Phenotype	access:public	signature:( Quat q )
Phenotype::~Phenotype	support.cc	/^Phenotype::~Phenotype(void)$/;"	f	class:Phenotype	signature:(void)
Phenotype::~Phenotype	support.h	/^      ~Phenotype(void);$/;"	p	class:Phenotype	access:public	signature:(void)
Population	support.cc	/^Population::Population(Population &original)$/;"	f	class:Population	signature:(Population &original)
Population	support.h	/^      Population(Population &); \/* copy constructor *\/$/;"	p	class:Population	access:public	signature:(Population &)
Population	support.h	/^      Population(int); \/* create a pop. with this many individuals *\/$/;"	p	class:Population	access:public	signature:(int)
Population	support.h	/^      Population(int, Individual *); \/* takes an array of ind's and turns into pop. *\/$/;"	p	class:Population	access:public	signature:(int, Individual *)
Population	support.h	/^      Population(void);$/;"	p	class:Population	access:public	signature:(void)
Population	support.h	/^class Population$/;"	c
Population	support.h	/^inline Population::Population(int newpopsize, Individual *newpop)$/;"	f	class:Population	signature:(int newpopsize, Individual *newpop)
Population	support.h	/^inline Population::Population(int num_inds)$/;"	f	class:Population	signature:(int num_inds)
Population	support.h	/^inline Population::Population(void)$/;"	f	class:Population	signature:(void)
Population::Population	support.cc	/^Population::Population(Population &original)$/;"	f	class:Population	signature:(Population &original)
Population::Population	support.h	/^      Population(Population &); \/* copy constructor *\/$/;"	p	class:Population	access:public	signature:(Population &)
Population::Population	support.h	/^      Population(int); \/* create a pop. with this many individuals *\/$/;"	p	class:Population	access:public	signature:(int)
Population::Population	support.h	/^      Population(int, Individual *); \/* takes an array of ind's and turns into pop. *\/$/;"	p	class:Population	access:public	signature:(int, Individual *)
Population::Population	support.h	/^      Population(void);$/;"	p	class:Population	access:public	signature:(void)
Population::Population	support.h	/^inline Population::Population(int newpopsize, Individual *newpop)$/;"	f	class:Population	signature:(int newpopsize, Individual *newpop)
Population::Population	support.h	/^inline Population::Population(int num_inds)$/;"	f	class:Population	signature:(int num_inds)
Population::Population	support.h	/^inline Population::Population(void)$/;"	f	class:Population	signature:(void)
Population::SiftDown	support.cc	/^void Population::SiftDown(void)$/;"	f	class:Population	signature:(void)
Population::SiftDown	support.h	/^      void SiftDown(void); \/* for maintaining the heap order*\/$/;"	p	class:Population	access:protected	signature:(void)
Population::SiftUp	support.cc	/^void Population::SiftUp(void)$/;"	f	class:Population	signature:(void)
Population::SiftUp	support.h	/^      void SiftUp(void); \/* for maintaining the heap order*\/$/;"	p	class:Population	access:protected	signature:(void)
Population::end_of_branch	support.h	/^      int end_of_branch[MAX_TORS]; \/\/ For Branch Crossover Mode$/;"	m	class:Population	access:protected
Population::get_eob	support.cc	/^int Population::get_eob(int init_tor)$/;"	f	class:Population	signature:(int init_tor)
Population::get_eob	support.h	/^      int get_eob(int init_tor); \/\/ For Branch Crossover Mode$/;"	p	class:Population	access:public	signature:(int init_tor)
Population::heap	support.h	/^      Individual *heap; \/* a heap of individuals -- special binary tree *\/$/;"	m	class:Population	access:protected
Population::lhb	support.h	/^      int lhb;  \/\/  These keep track of the lower & upper heap bounds$/;"	m	class:Population	access:protected
Population::msort	support.cc	/^void Population::msort(int m)$/;"	f	class:Population	signature:(int m)
Population::msort	support.h	/^      void msort(int); \/* sorts the first m individuals using heap properties *\/$/;"	p	class:Population	access:public	signature:(int)
Population::num_individuals	support.h	/^      unsigned int num_individuals(void); \/* returns the size of the pop. *\/$/;"	p	class:Population	access:public	signature:(void)
Population::num_individuals	support.h	/^inline unsigned int Population::num_individuals(void)$/;"	f	class:Population	signature:(void)
Population::operator =	support.cc	/^Population &Population::operator=(const Population &original)$/;"	f	class:Population	signature:(const Population &original)
Population::operator =	support.h	/^      Population &operator=(const Population &);$/;"	p	class:Population	access:public	signature:(const Population &)
Population::operator []	support.cc	/^Individual &Population::operator[](int ind_num)$/;"	f	class:Population	signature:(int ind_num)
Population::operator []	support.h	/^      Individual &operator[](int);  \/* for accessing a particular indiv.in pop*\/$/;"	p	class:Population	access:public	signature:(int)
Population::print	support.cc	/^void Population::print(FILE *output, int num) {$/;"	f	class:Population	signature:(FILE *output, int num)
Population::print	support.h	/^      void print(FILE *, int); \/* like above *\/$/;"	p	class:Population	access:public	signature:(FILE *, int)
Population::printPopulationAsCoordsEnergies	support.cc	/^void Population::printPopulationAsCoordsEnergies(FILE *output, int num, int ntor) {$/;"	f	class:Population	signature:(FILE *output, int num, int ntor)
Population::printPopulationAsCoordsEnergies	support.h	/^      void printPopulationAsCoordsEnergies(FILE *, int, int); \/*prints energies,states of top energies *\/$/;"	p	class:Population	access:public	signature:(FILE *, int, int)
Population::printPopulationAsStates	support.cc	/^void Population::printPopulationAsStates(FILE *output, int num, int ntor) {$/;"	f	class:Population	signature:(FILE *output, int num, int ntor)
Population::printPopulationAsStates	support.h	/^      void printPopulationAsStates(FILE *, int, int); \/*prints energies,states of top energies *\/$/;"	p	class:Population	access:public	signature:(FILE *, int, int)
Population::printPopulationStatistics	support.cc	/^int Population::printPopulationStatistics(FILE *output, int level, Boole appendNewline) {$/;"	f	class:Population	signature:(FILE *output, int level, Boole appendNewline)
Population::printPopulationStatistics	support.h	/^      int printPopulationStatistics(FILE *, int, Boole); \/* prints best, worse, mean, etc energies *\/$/;"	p	class:Population	access:public	signature:(FILE *, int, Boole)
Population::printPopulationStatisticsVerbose	support.cc	/^int Population::printPopulationStatisticsVerbose(FILE * output, $/;"	f	class:Population	signature:(FILE * output, unsigned int generations, long int nevals, const char suffix[])
Population::printPopulationStatisticsVerbose	support.h	/^      int printPopulationStatisticsVerbose(FILE *, unsigned int, long int, const char []); \/* print with generations & #evals *\/$/;"	p	class:Population	access:public	signature:(FILE *, unsigned int, long int, const char [])
Population::set_eob	support.cc	/^void Population::set_eob(int init_end_of_branch[MAX_TORS])$/;"	f	class:Population	signature:(int init_end_of_branch[MAX_TORS])
Population::set_eob	support.h	/^      void set_eob(int init_end_of_branch[MAX_TORS]); \/\/ For Branch Crossover Mode$/;"	p	class:Population	access:public	signature:(int init_end_of_branch[MAX_TORS])
Population::size	support.h	/^      int size; \/* the number of individuals in the population *\/$/;"	m	class:Population	access:protected
Population::swap	support.cc	/^void Population::swap(Individual &individual1, Individual &individual2)$/;"	f	class:Population	signature:(Individual &individual1, Individual &individual2)
Population::swap	support.h	/^      void swap(Individual &, Individual &); \/* for maintaining the heap order*\/$/;"	p	class:Population	access:protected	signature:(Individual &, Individual &)
Population::~Population	support.h	/^      ~Population(void); \/* destructor *\/$/;"	p	class:Population	access:public	signature:(void)
Population::~Population	support.h	/^inline Population::~Population(void)$/;"	f	class:Population	signature:(void)
Position	structs.h	/^} Position;$/;"	t	typeref:struct:position
PrintDebugTors	constants.h	378;"	d
PrintDebugTors2	constants.h	379;"	d
Print_vector	constants.h	512;"	d
Proportional	gs.h	/^enum Selection_Mode { Proportional=0, LinearRanking=1, Tournament=2, Boltzmann=3 };$/;"	e	enum:Selection_Mode
Pseudo_Solis_Wets	ls.h	/^      Pseudo_Solis_Wets(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real);$/;"	p	class:Pseudo_Solis_Wets	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real)
Pseudo_Solis_Wets	ls.h	/^      Pseudo_Solis_Wets(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real *, Real *);$/;"	p	class:Pseudo_Solis_Wets	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real *, Real *)
Pseudo_Solis_Wets	ls.h	/^      Pseudo_Solis_Wets(void);$/;"	p	class:Pseudo_Solis_Wets	access:public	signature:(void)
Pseudo_Solis_Wets	ls.h	/^class Pseudo_Solis_Wets : public Solis_Wets_Base$/;"	c	inherits:Solis_Wets_Base
Pseudo_Solis_Wets	ls.h	/^inline Pseudo_Solis_Wets::Pseudo_Solis_Wets(unsigned int init_size, unsigned init_max_its, $/;"	f	class:Pseudo_Solis_Wets	signature:(unsigned int init_size, unsigned init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_expansion, Real init_contraction, Real init_search_freq)
Pseudo_Solis_Wets	ls.h	/^inline Pseudo_Solis_Wets::Pseudo_Solis_Wets(unsigned int init_size, unsigned init_max_its, $/;"	f	class:Pseudo_Solis_Wets	signature:(unsigned int init_size, unsigned init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_expansion, Real init_contraction, Real init_search_freq, Real *init_rho, Real *init_lb_on_rho)
Pseudo_Solis_Wets	ls.h	/^inline Pseudo_Solis_Wets::Pseudo_Solis_Wets(void)$/;"	f	class:Pseudo_Solis_Wets	signature:(void)
Pseudo_Solis_Wets1	ls.h	/^      Pseudo_Solis_Wets1(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real);$/;"	p	class:Pseudo_Solis_Wets1	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real)
Pseudo_Solis_Wets1	ls.h	/^      Pseudo_Solis_Wets1(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real *, Real *);$/;"	p	class:Pseudo_Solis_Wets1	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real *, Real *)
Pseudo_Solis_Wets1	ls.h	/^      Pseudo_Solis_Wets1(void);$/;"	p	class:Pseudo_Solis_Wets1	access:public	signature:(void)
Pseudo_Solis_Wets1	ls.h	/^class Pseudo_Solis_Wets1 : public Pseudo_Solis_Wets$/;"	c	inherits:Pseudo_Solis_Wets
Pseudo_Solis_Wets1	ls.h	/^inline Pseudo_Solis_Wets1::Pseudo_Solis_Wets1(unsigned int init_size, unsigned int init_max_its, $/;"	f	class:Pseudo_Solis_Wets1	signature:(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_expansion, Real init_contraction, Real init_search_freq)
Pseudo_Solis_Wets1	ls.h	/^inline Pseudo_Solis_Wets1::Pseudo_Solis_Wets1(unsigned int init_size, unsigned int init_max_its, $/;"	f	class:Pseudo_Solis_Wets1	signature:(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_expansion, Real init_contraction, Real init_search_freq, Real *init_rho, Real *init_lb_on_rho)
Pseudo_Solis_Wets1	ls.h	/^inline Pseudo_Solis_Wets1::Pseudo_Solis_Wets1(void)$/;"	f	class:Pseudo_Solis_Wets1	signature:(void)
Pseudo_Solis_Wets1::Pseudo_Solis_Wets1	ls.h	/^      Pseudo_Solis_Wets1(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real);$/;"	p	class:Pseudo_Solis_Wets1	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real)
Pseudo_Solis_Wets1::Pseudo_Solis_Wets1	ls.h	/^      Pseudo_Solis_Wets1(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real *, Real *);$/;"	p	class:Pseudo_Solis_Wets1	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real *, Real *)
Pseudo_Solis_Wets1::Pseudo_Solis_Wets1	ls.h	/^      Pseudo_Solis_Wets1(void);$/;"	p	class:Pseudo_Solis_Wets1	access:public	signature:(void)
Pseudo_Solis_Wets1::Pseudo_Solis_Wets1	ls.h	/^inline Pseudo_Solis_Wets1::Pseudo_Solis_Wets1(unsigned int init_size, unsigned int init_max_its, $/;"	f	class:Pseudo_Solis_Wets1	signature:(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_expansion, Real init_contraction, Real init_search_freq)
Pseudo_Solis_Wets1::Pseudo_Solis_Wets1	ls.h	/^inline Pseudo_Solis_Wets1::Pseudo_Solis_Wets1(unsigned int init_size, unsigned int init_max_its, $/;"	f	class:Pseudo_Solis_Wets1	signature:(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_expansion, Real init_contraction, Real init_search_freq, Real *init_rho, Real *init_lb_on_rho)
Pseudo_Solis_Wets1::Pseudo_Solis_Wets1	ls.h	/^inline Pseudo_Solis_Wets1::Pseudo_Solis_Wets1(void)$/;"	f	class:Pseudo_Solis_Wets1	signature:(void)
Pseudo_Solis_Wets1::gen_deviates	ls.h	/^      double gen_deviates(Real);$/;"	p	class:Pseudo_Solis_Wets1	access:public	signature:(Real)
Pseudo_Solis_Wets1::gen_deviates	ls.h	/^inline double Pseudo_Solis_Wets1::gen_deviates(Real rho)$/;"	f	class:Pseudo_Solis_Wets1	signature:(Real rho)
Pseudo_Solis_Wets1::~Pseudo_Solis_Wets1	ls.h	/^      ~Pseudo_Solis_Wets1(void);$/;"	p	class:Pseudo_Solis_Wets1	access:public	signature:(void)
Pseudo_Solis_Wets1::~Pseudo_Solis_Wets1	ls.h	/^inline Pseudo_Solis_Wets1::~Pseudo_Solis_Wets1(void)$/;"	f	class:Pseudo_Solis_Wets1	signature:(void)
Pseudo_Solis_Wets2	ls.h	/^      Pseudo_Solis_Wets2(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real);$/;"	p	class:Pseudo_Solis_Wets2	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real)
Pseudo_Solis_Wets2	ls.h	/^      Pseudo_Solis_Wets2(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real *, Real *);$/;"	p	class:Pseudo_Solis_Wets2	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real *, Real *)
Pseudo_Solis_Wets2	ls.h	/^      Pseudo_Solis_Wets2(void);$/;"	p	class:Pseudo_Solis_Wets2	access:public	signature:(void)
Pseudo_Solis_Wets2	ls.h	/^class Pseudo_Solis_Wets2 : public Pseudo_Solis_Wets$/;"	c	inherits:Pseudo_Solis_Wets
Pseudo_Solis_Wets2	ls.h	/^inline Pseudo_Solis_Wets2::Pseudo_Solis_Wets2(unsigned int init_size, unsigned int init_max_its, $/;"	f	class:Pseudo_Solis_Wets2	signature:(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_expansion, Real init_contraction, Real init_search_freq)
Pseudo_Solis_Wets2	ls.h	/^inline Pseudo_Solis_Wets2::Pseudo_Solis_Wets2(unsigned int init_size, unsigned int init_max_its, $/;"	f	class:Pseudo_Solis_Wets2	signature:(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_expansion, Real init_contraction, Real init_search_freq, Real *init_rho, Real *init_lb_on_rho)
Pseudo_Solis_Wets2	ls.h	/^inline Pseudo_Solis_Wets2::Pseudo_Solis_Wets2(void)$/;"	f	class:Pseudo_Solis_Wets2	signature:(void)
Pseudo_Solis_Wets2::Pseudo_Solis_Wets2	ls.h	/^      Pseudo_Solis_Wets2(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real);$/;"	p	class:Pseudo_Solis_Wets2	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real)
Pseudo_Solis_Wets2::Pseudo_Solis_Wets2	ls.h	/^      Pseudo_Solis_Wets2(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real *, Real *);$/;"	p	class:Pseudo_Solis_Wets2	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real *, Real *)
Pseudo_Solis_Wets2::Pseudo_Solis_Wets2	ls.h	/^      Pseudo_Solis_Wets2(void);$/;"	p	class:Pseudo_Solis_Wets2	access:public	signature:(void)
Pseudo_Solis_Wets2::Pseudo_Solis_Wets2	ls.h	/^inline Pseudo_Solis_Wets2::Pseudo_Solis_Wets2(unsigned int init_size, unsigned int init_max_its, $/;"	f	class:Pseudo_Solis_Wets2	signature:(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_expansion, Real init_contraction, Real init_search_freq)
Pseudo_Solis_Wets2::Pseudo_Solis_Wets2	ls.h	/^inline Pseudo_Solis_Wets2::Pseudo_Solis_Wets2(unsigned int init_size, unsigned int init_max_its, $/;"	f	class:Pseudo_Solis_Wets2	signature:(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_expansion, Real init_contraction, Real init_search_freq, Real *init_rho, Real *init_lb_on_rho)
Pseudo_Solis_Wets2::Pseudo_Solis_Wets2	ls.h	/^inline Pseudo_Solis_Wets2::Pseudo_Solis_Wets2(void)$/;"	f	class:Pseudo_Solis_Wets2	signature:(void)
Pseudo_Solis_Wets2::gen_deviates	ls.h	/^      double gen_deviates(Real);$/;"	p	class:Pseudo_Solis_Wets2	access:public	signature:(Real)
Pseudo_Solis_Wets2::gen_deviates	ls.h	/^inline double Pseudo_Solis_Wets2::gen_deviates(Real rho)$/;"	f	class:Pseudo_Solis_Wets2	signature:(Real rho)
Pseudo_Solis_Wets2::~Pseudo_Solis_Wets2	ls.h	/^      ~Pseudo_Solis_Wets2(void);$/;"	p	class:Pseudo_Solis_Wets2	access:public	signature:(void)
Pseudo_Solis_Wets2::~Pseudo_Solis_Wets2	ls.h	/^inline Pseudo_Solis_Wets2::~Pseudo_Solis_Wets2(void)$/;"	f	class:Pseudo_Solis_Wets2	signature:(void)
Pseudo_Solis_Wets::Pseudo_Solis_Wets	ls.h	/^      Pseudo_Solis_Wets(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real);$/;"	p	class:Pseudo_Solis_Wets	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real)
Pseudo_Solis_Wets::Pseudo_Solis_Wets	ls.h	/^      Pseudo_Solis_Wets(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real *, Real *);$/;"	p	class:Pseudo_Solis_Wets	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real *, Real *)
Pseudo_Solis_Wets::Pseudo_Solis_Wets	ls.h	/^      Pseudo_Solis_Wets(void);$/;"	p	class:Pseudo_Solis_Wets	access:public	signature:(void)
Pseudo_Solis_Wets::Pseudo_Solis_Wets	ls.h	/^inline Pseudo_Solis_Wets::Pseudo_Solis_Wets(unsigned int init_size, unsigned init_max_its, $/;"	f	class:Pseudo_Solis_Wets	signature:(unsigned int init_size, unsigned init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_expansion, Real init_contraction, Real init_search_freq)
Pseudo_Solis_Wets::Pseudo_Solis_Wets	ls.h	/^inline Pseudo_Solis_Wets::Pseudo_Solis_Wets(unsigned int init_size, unsigned init_max_its, $/;"	f	class:Pseudo_Solis_Wets	signature:(unsigned int init_size, unsigned init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_expansion, Real init_contraction, Real init_search_freq, Real *init_rho, Real *init_lb_on_rho)
Pseudo_Solis_Wets::Pseudo_Solis_Wets	ls.h	/^inline Pseudo_Solis_Wets::Pseudo_Solis_Wets(void)$/;"	f	class:Pseudo_Solis_Wets	signature:(void)
Pseudo_Solis_Wets::SW	ls.cc	/^Boole Pseudo_Solis_Wets::SW(Phenotype &vector)$/;"	f	class:Pseudo_Solis_Wets	signature:(Phenotype &vector)
Pseudo_Solis_Wets::SW	ls.h	/^      Boole SW(Phenotype &);$/;"	p	class:Pseudo_Solis_Wets	access:public	signature:(Phenotype &)
Pseudo_Solis_Wets::gen_deviates	ls.h	/^      virtual double gen_deviates(Real) = 0;$/;"	p	class:Pseudo_Solis_Wets	access:public	signature:(Real)
Pseudo_Solis_Wets::lower_bound_on_rho	ls.h	/^      Real *rho, *lower_bound_on_rho;$/;"	m	class:Pseudo_Solis_Wets	access:protected
Pseudo_Solis_Wets::rho	ls.h	/^      Real *rho, *lower_bound_on_rho;$/;"	m	class:Pseudo_Solis_Wets	access:protected
Pseudo_Solis_Wets::temp_rho	ls.h	/^      Real *temp_rho;$/;"	m	class:Pseudo_Solis_Wets	access:protected
Pseudo_Solis_Wets::~Pseudo_Solis_Wets	ls.h	/^      virtual ~Pseudo_Solis_Wets(void);$/;"	p	class:Pseudo_Solis_Wets	access:public	signature:(void)
Pseudo_Solis_Wets::~Pseudo_Solis_Wets	ls.h	/^inline Pseudo_Solis_Wets::~Pseudo_Solis_Wets(void)$/;"	f	class:Pseudo_Solis_Wets	signature:(void)
Q	structs.h	/^  Quat Q;			\/* rigid-body orientation *\/$/;"	m	struct:state	access:public
QMULTIPLY	qmultiply.h	28;"	d
QTRANSFORM	qtransform.h	29;"	d
QUAT	constants.h	77;"	d
QUICKSORT	quicksort.h	28;"	d
QW	constants.h	76;"	d
QW_ROTATION_INDEX	rep_constants.h	39;"	d
QX	constants.h	73;"	d
QX_ROTATION_INDEX	rep_constants.h	36;"	d
QY	constants.h	74;"	d
QY_ROTATION_INDEX	rep_constants.h	37;"	d
QZ	constants.h	75;"	d
QZ_ROTATION_INDEX	rep_constants.h	38;"	d
Quat	structs.h	/^} Quat;$/;"	t	typeref:struct:quat
Quaternion	structs.h	/^} Quaternion;$/;"	t	typeref:struct:quaternion
RANDOM_MODE	investigate.cc	43;"	d	file:
RANLIB	Makefile	/^RANLIB = ranlib$/;"	m
READFIELD	readfield.h	28;"	d
READMAP	readmap.h	44;"	d
READPDBQT	readPDBQT.h	28;"	d
REALV_HIGH	rep.h	51;"	d
REALV_LOW	rep.h	50;"	d
REJECT	constants.h	67;"	d
RHO	conformation_sampler.cc	45;"	d	file:
RIJ_MAX	constants.h	207;"	d
RIJ_MIN	constants.h	206;"	d
RJ	constants.h	/^const Real RJ = 8.31441;     \/\/ in J\/K\/mol, Gas Constant, Atkins Phys.Chem., 2\/e$/;"	v
RK_CONSTANT	conformation_sampler.cc	35;"	d	file:
RK_entropy	conformation_sampler.cc	/^Real ConformationSampler::RK_entropy(void) {$/;"	f	class:ConformationSampler	signature:(void)
RK_entropy	conformation_sampler.h	/^		Real RK_entropy(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
RMIN_ELEC	constants.h	200;"	d
RMIN_ELEC2	constants.h	201;"	d
RMSD_SYMMETRY	conformation_sampler.cc	41;"	d	file:
ROTATION_ANGLE_INDEX	rep_constants.h	46;"	d
ROT_ANG_STEP	conformation_sampler.cc	43;"	d	file:
RT_CONSTANT	conformation_sampler.cc	37;"	d	file:
R_max	constants.h	537;"	d
RadiansToDegrees	constants.h	253;"	d
RadiansToDivs	constants.h	122;"	d
Randpm1	constants.h	353;"	d
RandpmPI	constants.h	354;"	d
Rcal	constants.h	/^const Real Rcal = 1.9871917; \/\/ in cal\/K\/mol, Gas Constant, RJ\/4.184$/;"	v
Real	typedefs.h	/^    typedef double Real;$/;"	t
Real	typedefs.h	/^    typedef float Real;$/;"	t
RealVector	rep.cc	/^RealVector::RealVector( int num_els,  double init_low, double init_high,  double x, double y, double z, double w)$/;"	f	class:RealVector	signature:( int num_els, double init_low, double init_high, double x, double y, double z, double w)
RealVector	rep.cc	/^RealVector::RealVector( int num_els, double init_low, double init_high, double nx, double ny, double nz )$/;"	f	class:RealVector	signature:( int num_els, double init_low, double init_high, double nx, double ny, double nz )
RealVector	rep.cc	/^RealVector::RealVector(const RealVector &original)$/;"	f	class:RealVector	signature:(const RealVector &original)
RealVector	rep.cc	/^RealVector::RealVector(int num_els)$/;"	f	class:RealVector	signature:(int num_els)
RealVector	rep.cc	/^RealVector::RealVector(int num_els, double init_low, double init_high)$/;"	f	class:RealVector	signature:(int num_els, double init_low, double init_high)
RealVector	rep.cc	/^RealVector::RealVector(int num_els, double init_low, double init_high, double init_first_value)$/;"	f	class:RealVector	signature:(int num_els, double init_low, double init_high, double init_first_value)
RealVector	rep.h	/^      RealVector(const RealVector &);$/;"	p	class:RealVector	access:public	signature:(const RealVector &)
RealVector	rep.h	/^      RealVector(int);$/;"	p	class:RealVector	access:public	signature:(int)
RealVector	rep.h	/^      RealVector(int, double *);$/;"	p	class:RealVector	access:public	signature:(int, double *)
RealVector	rep.h	/^      RealVector(int, double, double);$/;"	p	class:RealVector	access:public	signature:(int, double, double)
RealVector	rep.h	/^      RealVector(int, double, double, double); $/;"	p	class:RealVector	access:public	signature:(int, double, double, double)
RealVector	rep.h	/^      RealVector(int, double, double, double, double, double ); $/;"	p	class:RealVector	access:public	signature:(int, double, double, double, double, double )
RealVector	rep.h	/^      RealVector(int, double, double, double, double, double, double);  \/\/ sets a quaternion's x,y,z,w values$/;"	p	class:RealVector	access:public	signature:(int, double, double, double, double, double, double)
RealVector	rep.h	/^      RealVector(void)$/;"	f	class:RealVector	access:public	signature:(void)
RealVector	rep.h	/^class RealVector : public Representation$/;"	c	inherits:Representation
RealVector	rep.h	/^inline RealVector::RealVector(int num_els, double *array)$/;"	f	class:RealVector	signature:(int num_els, double *array)
RealVector::RealVector	rep.cc	/^RealVector::RealVector( int num_els,  double init_low, double init_high,  double x, double y, double z, double w)$/;"	f	class:RealVector	signature:( int num_els, double init_low, double init_high, double x, double y, double z, double w)
RealVector::RealVector	rep.cc	/^RealVector::RealVector( int num_els, double init_low, double init_high, double nx, double ny, double nz )$/;"	f	class:RealVector	signature:( int num_els, double init_low, double init_high, double nx, double ny, double nz )
RealVector::RealVector	rep.cc	/^RealVector::RealVector(const RealVector &original)$/;"	f	class:RealVector	signature:(const RealVector &original)
RealVector::RealVector	rep.cc	/^RealVector::RealVector(int num_els)$/;"	f	class:RealVector	signature:(int num_els)
RealVector::RealVector	rep.cc	/^RealVector::RealVector(int num_els, double init_low, double init_high)$/;"	f	class:RealVector	signature:(int num_els, double init_low, double init_high)
RealVector::RealVector	rep.cc	/^RealVector::RealVector(int num_els, double init_low, double init_high, double init_first_value)$/;"	f	class:RealVector	signature:(int num_els, double init_low, double init_high, double init_first_value)
RealVector::RealVector	rep.h	/^      RealVector(const RealVector &);$/;"	p	class:RealVector	access:public	signature:(const RealVector &)
RealVector::RealVector	rep.h	/^      RealVector(int);$/;"	p	class:RealVector	access:public	signature:(int)
RealVector::RealVector	rep.h	/^      RealVector(int, double *);$/;"	p	class:RealVector	access:public	signature:(int, double *)
RealVector::RealVector	rep.h	/^      RealVector(int, double, double);$/;"	p	class:RealVector	access:public	signature:(int, double, double)
RealVector::RealVector	rep.h	/^      RealVector(int, double, double, double); $/;"	p	class:RealVector	access:public	signature:(int, double, double, double)
RealVector::RealVector	rep.h	/^      RealVector(int, double, double, double, double, double ); $/;"	p	class:RealVector	access:public	signature:(int, double, double, double, double, double )
RealVector::RealVector	rep.h	/^      RealVector(int, double, double, double, double, double, double);  \/\/ sets a quaternion's x,y,z,w values$/;"	p	class:RealVector	access:public	signature:(int, double, double, double, double, double, double)
RealVector::RealVector	rep.h	/^      RealVector(void)$/;"	f	class:RealVector	access:public	signature:(void)
RealVector::RealVector	rep.h	/^inline RealVector::RealVector(int num_els, double *array)$/;"	f	class:RealVector	signature:(int num_els, double *array)
RealVector::clone	rep.h	/^      Representation *clone(void) const;$/;"	p	class:RealVector	access:protected	signature:(void) const
RealVector::clone	rep.h	/^inline Representation *RealVector::clone(void) const$/;"	f	class:RealVector	signature:(void) const
RealVector::gene	rep.cc	/^const Element RealVector::gene(unsigned int gene_number) const$/;"	f	class:RealVector	signature:(unsigned int gene_number) const
RealVector::gene	rep.h	/^      const Element gene(unsigned int) const;$/;"	p	class:RealVector	access:public	signature:(unsigned int) const
RealVector::high	rep.h	/^      Real high, low;$/;"	m	class:RealVector	access:protected
RealVector::internals	rep.cc	/^const void *RealVector::internals(void) const$/;"	f	class:RealVector	signature:(void) const
RealVector::internals	rep.h	/^      const void *internals(void) const;$/;"	p	class:RealVector	access:protected	signature:(void) const
RealVector::low	rep.h	/^      Real high, low;$/;"	m	class:RealVector	access:protected
RealVector::operator =	rep.cc	/^Representation &RealVector::operator=(const Representation &original)$/;"	f	class:RealVector	signature:(const Representation &original)
RealVector::operator =	rep.h	/^      Representation &operator=(const Representation &);$/;"	p	class:RealVector	access:public	signature:(const Representation &)
RealVector::vector	rep.h	/^      double *vector;$/;"	m	class:RealVector	access:protected
RealVector::write	rep.cc	/^void RealVector::write(FourByteLong value, int gene)$/;"	f	class:RealVector	signature:(FourByteLong value, int gene)
RealVector::write	rep.cc	/^void RealVector::write(const Element value, int gene)$/;"	f	class:RealVector	signature:(const Element value, int gene)
RealVector::write	rep.cc	/^void RealVector::write(double value, int gene)$/;"	f	class:RealVector	signature:(double value, int gene)
RealVector::write	rep.cc	/^void RealVector::write(unsigned char value, int gene)$/;"	f	class:RealVector	signature:(unsigned char value, int gene)
RealVector::write	rep.h	/^      void write(FourByteLong, int);$/;"	p	class:RealVector	access:public	signature:(FourByteLong, int)
RealVector::write	rep.h	/^      void write(const Element, int);$/;"	p	class:RealVector	access:public	signature:(const Element, int)
RealVector::write	rep.h	/^      void write(double, int);$/;"	p	class:RealVector	access:public	signature:(double, int)
RealVector::write	rep.h	/^      void write(unsigned char, int);$/;"	p	class:RealVector	access:public	signature:(unsigned char, int)
RealVector::~RealVector	rep.h	/^      ~RealVector(void);$/;"	p	class:RealVector	access:public	signature:(void)
RealVector::~RealVector	rep.h	/^inline RealVector::~RealVector(void)$/;"	f	class:RealVector	signature:(void)
RedFac	constants.h	270;"	d
RepType	rep.h	/^enum RepType { T_BASE, T_IntV, T_RealV, T_CRealV, T_BitV, T_Orientation };$/;"	g
Representation	rep.h	/^      Representation(unsigned int);$/;"	p	class:Representation	access:public	signature:(unsigned int)
Representation	rep.h	/^      Representation(void);$/;"	p	class:Representation	access:public	signature:(void)
Representation	rep.h	/^class Representation$/;"	c
Representation	rep.h	/^inline Representation::Representation(unsigned int pts)$/;"	f	class:Representation	signature:(unsigned int pts)
Representation	rep.h	/^inline Representation::Representation(void)$/;"	f	class:Representation	signature:(void)
Representation::Representation	rep.h	/^      Representation(unsigned int);$/;"	p	class:Representation	access:public	signature:(unsigned int)
Representation::Representation	rep.h	/^      Representation(void);$/;"	p	class:Representation	access:public	signature:(void)
Representation::Representation	rep.h	/^inline Representation::Representation(unsigned int pts)$/;"	f	class:Representation	signature:(unsigned int pts)
Representation::Representation	rep.h	/^inline Representation::Representation(void)$/;"	f	class:Representation	signature:(void)
Representation::clone	rep.h	/^      virtual Representation *clone(void) const = 0;$/;"	p	class:Representation	access:public	signature:(void) const
Representation::clone	rep.h	/^inline Representation *Representation::clone(void) const$/;"	f	class:Representation	signature:(void) const
Representation::gene	rep.h	/^      virtual const Element gene(unsigned int) const = 0;$/;"	p	class:Representation	access:public	signature:(unsigned int) const
Representation::internals	rep.h	/^      virtual const void *internals(void) const = 0;$/;"	p	class:Representation	access:public	signature:(void) const
Representation::is_normalized	rep.h	/^      int is_normalized(void) const;$/;"	p	class:Representation	access:public	signature:(void) const
Representation::is_normalized	rep.h	/^inline int Representation::is_normalized(void) const$/;"	f	class:Representation	signature:(void) const
Representation::mytype	rep.h	/^      RepType mytype;$/;"	m	class:Representation	access:protected
Representation::normalized	rep.h	/^      unsigned char normalized; \/\/ =1 means the vector's normalized$/;"	m	class:Representation	access:protected
Representation::number_of_points	rep.h	/^      unsigned int number_of_points(void) const;$/;"	p	class:Representation	access:public	signature:(void) const
Representation::number_of_points	rep.h	/^inline unsigned int Representation::number_of_points(void) const$/;"	f	class:Representation	signature:(void) const
Representation::number_of_pts	rep.h	/^      unsigned int number_of_pts;$/;"	m	class:Representation	access:protected
Representation::operator =	rep.h	/^      virtual Representation &operator=(const Representation &) = 0;$/;"	p	class:Representation	access:public	signature:(const Representation &)
Representation::set_normalized_false	rep.h	/^      void set_normalized_false(void);$/;"	p	class:Representation	access:public	signature:(void)
Representation::set_normalized_false	rep.h	/^inline void Representation::set_normalized_false(void)$/;"	f	class:Representation	signature:(void)
Representation::set_normalized_true	rep.h	/^      void set_normalized_true(void);$/;"	p	class:Representation	access:public	signature:(void)
Representation::set_normalized_true	rep.h	/^inline void Representation::set_normalized_true(void)$/;"	f	class:Representation	signature:(void)
Representation::type	rep.h	/^      virtual RepType type(void) const; $/;"	p	class:Representation	access:public	signature:(void) const
Representation::type	rep.h	/^inline RepType Representation::type(void) const$/;"	f	class:Representation	signature:(void) const
Representation::write	rep.h	/^      virtual void write(FourByteLong, int) = 0;$/;"	p	class:Representation	access:public	signature:(FourByteLong, int)
Representation::write	rep.h	/^      virtual void write(const Element, int) = 0;$/;"	p	class:Representation	access:public	signature:(const Element, int)
Representation::write	rep.h	/^      virtual void write(double, int) = 0;$/;"	p	class:Representation	access:public	signature:(double, int)
Representation::write	rep.h	/^      virtual void write(unsigned char, int) = 0;$/;"	p	class:Representation	access:public	signature:(unsigned char, int)
Representation::~Representation	rep.h	/^      virtual ~Representation(void);$/;"	p	class:Representation	access:public	signature:(void)
Representation::~Representation	rep.h	/^inline Representation::~Representation(void)$/;"	f	class:Representation	signature:(void)
Reset	support.h	/^enum EvalMode { Reset, Always_Eval, Normal_Eval, Always_Eval_Nonbond, Always_Eval_Elec };$/;"	e	enum:EvalMode
Rij	parameters.h	/^  double Rij;			\/* Lennard-Jones equilibrium separation *\/$/;"	m	struct:parameter_entry	access:public
Rij_hb	parameters.h	/^  double Rij_hb;		\/* 12-10 Lennard-Jones equilibrium separation *\/$/;"	m	struct:parameter_entry	access:public
Rotamer	structs.h	/^} Rotamer;$/;"	t	typeref:struct:rotamer
S	main.cc	/^int S ; \/\/ Swarm size$/;"	v
S	mdist.h	/^enum {C=0,N=1,O=2,H=3,XX=4,P=5,S=6};  \/\/ see "bond_index" in the "AD4.1_bound.dat" or "AD4_parameters.dat" file.$/;"	e	enum:__anon1
S	structs.h	/^  State S;		                    	\/* state of molecule *\/$/;"	m	struct:molecule	access:public
SETFLAGS	setflags.h	28;"	d
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMANNEAL	simanneal.h	28;"	d
SOME_ATOMS_OUTSIDE_GRID	trilinterp.h	35;"	d
SORT_ENERGY	sort_enrg.h	29;"	d
SOURCES	Makefile	/^SOURCES = $(libad_a_SOURCES) $(covalentDock_SOURCES)$/;"	m
SPACE	autocomm.h	72;"	d
SQ	constants.h	276;"	d
SQA_DIV	constants.h	150;"	d
SQA_DIV	constants.h	162;"	d
STOP	stop.h	28;"	d
STRINDEX	strindex.h	28;"	d
STRIP	Makefile	/^STRIP = $/;"	m
SUCCESS	success.h	29;"	d
SULPHUR	autocomm.h	116;"	d
SW	ls.cc	/^Boole Pseudo_Solis_Wets::SW(Phenotype &vector)$/;"	f	class:Pseudo_Solis_Wets	signature:(Phenotype &vector)
SW	ls.cc	/^Boole Solis_Wets::SW(Phenotype &vector)$/;"	f	class:Solis_Wets	signature:(Phenotype &vector)
SW	ls.h	/^      Boole SW(Phenotype &);$/;"	p	class:Pseudo_Solis_Wets	access:public	signature:(Phenotype &)
SW	ls.h	/^      Boole SW(Phenotype &);$/;"	p	class:Solis_Wets	access:public	signature:(Phenotype &)
SW	ls.h	/^      virtual Boole SW(Phenotype &) = 0;$/;"	p	class:Solis_Wets_Base	access:public	signature:(Phenotype &)
SWAP	swap.h	28;"	d
SW_lb_rho	dpftoken.h	121;"	d
SW_max_fail	dpftoken.h	119;"	d
SW_max_its	dpftoken.h	117;"	d
SW_max_succ	dpftoken.h	118;"	d
SW_rho	dpftoken.h	120;"	d
S_factor	main.cc	/^int S_factor=30; \/\/ Swarm size$/;"	v
S_max	constants.h	536;"	d
Selection_Mode	gs.h	/^enum Selection_Mode { Proportional=0, LinearRanking=1, Tournament=2, Boltzmann=3 };$/;"	g
SiftDown	support.cc	/^void Population::SiftDown(void)$/;"	f	class:Population	signature:(void)
SiftDown	support.h	/^      void SiftDown(void); \/* for maintaining the heap order*\/$/;"	p	class:Population	access:protected	signature:(void)
SiftUp	support.cc	/^void Population::SiftUp(void)$/;"	f	class:Population	signature:(void)
SiftUp	support.h	/^      void SiftUp(void); \/* for maintaining the heap order*\/$/;"	p	class:Population	access:protected	signature:(void)
Solis_Wets	ls.h	/^      Solis_Wets(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real, Real);$/;"	p	class:Solis_Wets	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real, Real)
Solis_Wets	ls.h	/^      Solis_Wets(void);$/;"	p	class:Solis_Wets	access:public	signature:(void)
Solis_Wets	ls.h	/^class Solis_Wets : public Solis_Wets_Base$/;"	c	inherits:Solis_Wets_Base
Solis_Wets	ls.h	/^inline Solis_Wets::Solis_Wets(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, $/;"	f	class:Solis_Wets	signature:(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_rho, Real init_lb_on_rho, Real init_expansion, Real init_contraction, Real init_search_freq)
Solis_Wets	ls.h	/^inline Solis_Wets::Solis_Wets(void)$/;"	f	class:Solis_Wets	signature:(void)
Solis_Wets1	ls.h	/^      Solis_Wets1(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real, Real);$/;"	p	class:Solis_Wets1	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real, Real)
Solis_Wets1	ls.h	/^      Solis_Wets1(void);$/;"	p	class:Solis_Wets1	access:public	signature:(void)
Solis_Wets1	ls.h	/^class Solis_Wets1 : public Solis_Wets$/;"	c	inherits:Solis_Wets
Solis_Wets1	ls.h	/^inline Solis_Wets1::Solis_Wets1(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, $/;"	f	class:Solis_Wets1	signature:(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_rho, Real init_lb_on_rho, Real init_expansion, Real init_contraction, Real init_search_freq)
Solis_Wets1	ls.h	/^inline Solis_Wets1::Solis_Wets1(void)$/;"	f	class:Solis_Wets1	signature:(void)
Solis_Wets1::Solis_Wets1	ls.h	/^      Solis_Wets1(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real, Real);$/;"	p	class:Solis_Wets1	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real, Real)
Solis_Wets1::Solis_Wets1	ls.h	/^      Solis_Wets1(void);$/;"	p	class:Solis_Wets1	access:public	signature:(void)
Solis_Wets1::Solis_Wets1	ls.h	/^inline Solis_Wets1::Solis_Wets1(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, $/;"	f	class:Solis_Wets1	signature:(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_rho, Real init_lb_on_rho, Real init_expansion, Real init_contraction, Real init_search_freq)
Solis_Wets1::Solis_Wets1	ls.h	/^inline Solis_Wets1::Solis_Wets1(void)$/;"	f	class:Solis_Wets1	signature:(void)
Solis_Wets1::gen_deviates	ls.h	/^      double gen_deviates(Real);$/;"	p	class:Solis_Wets1	access:public	signature:(Real)
Solis_Wets1::gen_deviates	ls.h	/^inline double Solis_Wets1::gen_deviates(Real rho)$/;"	f	class:Solis_Wets1	signature:(Real rho)
Solis_Wets1::~Solis_Wets1	ls.h	/^      ~Solis_Wets1(void);$/;"	p	class:Solis_Wets1	access:public	signature:(void)
Solis_Wets1::~Solis_Wets1	ls.h	/^inline Solis_Wets1::~Solis_Wets1(void)$/;"	f	class:Solis_Wets1	signature:(void)
Solis_Wets2	ls.h	/^      Solis_Wets2(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real, Real);$/;"	p	class:Solis_Wets2	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real, Real)
Solis_Wets2	ls.h	/^      Solis_Wets2(void);$/;"	p	class:Solis_Wets2	access:public	signature:(void)
Solis_Wets2	ls.h	/^class Solis_Wets2 : public Solis_Wets$/;"	c	inherits:Solis_Wets
Solis_Wets2	ls.h	/^inline Solis_Wets2::Solis_Wets2(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, $/;"	f	class:Solis_Wets2	signature:(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_rho, Real init_lb_on_rho, Real init_expansion, Real init_contraction, Real init_search_freq)
Solis_Wets2	ls.h	/^inline Solis_Wets2::Solis_Wets2(void)$/;"	f	class:Solis_Wets2	signature:(void)
Solis_Wets2::Solis_Wets2	ls.h	/^      Solis_Wets2(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real, Real);$/;"	p	class:Solis_Wets2	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real, Real)
Solis_Wets2::Solis_Wets2	ls.h	/^      Solis_Wets2(void);$/;"	p	class:Solis_Wets2	access:public	signature:(void)
Solis_Wets2::Solis_Wets2	ls.h	/^inline Solis_Wets2::Solis_Wets2(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, $/;"	f	class:Solis_Wets2	signature:(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_rho, Real init_lb_on_rho, Real init_expansion, Real init_contraction, Real init_search_freq)
Solis_Wets2::Solis_Wets2	ls.h	/^inline Solis_Wets2::Solis_Wets2(void)$/;"	f	class:Solis_Wets2	signature:(void)
Solis_Wets2::gen_deviates	ls.h	/^      double gen_deviates(Real);$/;"	p	class:Solis_Wets2	access:public	signature:(Real)
Solis_Wets2::gen_deviates	ls.h	/^inline double Solis_Wets2::gen_deviates(Real rho)$/;"	f	class:Solis_Wets2	signature:(Real rho)
Solis_Wets2::~Solis_Wets2	ls.h	/^      ~Solis_Wets2(void);$/;"	p	class:Solis_Wets2	access:public	signature:(void)
Solis_Wets2::~Solis_Wets2	ls.h	/^inline Solis_Wets2::~Solis_Wets2(void)$/;"	f	class:Solis_Wets2	signature:(void)
Solis_Wets::SW	ls.cc	/^Boole Solis_Wets::SW(Phenotype &vector)$/;"	f	class:Solis_Wets	signature:(Phenotype &vector)
Solis_Wets::SW	ls.h	/^      Boole SW(Phenotype &);$/;"	p	class:Solis_Wets	access:public	signature:(Phenotype &)
Solis_Wets::Solis_Wets	ls.h	/^      Solis_Wets(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real, Real);$/;"	p	class:Solis_Wets	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real, Real, Real)
Solis_Wets::Solis_Wets	ls.h	/^      Solis_Wets(void);$/;"	p	class:Solis_Wets	access:public	signature:(void)
Solis_Wets::Solis_Wets	ls.h	/^inline Solis_Wets::Solis_Wets(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, $/;"	f	class:Solis_Wets	signature:(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_rho, Real init_lb_on_rho, Real init_expansion, Real init_contraction, Real init_search_freq)
Solis_Wets::Solis_Wets	ls.h	/^inline Solis_Wets::Solis_Wets(void)$/;"	f	class:Solis_Wets	signature:(void)
Solis_Wets::gen_deviates	ls.h	/^      virtual double gen_deviates(Real) = 0;$/;"	p	class:Solis_Wets	access:public	signature:(Real)
Solis_Wets::lower_bound_on_rho	ls.h	/^      Real rho, lower_bound_on_rho;$/;"	m	class:Solis_Wets	access:protected
Solis_Wets::rho	ls.h	/^      Real rho, lower_bound_on_rho;$/;"	m	class:Solis_Wets	access:protected
Solis_Wets::~Solis_Wets	ls.h	/^      virtual ~Solis_Wets(void);$/;"	p	class:Solis_Wets	access:public	signature:(void)
Solis_Wets::~Solis_Wets	ls.h	/^inline Solis_Wets::~Solis_Wets(void)$/;"	f	class:Solis_Wets	signature:(void)
Solis_Wets_Base	ls.h	/^      Solis_Wets_Base(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real);$/;"	p	class:Solis_Wets_Base	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real)
Solis_Wets_Base	ls.h	/^      Solis_Wets_Base(void);$/;"	p	class:Solis_Wets_Base	access:public	signature:(void)
Solis_Wets_Base	ls.h	/^class Solis_Wets_Base : public Local_Search$/;"	c	inherits:Local_Search
Solis_Wets_Base	ls.h	/^inline Solis_Wets_Base::Solis_Wets_Base(unsigned int init_size, unsigned int init_max_its, $/;"	f	class:Solis_Wets_Base	signature:(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_expansion, Real init_contraction, Real init_search_freq)
Solis_Wets_Base	ls.h	/^inline Solis_Wets_Base::Solis_Wets_Base(void)$/;"	f	class:Solis_Wets_Base	signature:(void)
Solis_Wets_Base::SW	ls.h	/^      virtual Boole SW(Phenotype &) = 0;$/;"	p	class:Solis_Wets_Base	access:public	signature:(Phenotype &)
Solis_Wets_Base::Solis_Wets_Base	ls.h	/^      Solis_Wets_Base(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real);$/;"	p	class:Solis_Wets_Base	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, Real, Real, Real)
Solis_Wets_Base::Solis_Wets_Base	ls.h	/^      Solis_Wets_Base(void);$/;"	p	class:Solis_Wets_Base	access:public	signature:(void)
Solis_Wets_Base::Solis_Wets_Base	ls.h	/^inline Solis_Wets_Base::Solis_Wets_Base(unsigned int init_size, unsigned int init_max_its, $/;"	f	class:Solis_Wets_Base	signature:(unsigned int init_size, unsigned int init_max_its, unsigned int init_max_succ, unsigned int init_max_fail, Real init_expansion, Real init_contraction, Real init_search_freq)
Solis_Wets_Base::Solis_Wets_Base	ls.h	/^inline Solis_Wets_Base::Solis_Wets_Base(void)$/;"	f	class:Solis_Wets_Base	signature:(void)
Solis_Wets_Base::bias	ls.h	/^      Real *deviates, *bias;$/;"	m	class:Solis_Wets_Base	access:protected
Solis_Wets_Base::contraction	ls.h	/^      Real expansion, contraction;$/;"	m	class:Solis_Wets_Base	access:protected
Solis_Wets_Base::deviates	ls.h	/^      Real *deviates, *bias;$/;"	m	class:Solis_Wets_Base	access:protected
Solis_Wets_Base::expansion	ls.h	/^      Real expansion, contraction;$/;"	m	class:Solis_Wets_Base	access:protected
Solis_Wets_Base::gen_deviates	ls.h	/^      virtual double gen_deviates(Real) = 0;$/;"	p	class:Solis_Wets_Base	access:public	signature:(Real)
Solis_Wets_Base::max_failures	ls.h	/^      unsigned int size, max_its, max_successes, max_failures;$/;"	m	class:Solis_Wets_Base	access:protected
Solis_Wets_Base::max_its	ls.h	/^      unsigned int size, max_its, max_successes, max_failures;$/;"	m	class:Solis_Wets_Base	access:protected
Solis_Wets_Base::max_successes	ls.h	/^      unsigned int size, max_its, max_successes, max_failures;$/;"	m	class:Solis_Wets_Base	access:protected
Solis_Wets_Base::reset	ls.h	/^      virtual void reset(void);$/;"	p	class:Solis_Wets_Base	access:public	signature:(void)
Solis_Wets_Base::reset	ls.h	/^inline void Solis_Wets_Base::reset(void)$/;"	f	class:Solis_Wets_Base	signature:(void)
Solis_Wets_Base::search	ls.cc	/^int Solis_Wets_Base::search(Individual &solution)$/;"	f	class:Solis_Wets_Base	signature:(Individual &solution)
Solis_Wets_Base::search	ls.h	/^      int search(Individual &);$/;"	p	class:Solis_Wets_Base	access:public	signature:(Individual &)
Solis_Wets_Base::search_frequency	ls.h	/^      Real search_frequency;$/;"	m	class:Solis_Wets_Base	access:protected
Solis_Wets_Base::size	ls.h	/^      unsigned int size, max_its, max_successes, max_failures;$/;"	m	class:Solis_Wets_Base	access:protected
Solis_Wets_Base::terminate	ls.h	/^      virtual int terminate(void);$/;"	p	class:Solis_Wets_Base	access:public	signature:(void)
Solis_Wets_Base::terminate	ls.h	/^inline int Solis_Wets_Base::terminate(void)$/;"	f	class:Solis_Wets_Base	signature:(void)
Solis_Wets_Base::~Solis_Wets_Base	ls.h	/^      virtual ~Solis_Wets_Base(void);$/;"	p	class:Solis_Wets_Base	access:public	signature:(void)
Solis_Wets_Base::~Solis_Wets_Base	ls.h	/^inline Solis_Wets_Base::~Solis_Wets_Base(void)$/;"	f	class:Solis_Wets_Base	signature:(void)
SqAng_to_index	constants.h	300;"	d
SqAng_to_index_Int	constants.h	302;"	d
SqAng_to_index_NBC2	constants.h	301;"	d
State	structs.h	/^} State;$/;"	t	typeref:struct:state
Statistics	structs.h	/^} Statistics;$/;"	t	typeref:struct:statistics
Subtract_vectors	constants.h	507;"	d
T	structs.h	/^  Coord T;			\/* coordinates of center of molecule *\/$/;"	m	struct:state	access:public
T0K	constants.h	/^const Real T0K = 273.15;     \/\/ 0 degrees Celsius, in K$/;"	v
TEMP	conformation_sampler.cc	36;"	d	file:
TIMESYS	timesys.h	29;"	d
TIMESYSHMS	timesyshms.h	29;"	d
TINYDELTA	constants.h	196;"	d
TINYDELTA	initautodock.cc	38;"	d	file:
TK	constants.h	/^const Real TK = 298.15;      \/\/ Room temperature, in K$/;"	v
TORBARMAX	constants.h	127;"	d
TORNORVEC	torNorVec.h	29;"	d
TORSION	torsion.h	28;"	d
TOR_ANG_STEP	conformation_sampler.cc	44;"	d	file:
TOR_ARG_LIST	constants.h	134;"	d
TRAN_STEP	conformation_sampler.cc	42;"	d	file:
TRILINTERP	trilinterp.h	28;"	d
TRJ_CYCLE	trjtokens.h	48;"	d
TRJ_NTOR	trjtokens.h	46;"	d
TRJ_NULL	trjtokens.h	45;"	d
TRJ_RUN	trjtokens.h	47;"	d
TRJ_STATE	trjtokens.h	49;"	d
TRJ_TEMP	trjtokens.h	50;"	d
TRUE	autocomm.h	62;"	d
TWOPI	autocomm.h	65;"	d
TYPE1	constants.h	191;"	d
TYPE2	constants.h	192;"	d
T_BASE	rep.h	/^enum RepType { T_BASE, T_IntV, T_RealV, T_CRealV, T_BitV, T_Orientation };$/;"	e	enum:RepType
T_BitV	rep.h	/^enum RepType { T_BASE, T_IntV, T_RealV, T_CRealV, T_BitV, T_Orientation };$/;"	e	enum:RepType
T_CRealV	rep.h	/^enum RepType { T_BASE, T_IntV, T_RealV, T_CRealV, T_BitV, T_Orientation };$/;"	e	enum:RepType
T_IntV	rep.h	/^enum RepType { T_BASE, T_IntV, T_RealV, T_CRealV, T_BitV, T_Orientation };$/;"	e	enum:RepType
T_Orientation	rep.h	/^enum RepType { T_BASE, T_IntV, T_RealV, T_CRealV, T_BitV, T_Orientation };$/;"	e	enum:RepType
T_RealV	rep.h	/^enum RepType { T_BASE, T_IntV, T_RealV, T_CRealV, T_BitV, T_Orientation };$/;"	e	enum:RepType
Torsion	structs.h	/^} Torsion;$/;"	t	typeref:struct:torsion
Tournament	gs.h	/^enum Selection_Mode { Proportional=0, LinearRanking=1, Tournament=2, Boltzmann=3 };$/;"	e	enum:Selection_Mode
TwoPt	gs.h	/^enum Xover_Mode { TwoPt=0, OnePt=1, Uniform=2, Arithmetic=3, Branch=4 };$/;"	e	enum:Xover_Mode
U	constants.h	70;"	d
UNBOUND	main.h	63;"	d
UNBOUND_CALCULATION	constants.h	521;"	d
UNKNOWN	autocomm.h	118;"	d
UPPER	constants.h	83;"	d
USAGE	usage.h	28;"	d
US_TorE	eval.h	/^      unsigned short *US_TorE, (*US_torProfile)[NTORDIVS];$/;"	m	class:Eval	access:private
US_torProfile	eval.h	/^      unsigned short *US_TorE, (*US_torProfile)[NTORDIVS];$/;"	m	class:Eval	access:private
Unbound_Default	constants.h	/^enum Unbound_Model { Unbound_Default=0, Unbound_Same_As_Bound=1, Extended=2, Compact=3, User=4 };$/;"	e	enum:Unbound_Model
Unbound_Model	constants.h	/^enum Unbound_Model { Unbound_Default=0, Unbound_Same_As_Bound=1, Extended=2, Compact=3, User=4 };$/;"	g
Unbound_Same_As_Bound	constants.h	/^enum Unbound_Model { Unbound_Default=0, Unbound_Same_As_Bound=1, Extended=2, Compact=3, User=4 };$/;"	e	enum:Unbound_Model
UnderLine	autocomm.h	125;"	d
Uniform	gs.h	/^enum Xover_Mode { TwoPt=0, OnePt=1, Uniform=2, Arithmetic=3, Branch=4 };$/;"	e	enum:Xover_Mode
UnsignedFourByteLong	structs.h	/^typedef unsigned int UnsignedFourByteLong;$/;"	t
UnsignedFourByteLong	structs.h	/^typedef unsigned long UnsignedFourByteLong;$/;"	t
UnsignedFourByteLong	test_times.cc	/^    typedef unsigned int UnsignedFourByteLong;$/;"	t	file:
UnsignedFourByteLong	test_times.cc	/^    typedef unsigned long UnsignedFourByteLong;$/;"	t	file:
UnsignedFourByteLong	typedefs.h	/^    typedef unsigned int UnsignedFourByteLong;$/;"	t
UnsignedFourByteLong	typedefs.h	/^    typedef unsigned long UnsignedFourByteLong;$/;"	t
User	constants.h	/^enum Unbound_Model { Unbound_Default=0, Unbound_Same_As_Bound=1, Extended=2, Compact=3, User=4 };$/;"	e	enum:Unbound_Model
V	constants.h	71;"	d
VECLENMAX	autocomm.h	107;"	d
VERBOSE	conformation_sampler.cc	33;"	d	file:
VERSION	Makefile	/^VERSION = 0.2$/;"	m
Vconf	conformation_sampler.cc	39;"	d	file:
Vector	structs.h	/^typedef double Vector [3];  \/\/ for vectors and points$/;"	t
Velocity	structs.h	/^} Velocity;$/;"	t	typeref:struct:velocity
Vmax	main.cc	/^double Vmin[D_max], Vmax[D_max]; \/\/ Intervals defining the search space$/;"	v
Vmin	main.cc	/^double Vmin[D_max], Vmax[D_max]; \/\/ Intervals defining the search space$/;"	v
W	constants.h	72;"	d
WANT_BIGSTACK_FALSE	Makefile	/^WANT_BIGSTACK_FALSE = $/;"	m
WANT_BIGSTACK_TRUE	Makefile	/^WANT_BIGSTACK_TRUE = #$/;"	m
WARN_BAD_FILE	warn_bad_file.h	28;"	d
WEEDBONDS	weedbonds.h	28;"	d
WORDLEN	constants.h	93;"	d
Worst_Mode	gs.h	/^enum Worst_Mode { AverageOfN, OfN, Ever };$/;"	g
WrpDeg	constants.h	260;"	d
WrpModRad	constants.h	263;"	d
WrpRad	constants.h	261;"	d
X	autocomm.h	68;"	d
XX	mdist.h	/^enum {C=0,N=1,O=2,H=3,XX=4,P=5,S=6};  \/\/ see "bond_index" in the "AD4.1_bound.dat" or "AD4_parameters.dat" file.$/;"	e	enum:__anon1
XYZ	autocomm.h	71;"	d
X_ROTATION_INDEX	rep_constants.h	42;"	d
X_TRANSLATION_INDEX	rep_constants.h	31;"	d
Xa1	com.cc	/^FourByteLong Xm1,Xm2,Xa1,Xa2,Xcg1[32],Xcg2[32],Xa1w,Xa2w,Xig1[32],Xig2[32],Xlg1[32],$/;"	v
Xa1vw	com.cc	/^    Xlg2[32],Xa1vw,Xa2vw;$/;"	v
Xa1w	com.cc	/^FourByteLong Xm1,Xm2,Xa1,Xa2,Xcg1[32],Xcg2[32],Xa1w,Xa2w,Xig1[32],Xig2[32],Xlg1[32],$/;"	v
Xa2	com.cc	/^FourByteLong Xm1,Xm2,Xa1,Xa2,Xcg1[32],Xcg2[32],Xa1w,Xa2w,Xig1[32],Xig2[32],Xlg1[32],$/;"	v
Xa2vw	com.cc	/^    Xlg2[32],Xa1vw,Xa2vw;$/;"	v
Xa2w	com.cc	/^FourByteLong Xm1,Xm2,Xa1,Xa2,Xcg1[32],Xcg2[32],Xa1w,Xa2w,Xig1[32],Xig2[32],Xlg1[32],$/;"	v
Xcg1	com.cc	/^FourByteLong Xm1,Xm2,Xa1,Xa2,Xcg1[32],Xcg2[32],Xa1w,Xa2w,Xig1[32],Xig2[32],Xlg1[32],$/;"	v
Xcg2	com.cc	/^FourByteLong Xm1,Xm2,Xa1,Xa2,Xcg1[32],Xcg2[32],Xa1w,Xa2w,Xig1[32],Xig2[32],Xlg1[32],$/;"	v
Xig1	com.cc	/^FourByteLong Xm1,Xm2,Xa1,Xa2,Xcg1[32],Xcg2[32],Xa1w,Xa2w,Xig1[32],Xig2[32],Xlg1[32],$/;"	v
Xig2	com.cc	/^FourByteLong Xm1,Xm2,Xa1,Xa2,Xcg1[32],Xcg2[32],Xa1w,Xa2w,Xig1[32],Xig2[32],Xlg1[32],$/;"	v
Xlg1	com.cc	/^FourByteLong Xm1,Xm2,Xa1,Xa2,Xcg1[32],Xcg2[32],Xa1w,Xa2w,Xig1[32],Xig2[32],Xlg1[32],$/;"	v
Xlg2	com.cc	/^    Xlg2[32],Xa1vw,Xa2vw;$/;"	v
Xm1	com.cc	/^FourByteLong Xm1,Xm2,Xa1,Xa2,Xcg1[32],Xcg2[32],Xa1w,Xa2w,Xig1[32],Xig2[32],Xlg1[32],$/;"	v
Xm2	com.cc	/^FourByteLong Xm1,Xm2,Xa1,Xa2,Xcg1[32],Xcg2[32],Xa1w,Xa2w,Xig1[32],Xig2[32],Xlg1[32],$/;"	v
Xover_Mode	gs.h	/^enum Xover_Mode { TwoPt=0, OnePt=1, Uniform=2, Arithmetic=3, Branch=4 };$/;"	g
Xqanti	com.cc	/^FourByteLong Xqanti[32];$/;"	v
Y	autocomm.h	69;"	d
Y_ROTATION_INDEX	rep_constants.h	43;"	d
Y_TRANSLATION_INDEX	rep_constants.h	32;"	d
Z	autocomm.h	70;"	d
Z_ROTATION_INDEX	rep_constants.h	44;"	d
Z_TRANSLATION_INDEX	rep_constants.h	33;"	d
_APM_PROTOTYPES	atom_parameter_manager.h	29;"	d
_AUTOCOMM	autocomm.h	30;"	d
_AUTOGLOBAL	autoglobal.h	28;"	d
_CALL_CPSO	call_cpso.h	2;"	d
_CALL_GLSS	call_glss.h	28;"	d
_CALL_GS	call_gs.h	28;"	d
_CALL_LS	call_ls.h	28;"	d
_CONFORMATION_SAMPLER_H	conformation_sampler.h	36;"	d
_CONST_INT	constants.h	399;"	d
_DISTDEPDIEL	distdepdiel.h	28;"	d
_EINTCALPRINT	eintcalPrint.h	28;"	d
_EVAL_H	eval.h	33;"	d
_GENCAU	gencau.h	28;"	d
_GLOBAL_SEARCH_H	gs.h	34;"	d
_LOCAL_SEARCH_H	ls.h	38;"	d
_PARAMETERS_H	parameters.h	28;"	d
_PARSETYPES	parsetypes.h	28;"	d
_PDB_FORMATS	constants.h	407;"	d
_RANLIB_H	ranlib.h	30;"	d
_READ_PARAMETER_LIBRARY	read_parameter_library.h	28;"	d
_REP_CONSTANTS	rep_constants.h	28;"	d
_REP_H	rep.h	40;"	d
_STACK_	stack.h	2;"	d
_STRUCTS_H	structs.h	28;"	d
_SUPPORT_H	support.h	142;"	d
_TYPEDEFS_H	typedefs.h	28;"	d
_UNBOUND_MODEL	constants.h	525;"	d
_WRITEPDBQT	writePDBQT.h	28;"	d
__THERMODYNAMIC_CONSTANTS__	constants.h	472;"	d
__anon2::bit	rep.h	/^   unsigned char bit;$/;"	m	union:__anon2
__anon2::integer	rep.h	/^   FourByteLong integer;$/;"	m	union:__anon2
__anon2::real	rep.h	/^   double real;$/;"	m	union:__anon2
__anon3::base	stack.h	/^    int *base;$/;"	m	struct:__anon3	access:public
__anon3::size	stack.h	/^    int size;$/;"	m	struct:__anon3	access:public
__anon3::top	stack.h	/^    int top;$/;"	m	struct:__anon3	access:public
__anon3::trace	stack.h	/^    FILE *trace;$/;"	m	struct:__anon3	access:public
__anon4::index	support.h	/^   unsigned int index;$/;"	m	struct:__anon4	access:public
__anon4::vector	support.h	/^   unsigned int vector;$/;"	m	struct:__anon4	access:public
__anon5::elements	typedefs.h	/^	float		 elements[4];$/;"	m	union:__anon5
__anon5::vec	typedefs.h	/^	vector float vec;$/;"	m	union:__anon5
__coliny_h	coliny.h	34;"	d
__init__	Tests/DlgParser.py	/^    def __init__(self, dlgFile=None):$/;"	m	class:DlgParser	access:public
a1	structs.h	/^    int a1;           \/\/ ATM1$/;"	m	struct:nonbond_param	access:public
a2	structs.h	/^    int a2;           \/\/ ATM2$/;"	m	struct:nonbond_param	access:public
a_range_reduction	qmultiply.cc	/^Real a_range_reduction( Real a )$/;"	f	signature:( Real a )
a_range_reduction	qmultiply.h	/^Real a_range_reduction( Real a );$/;"	p	signature:( Real a )
abs_charge	eval.h	/^      Real *charge, *abs_charge, *qsp_abs_charge;$/;"	m	class:Eval	access:private
abs_charge	structs.h	/^    double abs_charge;$/;"	m	struct:chargestruct	access:public
abs_charge	structs.h	/^  double    abs_charge;$/;"	m	struct:atom	access:public
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_RANLIB	Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_STRIP	Makefile	/^ac_ct_STRIP = $/;"	m
ad4_unbound_model	autoglobal.h	/^Unbound_Model ad4_unbound_model = Unbound_Default;$/;"	v
ad_fopen	openfile.cc	/^FILE *ad_fopen(const char *path, const char *mode)$/;"	f	signature:(const char *path, const char *mode)
ad_fopen	openfile.h	/^FILE *ad_fopen(const char *path, const char *mode);$/;"	p	signature:(const char *path, const char *mode)
advnst	com.cc	/^void advnst(FourByteLong k)$/;"	f	signature:(FourByteLong k)
advnst	ranlib.h	/^extern void advnst(FourByteLong k);$/;"	p	signature:(FourByteLong k)
age	support.h	/^      unsigned long age;	\/* age of this individual; gmm, 1998-07-10 *\/$/;"	m	class:Individual	access:public
alea	alea.cc	/^double alea( double a, double b)$/;"	f	signature:( double a, double b)
alea	alea.h	/^double alea( double a, double b);$/;"	p	signature:( double a, double b)
alea_integer	alea.cc	/^int alea_integer(int a, int b)$/;"	f	signature:(int a, int b)
alea_integer	alea.h	/^int alea_integer(int a, int b);$/;"	p	signature:(int a, int b)
alerp	qmultiply.cc	/^Real alerp( Real a, Real b, Real fract )$/;"	f	signature:( Real a, Real b, Real fract )
alerp	qmultiply.h	/^Real alerp( Real a, Real b, Real fract );$/;"	p	signature:( Real a, Real b, Real fract )
alloc	gs.h	/^ 	  Real *alloc;$/;"	m	class:Genetic_Algorithm	access:private
alpha	gs.h	/^      Real alpha;$/;"	m	class:Genetic_Algorithm	access:private
am__CONFIG_DISTCLEAN_FILES	Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.ac$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__fastdepCC_FALSE	Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_TRUE	Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCXX_FALSE	Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_TRUE	Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)"$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__remove_distdir	Makefile	/^am__remove_distdir = \\$/;"	m
am__tar	Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__untar	Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am_covalentDock_OBJECTS	Makefile	/^am_covalentDock_OBJECTS = main.$(OBJEXT)$/;"	m
am_libad_a_OBJECTS	Makefile	/^am_libad_a_OBJECTS = alea.$(OBJEXT) analysis.$(OBJEXT) \\$/;"	m
analysis	analysis.cc	/^void analysis( int   Nnb, $/;"	f	signature:( int Nnb, char atomstuff[MAX_ATOMS][MAX_CHARS], Real charge[MAX_ATOMS], Real abs_charge[MAX_ATOMS], Real qsp_abs_charge[MAX_ATOMS], Boole B_calcIntElec, Real clus_rms_tol, Real crdpdb[MAX_ATOMS][SPACE], const EnergyTables *ptr_ad_energy_tables, Real map[MAX_GRID_PTS][MAX_GRID_PTS][MAX_GRID_PTS][MAX_MAPS], Real econf[MAX_RUNS], int irunmax, int natom, NonbondParam *nonbondlist, int nconf, int ntor, State hist[MAX_RUNS], char *smFileName, Real sml_center[SPACE], Boole B_symmetry_flag, int tlist[MAX_TORS][MAX_ATOMS], int type[MAX_ATOMS], Real vt[MAX_TORS][SPACE], char *FN_rms_ref_crds, Real torsFreeEnergy, Boole B_write_all_clusmem, int ligand_is_inhibitor, int outlev, int ignore_inter[MAX_ATOMS], const Boole B_include_1_4_interactions, const Real scale_1_4, const Real unbound_internal_FE, GridMapSetInfo *info, Boole B_use_non_bond_cutoff, Boole B_have_flexible_residues, Boole B_rms_atoms_ligand_only, Unbound_Model ad4_unbound_model )
analysis	analysis.h	/^void  analysis( int   Nnb, $/;"	p	signature:( int Nnb, char atomstuff[MAX_ATOMS][MAX_CHARS], Real charge[MAX_ATOMS], Real abs_charge[MAX_ATOMS], Real qsp_abs_charge[MAX_ATOMS], Boole B_calcIntElec, Real clus_rms_tol, Real crdpdb[MAX_ATOMS][SPACE], const EnergyTables *ptr_ad_energy_tables, Real econf[MAX_RUNS], int irunmax, int natom, NonbondParam *nonbondlist, int nconf, int ntor, State hist[MAX_RUNS], char *smFileName, Real sml_center[SPACE], Boole B_symmetry_flag, int tlist[MAX_TORS][MAX_ATOMS], int type[MAX_ATOMS], Real vt[MAX_TORS][SPACE], char *rms_ref_crds, Real torsFreeEnergy, Boole B_write_all_clusmem, int ligand_is_inhibitor, int outlev, int ignore_inter[MAX_ATOMS], const Boole B_include_1_4_interactions, const Real scale_1_4, const Real unbound_internal_FE, GridMapSetInfo *info, Boole B_use_non_bond_cutoff, Boole B_have_flexible_residues, Boole B_rms_atoms_ligand_only, Unbound_Model ad4_unbound_model )
ang	structs.h	/^  double ang;			\/* angle of rotation about unit-vector *\/$/;"	m	struct:quat	access:public
angle	structs.h	/^    double angle;$/;"	m	struct:axisangle	access:public
apm_enter	atom_parameter_manager.cc	/^apm_enter(const char key[], PE value) {$/;"	f	signature:(const char key[], PE value)
apm_enter	atom_parameter_manager.h	/^void apm_enter(const char key[], ParameterEntry value);$/;"	p	signature:(const char key[], ParameterEntry value)
apm_find	atom_parameter_manager.cc	/^apm_find(const char key[]) {$/;"	f	signature:(const char key[])
apm_find	atom_parameter_manager.h	/^ParameterEntry * apm_find(const char key[]);$/;"	p	signature:(const char key[])
app_graphics_render	main.cc	/^void app_graphics_render(int xs, int ys, double time_of_day) {}$/;"	f	signature:(int xs, int ys, double time_of_day)
app_graphics_reread_prefs	main.cc	/^void app_graphics_reread_prefs(){}$/;"	f	signature:()
arithmetic_mean	constants.h	272;"	d
assertQuatOK	autocomm.h	206;"	d
atm	structs.h	/^  Atom atm[MAX_ATOMS];		\/* Atom data *\/$/;"	m	struct:group	access:public
atom	structs.h	/^typedef struct atom$/;"	s
atom1	structs.h	/^  Atom *atom1;			\/* pointer to one atom in pair *\/$/;"	m	struct:pair_id	access:public
atom1	structs.h	/^  Atom *atom1;$/;"	m	struct:bond	access:public
atom2	structs.h	/^  Atom *atom2;			\/* pointer to other atom *\/$/;"	m	struct:pair_id	access:public
atom2	structs.h	/^  Atom *atom2;$/;"	m	struct:bond	access:public
atom::abs_charge	structs.h	/^  double    abs_charge;$/;"	m	struct:atom	access:public
atom::charge	structs.h	/^  double    charge;$/;"	m	struct:atom	access:public
atom::coords	structs.h	/^  double    coords[3];			    \/* transformed coordinates *\/$/;"	m	struct:atom	access:public
atom::crdpdb	structs.h	/^  double    crdpdb[3];			    \/* input PDB coordintates *\/$/;"	m	struct:atom	access:public
atom::crdreo	structs.h	/^  double    crdreo[3];			    \/* reoriented coordintates *\/$/;"	m	struct:atom	access:public
atom::has_charge	structs.h	/^  Boole     has_charge;			    \/* TRUE if the atom has a charge *\/$/;"	m	struct:atom	access:public
atom::is_hydrogen	structs.h	/^  Boole     is_hydrogen;		    \/* TRUE if atom is a hydrogen *\/$/;"	m	struct:atom	access:public
atom::name	structs.h	/^  char      name[5];			    \/* PDB atom name; formerly "pdbaname" *\/$/;"	m	struct:atom	access:public
atom::nnb	structs.h	/^  int       nnb;			        \/* number of non-bonds for this atom *\/$/;"	m	struct:atom	access:public
atom::qsp_abs_charge	structs.h	/^  double    qsp_abs_charge;$/;"	m	struct:atom	access:public
atom::serial	structs.h	/^  int       serial;			        \/* serial ID *\/$/;"	m	struct:atom	access:public
atom::stuff	structs.h	/^  char      stuff[MAX_CHARS];       \/* PDB atom string; formerly "atomstuff" *\/$/;"	m	struct:atom	access:public
atom::type	structs.h	/^  int       type;			        \/* atom type as integer *\/$/;"	m	struct:atom	access:public
atom::type_string	structs.h	/^  char      type_string[MAX_CHARS]; \/* atom type as string *\/$/;"	m	struct:atom	access:public
atomC1	molstruct.h	/^	int   atomC1;$/;"	m	struct:molecule	access:public
atomC2	molstruct.h	/^	int   atomC2;$/;"	m	struct:molecule	access:public
atomFirst	globals.h	/^Atom *atomFirst = NULL;$/;"	v
atomLast	globals.h	/^Atom *atomLast = NULL;$/;"	v
atomTemp	globals.h	/^Atom *atomTemp = NULL;$/;"	v
atom_type_name	grid.h	/^    char            atom_type_name[MAX_MAPS][3]; \/\/ array of atom type names, corresponding to the grids$/;"	m	struct:grid_map_set_info	access:public
atomstr	structs.h	/^  char atomstr[MAX_ATOMS][MAX_CHARS];	\/* strings describing atoms, from PDB file, cols,1-30. *\/$/;"	m	struct:molecule	access:public
atomstuff	molstruct.h	/^	char  atomstuff[ MAX_ATOMS ][ MAX_CHARS ];$/;"	m	struct:molecule	access:public
autogrid_type	parameters.h	/^  char autogrid_type[MAX_LEN_AUTOGRID_TYPE + 1];	\/* autogrid_type is a string based on babel_types assigned by PyBabel *\/$/;"	m	struct:parameter_entry	access:public
average_favorable_energy	conformation_sampler.cc	/^Real ConformationSampler::average_favorable_energy(void) {$/;"	f	class:ConformationSampler	signature:(void)
average_favorable_energy	conformation_sampler.h	/^		Real average_favorable_energy(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
avg	gs.h	/^      double worst, avg;$/;"	m	class:Genetic_Algorithm	access:private
avg_in_window	gs.cc	/^double avg_in_window(double *window, int size)$/;"	f	signature:(double *window, int size)
axis	structs.h	/^    Axis axis;$/;"	m	struct:axisangle	access:public
axis	structs.h	/^typedef struct axis$/;"	s
axis::v	structs.h	/^    double v[3];$/;"	m	struct:axis	access:public
axisDegreeToQuat	qmultiply.cc	/^Quat axisDegreeToQuat( const Real ax, const Real ay, const Real az, const Real angle )$/;"	f	signature:( const Real ax, const Real ay, const Real az, const Real angle )
axisDegreeToQuat	qmultiply.h	/^Quat axisDegreeToQuat( const Real ax, const Real ay, const Real az, const Real angle );$/;"	p	signature:( const Real ax, const Real ay, const Real az, const Real angle )
axisRadianToQuat	qmultiply.cc	/^Quat axisRadianToQuat( const Real ax, const Real ay, const Real az, const Real angle )$/;"	f	signature:( const Real ax, const Real ay, const Real az, const Real angle )
axisRadianToQuat	qmultiply.h	/^Quat axisRadianToQuat( const Real ax, const Real ay, const Real az, const Real angle );$/;"	p	signature:( const Real ax, const Real ay, const Real az, const Real angle )
axisangle	structs.h	/^typedef struct axisangle$/;"	s
axisangle::angle	structs.h	/^    double angle;$/;"	m	struct:axisangle	access:public
axisangle::axis	structs.h	/^    Axis axis;$/;"	m	struct:axisangle	access:public
banner	banner.cc	/^void banner( const char * version_num )$/;"	f	signature:( const char * version_num )
banner	banner.h	/^void banner( const char * version_num );$/;"	p	signature:( const char * version_num )
base	stack.h	/^    int *base;$/;"	m	struct:__anon3	access:public
base_axis_angle	conformation_sampler.h	/^		Real base_axis_angle[4];$/;"	m	class:ConformationSampler	access:public
base_crd	conformation_sampler.h	/^		Real base_crd[MAX_ATOMS][SPACE]; \/\/probe_crd?;$/;"	m	class:ConformationSampler	access:public
base_energy	conformation_sampler.h	/^		Real base_energy, total_energy, total_favorable_energy;$/;"	m	class:ConformationSampler	access:public
base_ind	conformation_sampler.h	/^		Individual base_ind, probe_ind;$/;"	m	class:ConformationSampler	access:public
base_point	conformation_sampler.h	/^		Phenotype base_point, probe_point;$/;"	m	class:ConformationSampler	access:public
base_q	conformation_sampler.h	/^        Quat base_q;$/;"	m	class:ConformationSampler	access:public
base_state	conformation_sampler.h	/^		State base_state, probe_state;$/;"	m	class:ConformationSampler	access:public
bestpdb	bestpdb.cc	/^void bestpdb( int ncluster, $/;"	f	signature:( int ncluster, int num_in_clu[MAX_RUNS], int cluster[MAX_RUNS][MAX_RUNS], Real econf[MAX_RUNS], Real crd[MAX_RUNS][MAX_ATOMS][SPACE], char atomstuff[MAX_ATOMS][MAX_CHARS], int natom, Boole B_write_all_clusmem, Real ref_rms[MAX_RUNS])
bestpdb	bestpdb.h	/^void  bestpdb( int   ncluster, $/;"	p	signature:( int ncluster, int num_in_clu[MAX_RUNS], int cluster[MAX_RUNS][MAX_RUNS], Real econf[MAX_RUNS], Real crd[MAX_RUNS][MAX_ATOMS][SPACE], char atomstuff[MAX_ATOMS][MAX_CHARS], int natom, Boole B_write_all_clusmem, Real ref_rms[MAX_RUNS])
beta	gs.h	/^	  Real beta;$/;"	m	class:Genetic_Algorithm	access:private
bias	ls.h	/^      Real *deviates, *bias;$/;"	m	class:Solis_Wets_Base	access:protected
binPROGRAMS_INSTALL	Makefile	/^binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)$/;"	m
bin_Boltzmann_sum	conformation_sampler.h	/^		Real bin_Boltzmann_sum[NUM_BINS];$/;"	m	class:ConformationSampler	access:public
bin_PROGRAMS	Makefile	/^bin_PROGRAMS = covalentDock$(EXEEXT)$/;"	m
bin_count	conformation_sampler.h	/^		int bin_count[NUM_BINS];$/;"	m	class:ConformationSampler	access:public
bin_count_favorable	conformation_sampler.h	/^		int bin_count_favorable[NUM_BINS];$/;"	m	class:ConformationSampler	access:public
bin_max_energy	conformation_sampler.h	/^		Real bin_max_energy[NUM_BINS];$/;"	m	class:ConformationSampler	access:public
bin_min_energy	conformation_sampler.h	/^		Real bin_min_energy[NUM_BINS];$/;"	m	class:ConformationSampler	access:public
bin_total_energy	conformation_sampler.h	/^		Real bin_total_energy[NUM_BINS];$/;"	m	class:ConformationSampler	access:public
bin_total_favorable_energy	conformation_sampler.h	/^		Real bin_total_favorable_energy[NUM_BINS];$/;"	m	class:ConformationSampler	access:public
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bit	rep.h	/^   unsigned char bit;$/;"	m	union:__anon2
boinc_app_key_press	main.cc	/^void boinc_app_key_press(int wParam, int lParam){}$/;"	f	signature:(int wParam, int lParam)
boinc_app_key_release	main.cc	/^void boinc_app_key_release(int wParam, int lParam){}$/;"	f	signature:(int wParam, int lParam)
boinc_app_mouse_button	main.cc	/^void boinc_app_mouse_button(int x, int y, int which, bool is_down){}$/;"	f	signature:(int x, int y, int which, bool is_down)
boinc_app_mouse_move	main.cc	/^void boinc_app_mouse_move(int x, int y, bool left, bool middle, bool right ){}$/;"	f	signature:(int x, int y, bool left, bool middle, bool right )
bond	structs.h	/^  PairID bond;			\/* two atoms defining distance constraint *\/$/;"	m	struct:dist_constraint	access:public
bond	structs.h	/^typedef struct bond$/;"	s
bond::atom1	structs.h	/^  Atom *atom1;$/;"	m	struct:bond	access:public
bond::atom2	structs.h	/^  Atom *atom2;$/;"	m	struct:bond	access:public
bond::bondLength	structs.h	/^  double bondLength;$/;"	m	struct:bond	access:public
bond::bondVector	structs.h	/^  Coord bondVector;$/;"	m	struct:bond	access:public
bondLength	structs.h	/^  double bondLength;$/;"	m	struct:bond	access:public
bondVector	structs.h	/^  Coord bondVector;$/;"	m	struct:bond	access:public
bond_index	parameters.h	/^  int bond_index;		\/* used to set up bonds; corresponds to the enum in mdist.h *\/$/;"	m	struct:parameter_entry	access:public
build	Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build_alias	Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = x86_64$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_vendor	Makefile	/^build_vendor = unknown$/;"	m
c_mode	gs.h	/^      Xover_Mode c_mode;$/;"	m	class:Genetic_Algorithm	access:private
c_rate	gs.h	/^	  Real c_rate;$/;"	m	class:Genetic_Algorithm	access:private
calc_ddd_Mehler_Solmajer	distdepdiel.cc	/^double calc_ddd_Mehler_Solmajer( double distance, double approx_zero ) {$/;"	f	signature:( double distance, double approx_zero )
calc_ddd_Mehler_Solmajer	distdepdiel.h	/^double calc_ddd_Mehler_Solmajer( double distance, double aprrox_zero );$/;"	p	signature:( double distance, double aprrox_zero )
calculateBindingEnergies	calculateEnergies.cc	/^EnergyBreakdown calculateBindingEnergies($/;"	f	signature:( int natom, int ntor, Real unbound_internal_FE, Real torsFreeEnergy, Boole B_have_flexible_residues, const Real tcoord[MAX_ATOMS][SPACE], CONST_FLOAT charge[MAX_ATOMS], CONST_FLOAT abs_charge[MAX_ATOMS], CONST_INT type[MAX_ATOMS], GridMapSetInfo *info, int B_outside, int ignore_inter[MAX_ATOMS], Real elec[MAX_ATOMS], Real emap[MAX_ATOMS], Real *p_elec_total, Real *p_emap_total, NonbondParam * const nonbondlist, const EnergyTables *ptr_ad_energy_tables, const int Nnb, const Boole B_calcIntElec, const Boole B_include_1_4_interactions, const Real scale_1_4, const Real qsp_abs_charge[MAX_ATOMS], const Boole B_use_non_bond_cutoff, Unbound_Model ad4_unbound_model )
calculateBindingEnergies	calculateEnergies.h	/^EnergyBreakdown calculateBindingEnergies($/;"	p	signature:( int natom, int ntor, Real unbound_internal_FE, Real torsFreeEnergy, Boole B_have_flexible_residues, const Real tcoord[MAX_ATOMS][SPACE], CONST_FLOAT charge[MAX_ATOMS], CONST_FLOAT abs_charge[MAX_ATOMS], CONST_INT type[MAX_ATOMS], GridMapSetInfo *info, int B_outside, int ignore_inter[MAX_ATOMS], Real elec[MAX_ATOMS], Real emap[MAX_ATOMS], Real *p_elec_total, Real *p_emap_total, NonbondParam * const nonbondlist, const EnergyTables *ptr_ad_energy_tables, const int Nnb, const Boole B_calcIntElec, const Boole B_include_1_4_interactions, const Real scale_1_4, const Real qsp_abs_charge[MAX_ATOMS], const Boole B_use_non_bond_cutoff, Unbound_Model ad4_unbound_model )
calculateEnergies	calculateEnergies.cc	/^EnergyBreakdown calculateEnergies($/;"	f	signature:( int natom, int ntor, Real unbound_internal_FE, Real torsFreeEnergy, Boole B_have_flexible_residues, const Real tcoord[MAX_ATOMS][SPACE], CONST_FLOAT charge[MAX_ATOMS], CONST_FLOAT abs_charge[MAX_ATOMS], CONST_INT type[MAX_ATOMS], GridMapSetInfo *info, int B_outside, int ignore_inter[MAX_ATOMS], Real elec[MAX_ATOMS], Real emap[MAX_ATOMS], Real *p_elec_total, Real *p_emap_total, NonbondParam * const nonbondlist, const EnergyTables *ptr_ad_energy_tables, const int Nnb, const Boole B_calcIntElec, const Boole B_include_1_4_interactions, const Real scale_1_4, const Real qsp_abs_charge[MAX_ATOMS], const Boole B_use_non_bond_cutoff )
calculateEnergies	calculateEnergies.h	/^EnergyBreakdown calculateEnergies($/;"	p	signature:( int natom, int ntor, Real unbound_internal_FE, Real torsFreeEnergy, Boole B_have_flexible_residues, const Real tcoord[MAX_ATOMS][SPACE], CONST_FLOAT charge[MAX_ATOMS], CONST_FLOAT abs_charge[MAX_ATOMS], CONST_INT type[MAX_ATOMS], GridMapSetInfo *info, int B_outside, int ignore_inter[MAX_ATOMS], Real elec[MAX_ATOMS], Real emap[MAX_ATOMS], Real *p_elec_total, Real *p_emap_total, NonbondParam * const nonbondlist, const EnergyTables *ptr_ad_energy_tables, const int Nnb, const Boole B_calcIntElec, const Boole B_include_1_4_interactions, const Real scale_1_4, const Real qsp_abs_charge[MAX_ATOMS], const Boole B_use_non_bond_cutoff, Unbound_Model ad4_unbound_model )
call_cpso	call_cpso.cc	/^State call_cpso(Local_Search * local_method, $/;"	f	signature:(Local_Search * local_method, State sInit, int n_exec, int S, int D, double *xmin, double *xmax, unsigned int num_evals, int K, double c1, double c2, int outlev)
call_cpso	hybrids.h	/^State call_cpso(Local_Search  *local_method, State sInit, int n_exec,  int S, int D, $/;"	p	signature:(Local_Search *local_method, State sInit, int n_exec, int S, int D, double *xmin, double * xmax, unsigned int num_evals, int K, double c1, double c2, int outlev)
call_glss	call_glss.cc	/^State call_glss(Global_Search *global_method, Local_Search *local_method, $/;"	f	signature:(Global_Search *global_method, Local_Search *local_method, State sInit, unsigned int num_evals, unsigned int pop_size, int outlev, unsigned int extOutputEveryNgens, Molecule *mol, Boole B_RandomTran0, Boole B_RandomQuat0, Boole B_RandomDihe0, GridMapSetInfo *info, char *FN_pop_file, int end_of_branch[MAX_TORS])
call_glss	hybrids.h	/^State call_glss(Global_Search *global_method, Local_Search *local_method, $/;"	p	signature:(Global_Search *global_method, Local_Search *local_method, State now, unsigned int num_evals, unsigned int pop_size, int outlev, unsigned int extOutputEveryNgens, Molecule *mol, Boole B_RandomTran0, Boole B_RandomQuat0, Boole B_RandomDihe0, GridMapSetInfo *info, char *FN_pop_file, int end_of_branch[MAX_TORS] )
call_glss_tors	hybrids.h	/^State call_glss_tors(Global_Search *global_method, Local_Search *local_method, $/;"	p	signature:(Global_Search *global_method, Local_Search *local_method, State now, unsigned int num_evals, unsigned int pop_size, int outlev, unsigned int extOutputEveryNgens, Molecule *mol, Boole B_RandomDihe0, GridMapSetInfo *info, char FN_pop_file[MAX_CHARS] )
call_gs	call_gs.cc	/^State call_gs(Global_Search *global_method, State now, unsigned int num_evals, unsigned int pop_size,$/;"	f	signature:(Global_Search *global_method, State now, unsigned int num_evals, unsigned int pop_size, Molecule *mol, int extOutputEveryNgens, GridMapSetInfo *info, int end_of_branch[MAX_TORS])
call_gs	hybrids.h	/^State call_gs(Global_Search *global_method, State now, unsigned int num_evals, unsigned int pop_size,$/;"	p	signature:(Global_Search *global_method, State now, unsigned int num_evals, unsigned int pop_size, Molecule *mol, int extOutputEveryNgens, GridMapSetInfo *info, int end_of_branch[MAX_TORS] )
call_ls	call_ls.cc	/^State call_ls(Local_Search *local_method, State now, unsigned int pop_size, Molecule *mol) $/;"	f	signature:(Local_Search *local_method, State now, unsigned int pop_size, Molecule *mol)
call_ls	hybrids.h	/^State call_ls(Local_Search *local_method, State now, unsigned int pop_size, Molecule *mol);$/;"	p	signature:(Local_Search *local_method, State now, unsigned int pop_size, Molecule *mol)
center	grid.h	/^    double          center[3]; \/\/ central coordinates, in Angstroms$/;"	m	struct:grid_map_set_info	access:public
cg_count	gs.h	/^      unsigned int cg_count; \/\/ statistics - crossover gene-by-gene count$/;"	m	class:Global_Search	access:public
changeState	changeState.cc	/^State  changeState( State last,      \/* ...must be a normalized quaternion! *\/$/;"	f	signature:( State last, Real trnStep, Real torStep, int ntor, Real F_TorConRange[MAX_TORS][MAX_TOR_CON][2], int N_con[MAX_TORS])
changeState	changeState.h	/^State  changeState( State last,      \/* ...must be a normalized quaternion! *\/$/;"	p	signature:( State last, Real trnStep, Real torStep, int ntor, Real F_TorConRange[MAX_TORS][MAX_TOR_CON][2], int N_con[MAX_TORS])
charge	eval.h	/^      Real *charge, *abs_charge, *qsp_abs_charge;$/;"	m	class:Eval	access:private
charge	molstruct.h	/^	double charge[ MAX_ATOMS ];$/;"	m	struct:molecule	access:public
charge	structs.h	/^    double charge;$/;"	m	struct:chargestruct	access:public
charge	structs.h	/^  double    charge;$/;"	m	struct:atom	access:public
chargestruct	structs.h	/^typedef struct chargestruct$/;"	s
chargestruct::abs_charge	structs.h	/^    double abs_charge;$/;"	m	struct:chargestruct	access:public
chargestruct::charge	structs.h	/^    double charge;$/;"	m	struct:chargestruct	access:public
chargestruct::qsp_abs_charge	structs.h	/^    double qsp_abs_charge;$/;"	m	struct:chargestruct	access:public
checkState	stateLibrary.cc	/^int checkState( const State *D )$/;"	f	signature:( const State *D )
checkState	stateLibrary.h	/^int checkState( const State *D );$/;"	p	signature:( const State *D )
check_atomnumber_ok	mkTorTree.cc	387;"	d	file:
check_header_float	check_header_float.cc	/^void check_header_float( Real f1, Real f2, char keyword[], char filename[] )$/;"	f	signature:( Real f1, Real f2, char keyword[], char filename[] )
check_header_float	check_header_float.h	/^void  check_header_float( Real f1, $/;"	p	signature:( Real f1, Real f2, char keyword[], char filename[] )
check_header_int	check_header_int.cc	/^void check_header_int( int i1, $/;"	f	signature:( int i1, int i2, char axis, char *filename )
check_header_int	check_header_int.h	/^void  check_header_int( int   i1, $/;"	p	signature:( int i1, int i2, char axis, char * filename )
check_header_line	check_header_line.cc	/^void check_header_line( char s1[], char s2[] )$/;"	f	signature:( char s1[], char s2[] )
check_header_line	check_header_line.h	/^void  check_header_line( char  s1[], $/;"	p	signature:( char s1[], char s2[])
check_sscanf	readPDBQT.cc	669;"	d	file:
check_sscanf	readPDBQT.cc	705;"	d	file:
check_table	gs.cc	/^int Genetic_Algorithm::check_table(Real prob)$/;"	f	class:Genetic_Algorithm	signature:(Real prob)
check_table	gs.h	/^      int check_table(Real);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Real)
ci_count	gs.h	/^      unsigned int ci_count; \/\/ statistics - crossover indiv-by-indiv count$/;"	m	class:Global_Search	access:public
clamp	constants.h	248;"	d
clamp_and_set_vector	rep.cc	703;"	d	file:
clamp_range	minmeanmax.cc	44;"	d	file:
clmode	clmode.cc	/^void  clmode( int   num_atm_maps,$/;"	f	signature:( int num_atm_maps, Real clus_rms_tol, char *hostnm, Clock jobStart, struct tms tms_jobStart, Boole write_all_clusmem, char *clusFN, Real crdpdb[MAX_ATOMS][SPACE], Real sml_center[SPACE], Boole symmetry_flag, char *rms_ref_crds )
clmode	clmode.h	/^void  clmode( int   num_atm_maps, $/;"	p	signature:( int num_atm_maps, Real clus_rms_tol, char hostnm[MAX_CHARS], Clock jobStart, struct tms tms_jobStart, Boole B_write_all_clusmem, char *clusFN, Real crdpdb[MAX_ATOMS][SPACE], Real sml_center[SPACE], Boole B_symmetry_flag, char *rms_ref_crds )
clone	rep.h	/^      Representation *clone(void) const;$/;"	p	class:BitVector	access:protected	signature:(void) const
clone	rep.h	/^      Representation *clone(void) const;$/;"	p	class:ConstrainedRealVector	access:protected	signature:(void) const
clone	rep.h	/^      Representation *clone(void) const;$/;"	p	class:IntVector	access:protected	signature:(void) const
clone	rep.h	/^      Representation *clone(void) const;$/;"	p	class:RealVector	access:protected	signature:(void) const
clone	rep.h	/^      virtual Representation *clone(void) const = 0;$/;"	p	class:Representation	access:public	signature:(void) const
clone	rep.h	/^inline Representation *BitVector::clone(void) const$/;"	f	class:BitVector	signature:(void) const
clone	rep.h	/^inline Representation *ConstrainedRealVector::clone(void) const$/;"	f	class:ConstrainedRealVector	signature:(void) const
clone	rep.h	/^inline Representation *IntVector::clone(void) const$/;"	f	class:IntVector	signature:(void) const
clone	rep.h	/^inline Representation *RealVector::clone(void) const$/;"	f	class:RealVector	signature:(void) const
clone	rep.h	/^inline Representation *Representation::clone(void) const$/;"	f	class:Representation	signature:(void) const
cluster_analysis	cluster_analysis.cc	/^int cluster_analysis( Real clus_rms_tol, $/;"	f	signature:( Real clus_rms_tol, int cluster[MAX_RUNS][MAX_RUNS], int num_in_clus[MAX_RUNS], int isort[MAX_RUNS], int nconf, int natom, int type[MAX_ATOMS], Real crd[MAX_RUNS][MAX_ATOMS][SPACE], Real crdpdb[MAX_ATOMS][SPACE], Real sml_center[SPACE], Real clu_rms[MAX_RUNS][MAX_RUNS], Boole B_symmetry_flag, Real ref_crds[MAX_ATOMS][SPACE], int ref_natoms, Real ref_rms[MAX_RUNS])
cluster_analysis	cluster_analysis.h	/^int  cluster_analysis( Real clus_rms_tol, $/;"	p	signature:( Real clus_rms_tol, int cluster[MAX_RUNS][MAX_RUNS], int num_in_clus[MAX_RUNS], int isort[MAX_RUNS], int nconf, int natom, int type[MAX_ATOMS], Real crd[MAX_RUNS][MAX_ATOMS][SPACE], Real crdpdb[MAX_ATOMS][SPACE], Real sml_center[SPACE], Real clu_rms[MAX_RUNS][MAX_RUNS], Boole B_symmetry_flag, Real ref_crds[MAX_ATOMS][SPACE], int ref_natoms, Real ref_rms[MAX_RUNS])
cnv_state_to_coords	cnv_state_to_coords.cc	/^void cnv_state_to_coords( const State now,$/;"	f	signature:( const State now, Real vt[MAX_TORS][SPACE], int tlist[MAX_TORS][MAX_ATOMS], const int ntor, Real crdpdb[MAX_ATOMS][SPACE], Real crd[MAX_ATOMS][SPACE], const int natom)
cnv_state_to_coords	cnv_state_to_coords.h	/^void cnv_state_to_coords( const State now,$/;"	p	signature:( const State now, Real vt[MAX_TORS][SPACE], int tlist[MAX_TORS][MAX_ATOMS], const int ntor, Real crdpdb[MAX_ATOMS][SPACE], Real crd[MAX_ATOMS][SPACE], const int natom)
cnv_state_to_ind	call_ls.cc	/^Individual cnv_state_to_ind(const State &original)$/;"	f	signature:(const State &original)
cnv_state_to_ind2	call_cpso.cc	/^Individual cnv_state_to_ind2(const State &original, int ntor)$/;"	f	signature:(const State &original, int ntor)
cnv_state_to_rep	call_ls.cc	/^Representation **cnv_state_to_rep(const State &state)$/;"	f	signature:(const State &state)
cnv_state_to_rep2	call_cpso.cc	/^Representation **cnv_state_to_rep2(const State &state)$/;"	f	signature:(const State &state)
coeff_desolv	structs.h	/^    double coeff_desolv;              \/\/ Free energy coefficient for desolvation term$/;"	m	struct:linear_FE_model	access:public
coeff_estat	structs.h	/^    double coeff_estat;               \/\/ Free energy coefficient for electrostatics term$/;"	m	struct:linear_FE_model	access:public
coeff_hbond	structs.h	/^    double coeff_hbond;               \/\/ Free energy coefficient for H-bonding term$/;"	m	struct:linear_FE_model	access:public
coeff_tors	structs.h	/^    double coeff_tors;                \/\/ Free energy coefficient for torsional term$/;"	m	struct:linear_FE_model	access:public
coeff_vdW	structs.h	/^    double coeff_vdW;                 \/\/ Free energy coefficient for van der Waals term$/;"	m	struct:linear_FE_model	access:public
coliny_init	coliny.cc	/^void coliny_init(char* algname, char* domain, int num_vars)$/;"	f	signature:(char* algname, char* domain, int num_vars)
coliny_init	coliny.cc	/^void coliny_init(char* algname, char* domain, int)$/;"	f	signature:(char* algname, char* domain, int)
coliny_init	coliny.h	/^void coliny_init(char* algname, char* domain, int num_vars);$/;"	p	signature:(char* algname, char* domain, int num_vars)
coliny_minimize	coliny.cc	/^void coliny_minimize(int seed, std::vector<double>& initpt,$/;"	f	signature:(int seed, std::vector<double>& initpt, std::vector<double>& finalpt, int& neval, int& niters)
coliny_minimize	coliny.h	/^void coliny_minimize(int seed, std::vector<double>& initpt,$/;"	p	signature:(int seed, std::vector<double>& initpt, std::vector<double>& finalpt, int& neval, int& niters)
coliny_problem	coliny.cc	/^colin::OptProblem<BasicArray<double>, colin::AppResponse_Utilib > coliny_problem;$/;"	v
coliny_problem	coliny.cc	/^colin::OptProblem<colin::NLP0_problem> coliny_problem;$/;"	v
coliny_solver	coliny.cc	/^coliny::ColinySolver<colin::OptProblem<BasicArray<double>, colin::AppResponse_Utilib > , BasicArray<double> > coliny_solver;$/;"	v
command_in_fp	autoglobal.h	/^FILE    *command_in_fp;$/;"	v
command_mode	autoglobal.h	/^int     command_mode = FALSE;$/;"	v
command_out_fp	autoglobal.h	/^FILE    *command_out_fp;$/;"	v
compute_intermol_energy	eval.h	/^      void compute_intermol_energy(Boole init_B_compute_intermol_energy); \/\/ for computing unbound state$/;"	p	class:Eval	access:public	signature:(Boole init_B_compute_intermol_energy)
compute_intermol_energy	eval.h	/^inline void Eval::compute_intermol_energy(Boole init_B_compute_intermol_energy)$/;"	f	class:Eval	signature:(Boole init_B_compute_intermol_energy)
compute_k_quantile	support.cc	/^compute_k_quantile(const int k, const int q, $/;"	f	file:	signature:(const int k, const int q, const double energy[], const int size)
configurational_integral	conformation_sampler.cc	/^Real ConformationSampler::configurational_integral(void) {$/;"	f	class:ConformationSampler	signature:(void)
configurational_integral	conformation_sampler.h	/^		Real configurational_integral(void);$/;"	p	class:ConformationSampler	access:private	signature:(void)
conjugate	qmultiply.cc	/^Quat conjugate( const Quat q )$/;"	f	signature:( const Quat q )
conjugate	qmultiply.h	/^Quat conjugate( const Quat q );$/;"	p	signature:( const Quat q )
contraction	ls.h	/^      Real expansion, contraction;$/;"	m	class:Solis_Wets_Base	access:protected
contraction	ls.h	/^      Real step_threshold, expansion, contraction;$/;"	m	class:Pattern_Search	access:protected
converged	gs.h	/^      unsigned int converged; \/\/ gmm 7-jan-98$/;"	m	class:Genetic_Algorithm	access:private
convertQuatToRot	qmultiply.cc	/^Quat convertQuatToRot( Quat q )$/;"	f	signature:( Quat q )
convertQuatToRot	qmultiply.h	/^Quat convertQuatToRot( Quat q );$/;"	p	signature:( Quat q )
convertRotToQuat	qmultiply.cc	/^Quat convertRotToQuat( Quat q )$/;"	f	signature:( Quat q )
convertRotToQuat	qmultiply.h	/^Quat convertRotToQuat( Quat q );$/;"	p	signature:( Quat q )
coord	structs.h	/^typedef struct coord$/;"	s
coord::x	structs.h	/^  double x;			\/* Cartesian x-coordinate *\/$/;"	m	struct:coord	access:public
coord::y	structs.h	/^  double y;			\/* Cartesian y-coordinate *\/$/;"	m	struct:coord	access:public
coord::z	structs.h	/^  double z;			\/* Cartesian z-coordinate *\/$/;"	m	struct:coord	access:public
coords	structs.h	/^  double    coords[3];			    \/* transformed coordinates *\/$/;"	m	struct:atom	access:public
copyDimension	dimLibrary.cc	/^void copyDimension( State *S, Position R)$/;"	f	signature:( State *S, Position R)
copyDimension	dimLibrary.h	/^void copyDimension( State *S, Position R);$/;"	p	signature:( State *S, Position R)
copyState	stateLibrary.cc	/^void copyState( State *D,  \/* Destination -- copy to here *\/$/;"	f	signature:( State *D, State S )
copyState	stateLibrary.h	/^void copyState( State *destination,$/;"	p	signature:( State *destination, State source)
copyState2Dimension	dimLibrary.cc	/^void copyState2Dimension(Position *R , State S)$/;"	f	signature:(Position *R , State S)
copyState2Dimension	dimLibrary.h	/^void copyState2Dimension( Position *R, State S);$/;"	p	signature:( Position *R, State S)
copyStateToMolecule	stateLibrary.cc	/^Molecule copyStateToMolecule(State *S, Molecule *mol) \/* S is the source *\/$/;"	f	signature:(State *S, Molecule *mol)
copyStateToMolecule	stateLibrary.h	/^Molecule copyStateToMolecule(State *source, Molecule *mol);$/;"	p	signature:(State *source, Molecule *mol)
count	ls.h	/^      unsigned int count;\/\/search invocation count, for run statistics$/;"	m	class:Local_Search	access:public
covalentDock_DEPENDENCIES	Makefile	/^covalentDock_DEPENDENCIES = libad.a$/;"	m
covalentDock_LDADD	Makefile	/^covalentDock_LDADD = libad.a $(COLINY_LDFLAGS) -lm$/;"	m
covalentDock_OBJECTS	Makefile	/^covalentDock_OBJECTS = $(am_covalentDock_OBJECTS)$/;"	m
covalentDock_SOURCES	Makefile	/^covalentDock_SOURCES = \\$/;"	m
crd	autocomm.h	/^	Real crd[XYZ];$/;"	m	struct:AtomDesc	access:public
crd	conformation_sampler.cc	/^Real crd[MAX_ATOMS][SPACE];$/;"	v
crd	eval.h	/^      Real (*crd)[SPACE], (*vt)[SPACE], (*crdpdb)[SPACE], (*crdreo)[SPACE];$/;"	m	class:Eval	access:private
crd	structs.h	/^  Real crd[MAX_ATOMS][SPACE];      	\/* current coordinates of atoms *\/$/;"	m	struct:molecule	access:public
crdpdb	conformation_sampler.cc	/^Real (*vt)[SPACE], (*crdpdb)[SPACE];$/;"	v
crdpdb	eval.h	/^      Real (*crd)[SPACE], (*vt)[SPACE], (*crdpdb)[SPACE], (*crdreo)[SPACE];$/;"	m	class:Eval	access:private
crdpdb	structs.h	/^  Real crdpdb[MAX_ATOMS][SPACE];	    \/* original coordinates of atoms *\/$/;"	m	struct:molecule	access:public
crdpdb	structs.h	/^  double    crdpdb[3];			    \/* input PDB coordintates *\/$/;"	m	struct:atom	access:public
crdreo	eval.h	/^      Real (*crd)[SPACE], (*vt)[SPACE], (*crdpdb)[SPACE], (*crdreo)[SPACE];$/;"	m	class:Eval	access:private
crdreo	structs.h	/^  double    crdreo[3];			    \/* reoriented coordintates *\/$/;"	m	struct:atom	access:public
create_random_orientation	qmultiply.cc	/^void create_random_orientation( Quat *ptr_quat ) $/;"	f	signature:( Quat *ptr_quat )
create_random_orientation	qmultiply.h	/^void create_random_orientation( Quat *ptr_quat );$/;"	p	signature:( Quat *ptr_quat )
crossover	gs.cc	/^void Genetic_Algorithm::crossover(Population &original_population)$/;"	f	class:Genetic_Algorithm	signature:(Population &original_population)
crossover	gs.h	/^      void crossover(Population &);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Population &)
crossover_2pt	gs.cc	/^void Genetic_Algorithm::crossover_2pt(Genotype &father, Genotype &mother, unsigned int pt1, unsigned int pt2)$/;"	f	class:Genetic_Algorithm	signature:(Genotype &father, Genotype &mother, unsigned int pt1, unsigned int pt2)
crossover_2pt	gs.h	/^      void crossover_2pt(Genotype &, Genotype &, unsigned int, unsigned int);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Genotype &, Genotype &, unsigned int, unsigned int)
crossover_arithmetic	gs.cc	/^void Genetic_Algorithm::crossover_arithmetic(Genotype &A, Genotype &B, Real alpha)$/;"	f	class:Genetic_Algorithm	signature:(Genotype &A, Genotype &B, Real alpha)
crossover_arithmetic	gs.h	/^      void crossover_arithmetic(Genotype &, Genotype &, Real);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Genotype &, Genotype &, Real)
crossover_uniform	gs.cc	/^void Genetic_Algorithm::crossover_uniform(Genotype &father, Genotype &mother, unsigned int num_genes)$/;"	f	class:Genetic_Algorithm	signature:(Genotype &father, Genotype &mother, unsigned int num_genes)
crossover_uniform	gs.h	/^      void crossover_uniform(Genotype &, Genotype &, unsigned int);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Genotype &, Genotype &, unsigned int)
current_energy	conformation_sampler.cc	/^Real ConformationSampler::current_energy(void) {$/;"	f	class:ConformationSampler	signature:(void)
current_energy	conformation_sampler.h	/^		Real current_energy(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
current_rmsd	conformation_sampler.cc	/^Real ConformationSampler::current_rmsd(void) {$/;"	f	class:ConformationSampler	signature:(void)
current_rmsd	conformation_sampler.h	/^		Real current_rmsd(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
current_step_size	ls.h	/^      Real step_size, current_step_size;$/;"	m	class:Pattern_Search	access:protected
datadir	Makefile	/^datadir = ${prefix}\/share$/;"	m
dc_install_base	Makefile	/^	dc_install_base=`$(am__cd) $(distdir)\/_inst && pwd | sed -e 's,^[^:\\\\\/]:[\\\\\/],\/,'` \\$/;"	m
debug	autoglobal.h	/^int     debug = 0;$/;"	v
debugQuat	qmultiply.cc	/^void debugQuat( FILE *fp, Quat q, unsigned int linenumber, char *message )$/;"	f	signature:( FILE *fp, Quat q, unsigned int linenumber, char *message )
debugQuat	qmultiply.h	/^void debugQuat( FILE *fp, Quat q, unsigned int linenumber, char *message );$/;"	p	signature:( FILE *fp, Quat q, unsigned int linenumber, char *message )
deltaG	structs.h	/^    Real deltaG;                    \/\/ estimated change in free energy upon binding$/;"	m	struct:energy_breakdown	access:public
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
desolv	structs.h	/^    double desolv;$/;"	m	struct:nonbond_param	access:public
deviates	ls.h	/^      Real *deviates, *bias;$/;"	m	class:Solis_Wets_Base	access:protected
dictionary	atom_parameter_manager.cc	/^static PE *dictionary[MAXKEY];$/;"	v	file:
dimensionality	conformation_sampler.h	/^		int dimensionality, evals, favorable_evals;$/;"	m	class:ConformationSampler	access:public
dist	autocomm.h	136;"	d
dist_constraint	structs.h	/^typedef struct dist_constraint$/;"	s
dist_constraint::bond	structs.h	/^  PairID bond;			\/* two atoms defining distance constraint *\/$/;"	m	struct:dist_constraint	access:public
dist_constraint::length	structs.h	/^  double length;		\/* current bond length *\/$/;"	m	struct:dist_constraint	access:public
dist_constraint::lower	structs.h	/^  double lower;			\/* lower bound on distance *\/$/;"	m	struct:dist_constraint	access:public
dist_constraint::upper	structs.h	/^  double upper;			\/* upper bound on distance *\/$/;"	m	struct:dist_constraint	access:public
distcleancheck_listfiles	Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distcon	structs.h	/^  DisCon distcon;		\/* Distance constraint data *\/$/;"	m	struct:group	access:public
distdir	Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distuninstallcheck_listfiles	Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
dock_param_fn	autoglobal.h	/^char    dock_param_fn[PATH_MAX];$/;"	v
doublecompare	support.cc	/^doublecompare(const void *p1, const void *p2)$/;"	f	file:	signature:(const void *p1, const void *p2)
e	structs.h	/^  Energy e;			\/* energy structure *\/$/;"	m	struct:state	access:public
e_inter	structs.h	/^    Real e_inter;                   \/\/ total    intermolecular energy = (1) + (4)$/;"	m	struct:energy_breakdown	access:public
e_inter_moving_fixed	structs.h	/^    Real e_inter_moving_fixed;      \/\/ (1)  \/\/ trilinterp( 0, true_ligand_atoms, ...)$/;"	m	struct:energy_breakdown	access:public
e_inter_moving_moving	structs.h	/^    Real e_inter_moving_moving;     \/\/ (4)  \/\/ eintcal( nb_array[0], nb_array[1], ...)  \/\/ nb_group_energy[INTER]$/;"	m	struct:energy_breakdown	access:public
e_intra	structs.h	/^    Real e_intra;                   \/\/ total    intramolecular energy = (3)  +  (2) + (5)$/;"	m	struct:energy_breakdown	access:public
e_intra_lig	structs.h	/^    Real e_intra_lig;               \/\/ ligand   intramolecular energy = (3)$/;"	m	struct:energy_breakdown	access:public
e_intra_moving_fixed_rec	structs.h	/^    Real e_intra_moving_fixed_rec;  \/\/ (2)  \/\/ trilinterp( true_ligand_atoms, natom, ...)$/;"	m	struct:energy_breakdown	access:public
e_intra_moving_moving_lig	structs.h	/^    Real e_intra_moving_moving_lig; \/\/ (3)  \/\/ eintcal( 0, nb_array[0], ...)            \/\/ nb_group_energy[INTRA_LIGAND]$/;"	m	struct:energy_breakdown	access:public
e_intra_moving_moving_rec	structs.h	/^    Real e_intra_moving_moving_rec; \/\/ (5)  \/\/ eintcal( nb_array[1], nb_array[2], ...)  \/\/ nb_group_energy[INTRA_RECEPTOR]$/;"	m	struct:energy_breakdown	access:public
e_intra_rec	structs.h	/^    Real e_intra_rec;               \/\/ receptor intramolecular energy = (2) + (5)$/;"	m	struct:energy_breakdown	access:public
e_mode	gs.h	/^      EvalMode e_mode;$/;"	m	class:Genetic_Algorithm	access:private
e_torsFreeEnergy	structs.h	/^    Real e_torsFreeEnergy;          \/\/ empirical torsional free energy penalty$/;"	m	struct:energy_breakdown	access:public
e_unbound_internal_FE	structs.h	/^    Real e_unbound_internal_FE;     \/\/ computed internal free energy of the unbound state$/;"	m	struct:energy_breakdown	access:public
e_vdW_Hb	structs.h	/^    Real e_vdW_Hb[NEINT][MAX_ATOM_TYPES][MAX_ATOM_TYPES];  \/\/ vdW & Hb energies$/;"	m	struct:energy_tables	access:public
eintcal	eintcal.cc	/^Real eintcal( NonbondParam * const nonbondlist,$/;"	f	signature:( NonbondParam * const nonbondlist, const EnergyTables *ptr_ad_energy_tables, const Real tcoord[MAX_ATOMS][SPACE], const int Nnb, const Boole B_calcIntElec, const Boole B_include_1_4_interactions, const Real scale_1_4, const Real qsp_abs_charge[MAX_ATOMS], const Boole B_use_non_bond_cutoff, const Boole B_have_flexible_residues )
eintcal	eintcal.h	/^Real  eintcal( NonbondParam * const nonbondlist, $/;"	p	signature:( NonbondParam * const nonbondlist, const EnergyTables *ad_energy_tables, const Real tcoord[MAX_ATOMS][SPACE], const int Nnb, const Boole B_calcIntElec, const Boole B_include_1_4_interactions, const Real scale_1_4, const Real qsp_abs_charge[MAX_ATOMS], const Boole B_use_non_bond_cutoff, const Boole B_have_flexible_residues )
eintcalPrint	eintcalPrint.h	/^Real  eintcalPrint( NonbondParam * const nonbondlist,$/;"	p	signature:( NonbondParam * const nonbondlist, const EnergyTables *ad_energy_tables, const Real tcoord[MAX_ATOMS][SPACE], const int Nnb, const Boole B_calcIntElec, const Boole B_include_1_4_interactions, const Real scale_1_4, const Real qsp_abs_charge[MAX_ATOMS], const Boole B_use_non_bond_cutoff, const Boole B_have_flexible_residues)
elements	typedefs.h	/^	float		 elements[4];$/;"	m	union:__anon5
elitism	gs.h	/^      unsigned int elitism;$/;"	m	class:Genetic_Algorithm	access:private
end_of_branch	support.h	/^      int end_of_branch[MAX_TORS]; \/\/ For Branch Crossover Mode$/;"	m	class:Population	access:protected
energy	structs.h	/^typedef struct energy$/;"	s
energy::FE	structs.h	/^  double FE;			\/* estimated Free Energy of binding *\/$/;"	m	struct:energy	access:public
energy::inter	structs.h	/^  double inter;			\/* intermolecular energy *\/$/;"	m	struct:energy	access:public
energy::intra	structs.h	/^  double intra;			\/* intramolecular energy, a.k.a. "internal" energy *\/$/;"	m	struct:energy	access:public
energy::total	structs.h	/^  double total;			\/* total energy *\/$/;"	m	struct:energy	access:public
energy_breakdown	structs.h	/^typedef struct energy_breakdown$/;"	s
energy_breakdown::deltaG	structs.h	/^    Real deltaG;                    \/\/ estimated change in free energy upon binding$/;"	m	struct:energy_breakdown	access:public
energy_breakdown::e_inter	structs.h	/^    Real e_inter;                   \/\/ total    intermolecular energy = (1) + (4)$/;"	m	struct:energy_breakdown	access:public
energy_breakdown::e_inter_moving_fixed	structs.h	/^    Real e_inter_moving_fixed;      \/\/ (1)  \/\/ trilinterp( 0, true_ligand_atoms, ...)$/;"	m	struct:energy_breakdown	access:public
energy_breakdown::e_inter_moving_moving	structs.h	/^    Real e_inter_moving_moving;     \/\/ (4)  \/\/ eintcal( nb_array[0], nb_array[1], ...)  \/\/ nb_group_energy[INTER]$/;"	m	struct:energy_breakdown	access:public
energy_breakdown::e_intra	structs.h	/^    Real e_intra;                   \/\/ total    intramolecular energy = (3)  +  (2) + (5)$/;"	m	struct:energy_breakdown	access:public
energy_breakdown::e_intra_lig	structs.h	/^    Real e_intra_lig;               \/\/ ligand   intramolecular energy = (3)$/;"	m	struct:energy_breakdown	access:public
energy_breakdown::e_intra_moving_fixed_rec	structs.h	/^    Real e_intra_moving_fixed_rec;  \/\/ (2)  \/\/ trilinterp( true_ligand_atoms, natom, ...)$/;"	m	struct:energy_breakdown	access:public
energy_breakdown::e_intra_moving_moving_lig	structs.h	/^    Real e_intra_moving_moving_lig; \/\/ (3)  \/\/ eintcal( 0, nb_array[0], ...)            \/\/ nb_group_energy[INTRA_LIGAND]$/;"	m	struct:energy_breakdown	access:public
energy_breakdown::e_intra_moving_moving_rec	structs.h	/^    Real e_intra_moving_moving_rec; \/\/ (5)  \/\/ eintcal( nb_array[1], nb_array[2], ...)  \/\/ nb_group_energy[INTRA_RECEPTOR]$/;"	m	struct:energy_breakdown	access:public
energy_breakdown::e_intra_rec	structs.h	/^    Real e_intra_rec;               \/\/ receptor intramolecular energy = (2) + (5)$/;"	m	struct:energy_breakdown	access:public
energy_breakdown::e_torsFreeEnergy	structs.h	/^    Real e_torsFreeEnergy;          \/\/ empirical torsional free energy penalty$/;"	m	struct:energy_breakdown	access:public
energy_breakdown::e_unbound_internal_FE	structs.h	/^    Real e_unbound_internal_FE;     \/\/ computed internal free energy of the unbound state$/;"	m	struct:energy_breakdown	access:public
energy_tables	structs.h	/^typedef struct energy_tables$/;"	s
energy_tables::e_vdW_Hb	structs.h	/^    Real e_vdW_Hb[NEINT][MAX_ATOM_TYPES][MAX_ATOM_TYPES];  \/\/ vdW & Hb energies$/;"	m	struct:energy_tables	access:public
energy_tables::epsilon_fn	structs.h	/^    Real epsilon_fn[NDIEL];                        \/\/ distance-dependent dielectric function$/;"	m	struct:energy_tables	access:public
energy_tables::r_epsilon_fn	structs.h	/^    Real r_epsilon_fn[NDIEL];                      \/\/ r * distance-dependent dielectric function$/;"	m	struct:energy_tables	access:public
energy_tables::sol_fn	structs.h	/^    Real sol_fn[NEINT];                            \/\/ distance-dependent desolvation function$/;"	m	struct:energy_tables	access:public
energy_volume	conformation_sampler.cc	/^Real ConformationSampler::energy_volume(void) {$/;"	f	class:ConformationSampler	signature:(void)
energy_volume	conformation_sampler.h	/^		Real energy_volume(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
entropy_estimate	conformation_sampler.cc	/^Real ConformationSampler::entropy_estimate(void) {$/;"	f	class:ConformationSampler	signature:(void)
entropy_estimate	conformation_sampler.h	/^		Real entropy_estimate(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
epsij	parameters.h	/^  double epsij;			\/* Lennard-Jones energy well-depth *\/$/;"	m	struct:parameter_entry	access:public
epsij_hb	parameters.h	/^  double epsij_hb;		\/* 12-10 Lennard-Jones energy well-depth *\/$/;"	m	struct:parameter_entry	access:public
epsilon_fn	structs.h	/^    Real epsilon_fn[NDIEL];                        \/\/ distance-dependent dielectric function$/;"	m	struct:energy_tables	access:public
equal	constants.h	244;"	d
err1	ranlib.cc	1261;"	d	file:
err2	ranlib.cc	1262;"	d	file:
eval	eval.cc	/^double Eval::eval()$/;"	f	class:Eval	signature:()
eval	eval.cc	/^double Eval::eval(int term)$/;"	f	class:Eval	signature:(int term)
eval	eval.h	/^      double eval();    \/\/ WEH - a basic change that facilitates the use of Coliny$/;"	p	class:Eval	access:public	signature:()
eval	eval.h	/^      double eval(int); \/\/ GMM - allows calculation of a particular term of the total energy$/;"	p	class:Eval	access:public	signature:(int)
eval_elec	eval.h	/^      Real eval_elec[MAX_ATOMS]; \/\/ gmm added 21-Jan-1998, for writePDBQState$/;"	m	class:Eval	access:private
eval_emap	eval.h	/^      Real eval_emap[MAX_ATOMS]; \/\/ gmm added 21-Jan-1998, for writePDBQState$/;"	m	class:Eval	access:private
eval_max	main.cc	/^int eval_max = 0; \/\/Max number of Swarm iterations$/;"	v
evalpso	eval.cc	/^double Eval::evalpso(State *state)$/;"	f	class:Eval	signature:(State *state)
evalpso	eval.h	/^      double evalpso(State *state);$/;"	p	class:Eval	access:public	signature:(State *state)
evals	conformation_sampler.h	/^		int dimensionality, evals, favorable_evals;$/;"	m	class:ConformationSampler	access:public
evals	eval.h	/^      UnsignedFourByteLong evals(void);$/;"	p	class:Eval	access:public	signature:(void)
evals	eval.h	/^inline UnsignedFourByteLong Eval::evals(void)$/;"	f	class:Eval	signature:(void)
evaluate	call_glss.cc	/^Eval evaluate;$/;"	v
evaluate	support.cc	/^double Phenotype::evaluate(EvalMode mode)$/;"	f	class:Phenotype	signature:(EvalMode mode)
evaluate	support.h	/^      double evaluate(EvalMode);  \/\/  This should return evaluation if that's the right answer, and it should evaluate otherwise.$/;"	p	class:Phenotype	access:public	signature:(EvalMode)
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
exit_if_missing_elecmap_desolvmap_about	main.cc	/^static void exit_if_missing_elecmap_desolvmap_about(string  keyword); \/\/ see bottom of main.cc$/;"	p	file:	signature:(string keyword)
exit_if_missing_elecmap_desolvmap_about	main.cc	/^static void exit_if_missing_elecmap_desolvmap_about(string keyword)$/;"	f	file:	signature:(string keyword)
expansion	ls.h	/^      Real expansion, contraction;$/;"	m	class:Solis_Wets_Base	access:protected
expansion	ls.h	/^      Real step_threshold, expansion, contraction;$/;"	m	class:Pattern_Search	access:protected
exploratory_move	ls.cc	/^Phenotype Pattern_Search::exploratory_move(const Phenotype& base) {$/;"	f	class:Pattern_Search	signature:(const Phenotype& base)
exploratory_move	ls.h	/^			Phenotype exploratory_move(const Phenotype&);$/;"	p	class:Pattern_Search	access:protected	signature:(const Phenotype&)
expmax	ranlib.cc	206;"	d	file:
expmax	ranlib.cc	68;"	d	file:
f	structs.h	/^        double f;		\/\/ fitness value of particle$/;"	m	struct:position	access:public
favorable_evals	conformation_sampler.h	/^		int dimensionality, evals, favorable_evals;$/;"	m	class:ConformationSampler	access:public
find_success_in_DLG	Tests/test_autodock4.py	/^def find_success_in_DLG( dlg_filename ):$/;"	f	access:public
flushLog	autocomm.h	134;"	d
fraction_favorable	conformation_sampler.cc	/^Real ConformationSampler::fraction_favorable(void) {$/;"	f	class:ConformationSampler	signature:(void)
fraction_favorable	conformation_sampler.h	/^		Real fraction_favorable(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
fsign	ranlib.cc	/^Real fsign( Real num, Real sign )$/;"	f	signature:( Real num, Real sign )
ftnstop	ranlib.cc	/^void ftnstop(char* msg)$/;"	f	signature:(char* msg)
ftnstop	ranlib.cc	/^void ftnstop(char*);$/;"	p	file:	signature:(char*)
genPh	ls.cc	/^Phenotype genPh(const Phenotype &original, Real sign, Real *deviates, Real *bias)$/;"	f	signature:(const Phenotype &original, Real sign, Real *deviates, Real *bias)
gen_deviates	ls.h	/^      double gen_deviates(Real);$/;"	p	class:Pseudo_Solis_Wets1	access:public	signature:(Real)
gen_deviates	ls.h	/^      double gen_deviates(Real);$/;"	p	class:Pseudo_Solis_Wets2	access:public	signature:(Real)
gen_deviates	ls.h	/^      double gen_deviates(Real);$/;"	p	class:Solis_Wets1	access:public	signature:(Real)
gen_deviates	ls.h	/^      double gen_deviates(Real);$/;"	p	class:Solis_Wets2	access:public	signature:(Real)
gen_deviates	ls.h	/^      virtual double gen_deviates(Real) = 0;$/;"	p	class:Pseudo_Solis_Wets	access:public	signature:(Real)
gen_deviates	ls.h	/^      virtual double gen_deviates(Real) = 0;$/;"	p	class:Solis_Wets	access:public	signature:(Real)
gen_deviates	ls.h	/^      virtual double gen_deviates(Real) = 0;$/;"	p	class:Solis_Wets_Base	access:public	signature:(Real)
gen_deviates	ls.h	/^inline double Pseudo_Solis_Wets1::gen_deviates(Real rho)$/;"	f	class:Pseudo_Solis_Wets1	signature:(Real rho)
gen_deviates	ls.h	/^inline double Pseudo_Solis_Wets2::gen_deviates(Real rho)$/;"	f	class:Pseudo_Solis_Wets2	signature:(Real rho)
gen_deviates	ls.h	/^inline double Solis_Wets1::gen_deviates(Real rho)$/;"	f	class:Solis_Wets1	signature:(Real rho)
gen_deviates	ls.h	/^inline double Solis_Wets2::gen_deviates(Real rho)$/;"	f	class:Solis_Wets2	signature:(Real rho)
genbet	ranlib.cc	/^Real genbet(Real aa,Real bb)$/;"	f	signature:(Real aa,Real bb)
genbet	ranlib.h	/^extern Real genbet(Real aa,Real bb);$/;"	p	signature:(Real aa,Real bb)
genchi	ranlib.cc	/^Real genchi(Real df)$/;"	f	signature:(Real df)
genchi	ranlib.h	/^extern Real genchi(Real df);$/;"	p	signature:(Real df)
gene	rep.cc	/^const Element BitVector::gene(unsigned int gene_number) const$/;"	f	class:BitVector	signature:(unsigned int gene_number) const
gene	rep.cc	/^const Element ConstrainedRealVector::gene(unsigned int gene_number) const$/;"	f	class:ConstrainedRealVector	signature:(unsigned int gene_number) const
gene	rep.cc	/^const Element IntVector::gene(unsigned int gene_number) const$/;"	f	class:IntVector	signature:(unsigned int gene_number) const
gene	rep.cc	/^const Element RealVector::gene(unsigned int gene_number) const$/;"	f	class:RealVector	signature:(unsigned int gene_number) const
gene	rep.h	/^      const Element gene(unsigned int) const;$/;"	p	class:BitVector	access:public	signature:(unsigned int) const
gene	rep.h	/^      const Element gene(unsigned int) const;$/;"	p	class:ConstrainedRealVector	access:public	signature:(unsigned int) const
gene	rep.h	/^      const Element gene(unsigned int) const;$/;"	p	class:IntVector	access:public	signature:(unsigned int) const
gene	rep.h	/^      const Element gene(unsigned int) const;$/;"	p	class:RealVector	access:public	signature:(unsigned int) const
gene	rep.h	/^      virtual const Element gene(unsigned int) const = 0;$/;"	p	class:Representation	access:public	signature:(unsigned int) const
generate_Gtype	call_glss.cc	/^Genotype generate_Gtype(int num_torsions, GridMapSetInfo *info)$/;"	f	signature:(int num_torsions, GridMapSetInfo *info)
generate_Gtype	hybrids.h	/^Genotype generate_Gtype(int num_torsions, GridMapSetInfo *info );$/;"	p	signature:(int num_torsions, GridMapSetInfo *info )
generate_Gtype_tors	hybrids.h	/^Genotype generate_Gtype_tors(int num_torsions, GridMapSetInfo *info );$/;"	p	signature:(int num_torsions, GridMapSetInfo *info )
generate_Ptype	call_glss.cc	/^Phenotype generate_Ptype(int num_torsions, GridMapSetInfo *info) $/;"	f	signature:(int num_torsions, GridMapSetInfo *info)
generate_Ptype	hybrids.h	/^Phenotype generate_Ptype(int num_torsions, GridMapSetInfo *info );$/;"	p	signature:(int num_torsions, GridMapSetInfo *info )
generate_Ptype_tors	hybrids.h	/^Phenotype generate_Ptype_tors(int num_torsions, GridMapSetInfo *info );$/;"	p	signature:(int num_torsions, GridMapSetInfo *info )
generate_R	call_glss.cc	/^Representation **generate_R(int num_torsions, GridMapSetInfo *info)$/;"	f	signature:(int num_torsions, GridMapSetInfo *info)
generate_R	hybrids.h	/^Representation **generate_R(int num_torsions, GridMapSetInfo *info );$/;"	p	signature:(int num_torsions, GridMapSetInfo *info )
generate_R_quaternion	call_glss.cc	/^Representation **generate_R_quaternion(int num_torsions, GridMapSetInfo *info)$/;"	f	signature:(int num_torsions, GridMapSetInfo *info)
generate_R_quaternion	hybrids.h	/^Representation **generate_R_quaternion(int num_torsions, GridMapSetInfo *info );$/;"	p	signature:(int num_torsions, GridMapSetInfo *info )
generate_R_tors	hybrids.h	/^Representation **generate_R_tors(int num_torsions, GridMapSetInfo *info );$/;"	p	signature:(int num_torsions, GridMapSetInfo *info )
generations	gs.h	/^      unsigned int generations; $/;"	m	class:Genetic_Algorithm	access:private
genexp	ranlib.cc	/^Real genexp(Real av)$/;"	f	signature:(Real av)
genexp	ranlib.h	/^extern Real genexp(Real av);$/;"	p	signature:(Real av)
genf	ranlib.cc	/^Real genf(Real dfn,Real dfd)$/;"	f	signature:(Real dfn,Real dfd)
genf	ranlib.h	/^extern Real genf(Real dfn, Real dfd);$/;"	p	signature:(Real dfn, Real dfd)
gengam	ranlib.cc	/^Real gengam(Real a,Real r)$/;"	f	signature:(Real a,Real r)
gengam	ranlib.h	/^extern Real gengam(Real a,Real r);$/;"	p	signature:(Real a,Real r)
genmn	ranlib.cc	/^void genmn(Real *parm,Real *x,Real *work)$/;"	f	signature:(Real *parm,Real *x,Real *work)
genmn	ranlib.h	/^extern void genmn(Real *parm,Real *x,Real *work);$/;"	p	signature:(Real *parm,Real *x,Real *work)
genmul	ranlib.cc	/^void genmul(FourByteLong n,Real *p,FourByteLong ncat,FourByteLong *ix)$/;"	f	signature:(FourByteLong n,Real *p,FourByteLong ncat,FourByteLong *ix)
genmul	ranlib.h	/^extern void genmul(FourByteLong n,Real *p,FourByteLong ncat,FourByteLong *ix);$/;"	p	signature:(FourByteLong n,Real *p,FourByteLong ncat,FourByteLong *ix)
gennch	ranlib.cc	/^Real gennch(Real df,Real xnonc)$/;"	f	signature:(Real df,Real xnonc)
gennch	ranlib.h	/^extern Real gennch(Real df,Real xnonc);$/;"	p	signature:(Real df,Real xnonc)
gennf	ranlib.cc	/^Real gennf(Real dfn,Real dfd,Real xnonc)$/;"	f	signature:(Real dfn,Real dfd,Real xnonc)
gennf	ranlib.h	/^extern Real gennf(Real dfn, Real dfd, Real xnonc);$/;"	p	signature:(Real dfn, Real dfd, Real xnonc)
gennor	ranlib.cc	/^Real gennor(Real av,Real sd)$/;"	f	signature:(Real av,Real sd)
gennor	ranlib.h	/^extern Real gennor(Real av,Real sd);$/;"	p	signature:(Real av,Real sd)
genotyp	support.h	/^      Genotype genotyp;   \/* Genotype  is operated upon by *global search* operators *\/$/;"	m	class:Individual	access:public
genprm	ranlib.cc	/^void genprm(FourByteLong *iarray,int larray)$/;"	f	signature:(FourByteLong *iarray,int larray)
genprm	ranlib.h	/^extern void genprm(FourByteLong *iarray,int larray);$/;"	p	signature:(FourByteLong *iarray,int larray)
genunf	ranlib.cc	/^Real genunf(Real low,Real high)$/;"	f	signature:(Real low,Real high)
genunf	ranlib.h	/^extern Real genunf(Real low,Real high);$/;"	p	signature:(Real low,Real high)
geometric_mean	constants.h	273;"	d
getClusterInfo	Tests/DlgParser.py	/^    def getClusterInfo(self, lines):$/;"	m	class:DlgParser	access:public
getClusterRecord	Tests/DlgParser.py	/^    def getClusterRecord(self, cl):$/;"	m	class:DlgParser	access:public
getDlgStates	Tests/DlgParser.py	/^    def getDlgStates(self, lines):$/;"	m	class:DlgParser	access:public
getInitialState	getInitialState.cc	/^void getInitialState($/;"	f	signature:( Real *Addr_e0total, Real e0max, State *sInit, State *sMinm, State *sLast, Boole B_RandomTran0, Boole B_RandomQuat0, Boole B_RandomDihe0, Real charge[MAX_ATOMS], Real abs_charge[MAX_ATOMS], Real qsp_abs_charge[MAX_ATOMS], Real crd[MAX_ATOMS][SPACE], Real crdpdb[MAX_ATOMS][SPACE], char atomstuff[MAX_ATOMS][MAX_CHARS], Real elec[MAX_ATOMS], Real emap[MAX_ATOMS], EnergyTables *ptr_ad_energy_tables, Boole B_calcIntElec, int natom, int Nnb, NonbondParam *nonbondlist, int ntor, int tlist[MAX_TORS][MAX_ATOMS], int type[MAX_ATOMS], Real vt[MAX_TORS][SPACE], int irun1, int outlev, int MaxRetries, Real torsFreeEnergy, int ligand_is_inhibitor, int ignore_inter[MAX_ATOMS], const Boole B_include_1_4_interactions, const Real scale_1_4, const Real unbound_internal_FE, GridMapSetInfo *info, Boole B_use_non_bond_cutoff, Boole B_have_flexible_residues, Unbound_Model ad4_unbound_model )
getInitialState	getInitialState.h	/^void getInitialState(  $/;"	p	signature:( Real *Addr_e0, Real e0max, State *sInit, State *sMin, State *sLast, Boole B_RandomTran0, Boole B_RandomQuat0, Boole B_RandomDihe0, Real charge[MAX_ATOMS], Real abs_charge[MAX_ATOMS], Real qsp_abs_charge[MAX_ATOMS], Real crd[MAX_ATOMS][SPACE], Real crdpdb[MAX_ATOMS][SPACE], char atomstuff[MAX_ATOMS][MAX_CHARS], Real elec[MAX_ATOMS], Real emap[MAX_ATOMS], EnergyTables *ptr_ad_energy_tables, Boole B_calcIntElec, int natom, int Nnb, NonbondParam *nonbondlist, int ntor, int tlist[MAX_TORS][MAX_ATOMS], int type[MAX_ATOMS], Real vt[MAX_TORS][SPACE], int irun1, int outlev, int MaxRetries, Real torsFreeEnergy, int ligand_is_inhibitor, int ignore_inter[MAX_ATOMS], const Boole B_include_1_4_interactions, const Real scale_1_4, const Real unbound_internal_FE, GridMapSetInfo *info, Boole B_use_non_bond_cutoff, Boole B_have_flexible_residues, Unbound_Model ad4_unbound_model )
getLigandAtomCount	Tests/DlgParser.py	/^    def getLigandAtomCount(self, lines):$/;"	m	class:DlgParser	access:public
getModelLines	Tests/DlgParser.py	/^    def getModelLines(self, lines):$/;"	m	class:DlgParser	access:public
getMol	support.cc	/^void Individual::getMol(Molecule *returnedMol)$/;"	f	class:Individual	signature:(Molecule *returnedMol)
getMol	support.h	/^      void  getMol(Molecule *); \/* converts phenotype to mol's state and returns this individual's mol data *\/$/;"	p	class:Individual	access:public	signature:(Molecule *)
getNewDpfInfo	Tests/DlgParser.py	/^    def getNewDpfInfo(self, lines):$/;"	m	class:DlgParser	access:public
getNonBondTable	Tests/DlgParser.py	/^    def getNonBondTable(self, lines, echo=False):$/;"	m	class:DlgParser	access:public
getReDict	Tests/DlgParser.py	/^    def getReDict(self):$/;"	m	class:DlgParser	access:public
getSeedInfo	Tests/DlgParser.py	/^    def getSeedInfo(self, lines):$/;"	m	class:DlgParser	access:public
getShortModelLines	Tests/DlgParser.py	/^    def getShortModelLines(self, lines):$/;"	m	class:DlgParser	access:public
get_atom_type	get_atom_type.cc	/^int get_atom_type( char aname[4] )$/;"	f	signature:( char aname[4] )
get_atom_type	get_atom_type.h	/^int  get_atom_type( char  aname[4] );$/;"	p	signature:( char aname[4] )
get_eob	support.cc	/^int Population::get_eob(int init_tor)$/;"	f	class:Population	signature:(int init_tor)
get_eob	support.h	/^      int get_eob(int init_tor); \/\/ For Branch Crossover Mode$/;"	p	class:Population	access:public	signature:(int init_tor)
getbonds	nonbonds.cc	/^void getbonds(const Real crdpdb[MAX_ATOMS][SPACE],$/;"	f	signature:(const Real crdpdb[MAX_ATOMS][SPACE], const int from_atom, const int to_atom, const int bond_index[MAX_ATOMS], int bonded[MAX_ATOMS][6])
getbonds	nonbonds.h	/^void getbonds(const Real crdpdb[MAX_ATOMS][SPACE], $/;"	p	signature:(const Real crdpdb[MAX_ATOMS][SPACE], const int from_atom, const int to_atom, const int bond_index[MAX_ATOMS], int bonded[MAX_ATOMS][6])
getpdbcrds	getpdbcrds.cc	/^int getpdbcrds( char *rms_ref_crds_FN,$/;"	f	signature:( char *rms_ref_crds_FN, Real ref_crds[MAX_ATOMS][SPACE] )
getpdbcrds	getpdbcrds.h	/^int   getpdbcrds( char  *rms_ref_crds_FN,$/;"	p	signature:( char *rms_ref_crds_FN, Real ref_crds[MAX_ATOMS][SPACE] )
getrms	getrms.cc	/^Real getrms ( Real Crd[MAX_ATOMS][SPACE], $/;"	f	signature:( Real Crd[MAX_ATOMS][SPACE], Real CrdRef[MAX_ATOMS][SPACE], Boole B_symmetry_flag, int natom, int type[MAX_ATOMS] )
getrms	getrms.h	/^Real  getrms( Real Crd[MAX_ATOMS][SPACE], $/;"	p	signature:( Real Crd[MAX_ATOMS][SPACE], Real CrdRef[MAX_ATOMS][SPACE], Boole B_symmetry_flag, int natom, int type[MAX_ATOMS] )
getsd	com.cc	/^void getsd(FourByteLong *iseed1,FourByteLong *iseed2)$/;"	f	signature:(FourByteLong *iseed1,FourByteLong *iseed2)
getsd	ranlib.h	/^extern void getsd(FourByteLong *iseed1,FourByteLong *iseed2);$/;"	p	signature:(FourByteLong *iseed1,FourByteLong *iseed2)
global_ntor	call_glss.cc	/^int global_ntor;$/;"	v
gread	support.h	/^      const Element gread(int);$/;"	p	class:Genotype	access:public	signature:(int)
gread	support.h	/^      const Element gread(int);$/;"	p	class:Phenotype	access:public	signature:(int)
gread	support.h	/^inline const Element Genotype::gread(int gene_number)$/;"	f	class:Genotype	signature:(int gene_number)
gread	support.h	/^inline const Element Phenotype::gread(int gene_number)$/;"	f	class:Phenotype	signature:(int gene_number)
grid_map_set_info	grid.h	/^typedef struct      grid_map_set_info$/;"	s
grid_map_set_info::FN_gdfld	grid.h	/^    char            FN_gdfld[PATH_MAX]; \/\/ filename of the field file$/;"	m	struct:grid_map_set_info	access:public
grid_map_set_info::FN_gpf	grid.h	/^    char            FN_gpf[PATH_MAX]; \/\/ filename of the AutoGrid parameter file$/;"	m	struct:grid_map_set_info	access:public
grid_map_set_info::FN_receptor	grid.h	/^    char            FN_receptor[PATH_MAX]; \/\/ filename of the receptor used to calculate the grids$/;"	m	struct:grid_map_set_info	access:public
grid_map_set_info::atom_type_name	grid.h	/^    char            atom_type_name[MAX_MAPS][3]; \/\/ array of atom type names, corresponding to the grids$/;"	m	struct:grid_map_set_info	access:public
grid_map_set_info::center	grid.h	/^    double          center[3]; \/\/ central coordinates, in Angstroms$/;"	m	struct:grid_map_set_info	access:public
grid_map_set_info::hi	grid.h	/^    double          hi[3]; \/\/ maximum coordinates, in Angstroms$/;"	m	struct:grid_map_set_info	access:public
grid_map_set_info::inv_spacing	grid.h	/^    double          inv_spacing; \/\/ reciprocal of the uniform grid spacing in Angstroms^-1$/;"	m	struct:grid_map_set_info	access:public
grid_map_set_info::lo	grid.h	/^    double          lo[3]; \/\/ minimum coordinates, in Angstroms$/;"	m	struct:grid_map_set_info	access:public
grid_map_set_info::num_all_maps	grid.h	/^    int             num_all_maps; \/\/ number of all maps, = num_atom_types + 2$/;"	m	struct:grid_map_set_info	access:public
grid_map_set_info::num_alloc	grid.h	/^    int             num_alloc[3]; \/\/ the dimensions allocated, >= num_points1; if this is a power of 2, it should be faster$/;"	m	struct:grid_map_set_info	access:public
grid_map_set_info::num_alloc_maps	grid.h	/^    int             num_alloc_maps; \/\/ allocated number of maps, >= num_all_maps$/;"	m	struct:grid_map_set_info	access:public
grid_map_set_info::num_atom_types	grid.h	/^    int             num_atom_types; \/\/ number of atom types$/;"	m	struct:grid_map_set_info	access:public
grid_map_set_info::num_points	grid.h	/^    int             num_points[3]; \/\/ the actual dimensions of the grid minus 1; should be an even number$/;"	m	struct:grid_map_set_info	access:public
grid_map_set_info::num_points1	grid.h	/^    int             num_points1[3]; \/\/ the actual dimensions of the grid; should be an odd number$/;"	m	struct:grid_map_set_info	access:public
grid_map_set_info::spacing	grid.h	/^    double          spacing; \/\/ uniform grid spacing in Angstroms$/;"	m	struct:grid_map_set_info	access:public
grid_param_fn	autoglobal.h	/^char    grid_param_fn[PATH_MAX];$/;"	v
group	structs.h	/^typedef struct group$/;"	s
group::B_constrain	structs.h	/^  Boole B_constrain;		\/* TRUE if any distance constraints *\/$/;"	m	struct:group	access:public
group::atm	structs.h	/^  Atom atm[MAX_ATOMS];		\/* Atom data *\/$/;"	m	struct:group	access:public
group::distcon	structs.h	/^  DisCon distcon;		\/* Distance constraint data *\/$/;"	m	struct:group	access:public
group::natom	structs.h	/^  int natom;			\/* Number of atoms in fragment *\/$/;"	m	struct:group	access:public
group::nbs	structs.h	/^  PairID nbs[MAX_NONBONDS];	\/* Non-bond data *\/$/;"	m	struct:group	access:public
group::nnb	structs.h	/^  int nnb;			\/* Number of non-bonds in fragment *\/$/;"	m	struct:group	access:public
group::ntor	structs.h	/^  int ntor;			\/* Number of torsions in fragment *\/$/;"	m	struct:group	access:public
group::pdbqfilnam	structs.h	/^  char pdbqfilnam[PATH_MAX];	\/* PDBQ filename holding these data *\/$/;"	m	struct:group	access:public
group::tors	structs.h	/^  Torsion tors[MAX_TORS];	\/* Torsion data *\/$/;"	m	struct:group	access:public
gscgn	ranlib.cc	/^void gscgn(FourByteLong getset,FourByteLong *g)$/;"	f	signature:(FourByteLong getset,FourByteLong *g)
gscgn	ranlib.h	/^extern void gscgn(FourByteLong getset,FourByteLong *g);$/;"	p	signature:(FourByteLong getset,FourByteLong *g)
gsrgs	ranlib.cc	/^void gsrgs(FourByteLong getset,FourByteLong *qvalue)$/;"	f	signature:(FourByteLong getset,FourByteLong *qvalue)
gssst	ranlib.cc	/^void gssst(FourByteLong getset,FourByteLong *qset)$/;"	f	signature:(FourByteLong getset,FourByteLong *qset)
gtype	support.h	/^      RepType gtype(int); \/* returns the type (real,bit,int) for $/;"	p	class:Genotype	access:public	signature:(int)
gtype	support.h	/^      RepType gtype(int);$/;"	p	class:Phenotype	access:public	signature:(int)
gtype	support.h	/^inline RepType Genotype::gtype(int gene_number)$/;"	f	class:Genotype	signature:(int gene_number)
gtype	support.h	/^inline RepType Phenotype::gtype(int gene_number)$/;"	f	class:Phenotype	signature:(int gene_number)
h	ranlib.cc	1291;"	d	file:
h	ranlib.cc	1368;"	d	file:
handle	coliny.cc	/^colin::OptSolverHandle* handle = 0;$/;"	v
hasEnergy	structs.h	/^  int hasEnergy;		\/* if 0, this state has an undefined energy *\/$/;"	m	struct:state	access:public
has_charge	structs.h	/^  Boole     has_charge;			    \/* TRUE if the atom has a charge *\/$/;"	m	struct:atom	access:public
hash	atom_parameter_manager.cc	/^hash(const char key[]) {$/;"	f	file:	signature:(const char key[])
hbond	parameters.h	/^  hbond_type hbond;		\/* hbonding character: $/;"	m	struct:parameter_entry	access:public
hbond_type	parameters.h	/^enum hbond_type$/;"	g
heap	support.h	/^      Individual *heap; \/* a heap of individuals -- special binary tree *\/$/;"	m	class:Population	access:protected
hi	grid.h	/^    double          hi[3]; \/\/ maximum coordinates, in Angstroms$/;"	m	struct:grid_map_set_info	access:public
high	gs.h	/^      int low, high; \/\/ should these be int or Real?$/;"	m	class:Genetic_Algorithm	access:private
high	rep.cc	/^FourByteLong IntVector::high = INT_MAX\/4;$/;"	m	class:IntVector	file:
high	rep.cc	/^Real ConstrainedRealVector::high = REALV_HIGH;$/;"	m	class:ConstrainedRealVector	file:
high	rep.h	/^      Real high, low;$/;"	m	class:RealVector	access:protected
high	rep.h	/^      static FourByteLong low, high;$/;"	m	class:IntVector	access:protected
high	rep.h	/^      static Real high, low;$/;"	m	class:ConstrainedRealVector	access:protected
host	Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host_alias	Makefile	/^host_alias = $/;"	m
host_cpu	Makefile	/^host_cpu = x86_64$/;"	m
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = unknown$/;"	m
hypotenuse	constants.h	279;"	d
hypotenuse4	constants.h	283;"	d
hypotenuse4_F	constants.h	284;"	d
hypotenuse_F	constants.h	280;"	d
idct	autoglobal.h	/^Real	idct = 1.0;$/;"	v
idct	test_times.cc	/^Real idct;$/;"	v
ident	main.cc	/^static const char* const ident[] = {ident[1], "@(#)$Id: main.cc,v 1.114 2009\/12\/15 06:21:01 mp Exp $"};$/;"	v	file:
identityQuat	qmultiply.cc	/^const Quat identityQuat()$/;"	f	signature:()
identityQuat	qmultiply.h	/^const Quat identityQuat();$/;"	p	signature:()
ignbin	ranlib.cc	/^FourByteLong ignbin(FourByteLong n,Real pp)$/;"	f	signature:(FourByteLong n,Real pp)
ignbin	ranlib.h	/^extern FourByteLong ignbin(FourByteLong n,Real pp);$/;"	p	signature:(FourByteLong n,Real pp)
ignlgi	com.cc	/^FourByteLong ignlgi(void)$/;"	f	signature:(void)
ignlgi	ranlib.h	/^extern FourByteLong ignlgi(void);$/;"	p	signature:(void)
ignnbn	ranlib.cc	/^FourByteLong ignnbn(FourByteLong n,Real p)$/;"	f	signature:(FourByteLong n,Real p)
ignnbn	ranlib.h	/^extern FourByteLong ignnbn(FourByteLong n,Real p);$/;"	p	signature:(FourByteLong n,Real p)
ignore_errors	autoglobal.h	/^int     ignore_errors = FALSE;$/;"	v
ignore_inter	eval.h	/^      int ignore_inter[MAX_ATOMS]; \/\/ gmm 2002-05-21, for CA, CB in flexible sidechains$/;"	m	class:Eval	access:private
ignpoi	ranlib.cc	/^FourByteLong ignpoi(Real mu)$/;"	f	signature:(Real mu)
ignpoi	ranlib.h	/^extern FourByteLong ignpoi(Real mu);$/;"	p	signature:(Real mu)
ignuin	ranlib.cc	/^FourByteLong ignuin(FourByteLong low,FourByteLong high)$/;"	f	signature:(FourByteLong low,FourByteLong high)
ignuin	ranlib.h	/^extern FourByteLong ignuin(FourByteLong low,FourByteLong high);$/;"	p	signature:(FourByteLong low,FourByteLong high)
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
incrementAge	support.cc	/^void Individual::incrementAge(void)$/;"	f	class:Individual	signature:(void)
incrementAge	support.h	/^      void incrementAge(); \/* make individual grow 1 generation older *\/$/;"	p	class:Individual	access:public	signature:()
index	ls.h	/^			unsigned int *index;$/;"	m	class:Pattern_Search	access:protected
index	support.h	/^   unsigned int index;$/;"	m	struct:__anon4	access:public
index_to_Ang	constants.h	288;"	d
index_to_SqAng	constants.h	297;"	d
infnty	ranlib.cc	207;"	d	file:
infnty	ranlib.cc	69;"	d	file:
info	conformation_sampler.cc	/^GridMapSetInfo *info;$/;"	v
info	eval.h	/^      GridMapSetInfo *info;$/;"	m	class:Eval	access:private
infodir	Makefile	/^infodir = ${prefix}\/info$/;"	m
initautodock	initautodock.cc	/^void initautodock(  char  atomstuff[MAX_ATOMS][MAX_CHARS],$/;"	f	signature:( char atomstuff[MAX_ATOMS][MAX_CHARS], Real crd[MAX_ATOMS][SPACE], Real crdpdb[MAX_ATOMS][SPACE], int natom, int ntor, State *s0, int tlist[MAX_TORS][MAX_ATOMS], Real vt[MAX_TORS][SPACE], int outlev, GridMapSetInfo *info )
initautodock	initautodock.h	/^void initautodock($/;"	p	signature:( char atomstuff[MAX_ATOMS][MAX_CHARS], Real crd[MAX_ATOMS][SPACE], Real crdpdb[MAX_ATOMS][SPACE], int natom, int ntor, State *s0, int tlist[MAX_TORS][MAX_ATOMS], Real vt[MAX_TORS][SPACE], int outlev, GridMapSetInfo *info )
initgn	com.cc	/^void initgn(FourByteLong isdtyp)$/;"	f	signature:(FourByteLong isdtyp)
initgn	ranlib.h	/^extern void initgn(FourByteLong isdtyp);$/;"	p	signature:(FourByteLong isdtyp)
initialiseDimension	dimLibrary.cc	/^void initialiseDimension(GridMapSetInfo * info,  double *xmin, double *xmax, int D)$/;"	f	signature:(GridMapSetInfo * info, double *xmin, double *xmax, int D)
initialiseDimension	dimLibrary.h	/^void initialiseDimension(GridMapSetInfo * info, double *xmin, double *xmax, int D);$/;"	p	signature:(GridMapSetInfo * info, double *xmin, double *xmax, int D)
initialiseParticle	dimLibrary.cc	/^void initialiseParticle(int s, int D, Position *Xi, Velocity *Vi, double *xmin, double *xmax, double *Vmin, double *Vmax)$/;"	f	signature:(int s, int D, Position *Xi, Velocity *Vi, double *xmin, double *xmax, double *Vmin, double *Vmax)
initialiseParticle	dimLibrary.h	/^void initialiseParticle(int s, int D, Position *Xi, Velocity *Vi, double *xmin, double *xmax, double *Vmin, double *Vmax);$/;"	p	signature:(int s, int D, Position *Xi, Velocity *Vi, double *xmin, double *xmax, double *Vmin, double *Vmax)
initialiseQuat	stateLibrary.cc	/^void initialiseQuat( Quat *Q )$/;"	f	signature:( Quat *Q )
initialiseQuat	stateLibrary.h	/^void initialiseQuat( Quat *Q );$/;"	p	signature:( Quat *Q )
initialiseState	stateLibrary.cc	/^void initialiseState( State *S )$/;"	f	signature:( State *S )
initialiseState	stateLibrary.h	/^void initialiseState( State *S );$/;"	p	signature:( State *S )
initialise_binding_energy_breakdown	calculateEnergies.cc	/^void initialise_binding_energy_breakdown( EnergyBreakdown * eb,$/;"	f	signature:( EnergyBreakdown * eb, Real torsFreeEnergy, Real unbound_internal_FE , Unbound_Model ad4_unbound_model)
initialise_binding_energy_breakdown	calculateEnergies.h	/^void initialise_binding_energy_breakdown ( EnergyBreakdown * eb,$/;"	p	signature:( EnergyBreakdown * eb, Real torsFreeEnergy, Real unbound_internal_FE, Unbound_Model ad4_unbound_model)
initialise_energy_breakdown	calculateEnergies.cc	/^void initialise_energy_breakdown ( EnergyBreakdown * eb,$/;"	f	signature:( EnergyBreakdown * eb, Real torsFreeEnergy, Real unbound_internal_FE )
initialise_energy_breakdown	calculateEnergies.h	/^void initialise_energy_breakdown ( EnergyBreakdown * eb,$/;"	p	signature:( EnergyBreakdown * eb, Real torsFreeEnergy, Real unbound_internal_FE )
initialize	gs.cc	/^void Genetic_Algorithm::initialize(unsigned int pop_size, unsigned int num_poss_mutations)$/;"	f	class:Genetic_Algorithm	signature:(unsigned int pop_size, unsigned int num_poss_mutations)
initialize	gs.h	/^      void initialize(unsigned int, unsigned int);$/;"	p	class:Genetic_Algorithm	access:public	signature:(unsigned int, unsigned int)
input_state	input_state.cc	/^int input_state( State *S,$/;"	f	signature:( State *S, FILE *fp, char line[LINE_LEN], int ntor, int *p_istep, Real *p_energy, Real *p_eint, char *p_lastmove )
input_state	input_state.h	/^int input_state( State *S,$/;"	p	signature:( State *S, FILE *fp, char line[LINE_LEN], int ntor, int *P_istep, Real *P_energy, Real *P_eint, char *P_lastmove )
inrgcm	com.cc	/^void inrgcm(void)$/;"	f	signature:(void)
install_sh	Makefile	/^install_sh = \/home\/xouyang1\/B-bond\/autodock\/googlecode\/covalentdock\/autodock\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
integer	rep.h	/^   FourByteLong integer;$/;"	m	union:__anon2
integer_stack_t	stack.h	/^} integer_stack_t;$/;"	t	typeref:struct:__anon3
inter	structs.h	/^  double inter;			\/* intermolecular energy *\/$/;"	m	struct:energy	access:public
internals	rep.cc	/^const void *BitVector::internals(void) const$/;"	f	class:BitVector	signature:(void) const
internals	rep.cc	/^const void *ConstrainedRealVector::internals(void) const$/;"	f	class:ConstrainedRealVector	signature:(void) const
internals	rep.cc	/^const void *IntVector::internals(void) const$/;"	f	class:IntVector	signature:(void) const
internals	rep.cc	/^const void *RealVector::internals(void) const$/;"	f	class:RealVector	signature:(void) const
internals	rep.h	/^      const void *internals(void) const;$/;"	p	class:BitVector	access:protected	signature:(void) const
internals	rep.h	/^      const void *internals(void) const;$/;"	p	class:ConstrainedRealVector	access:protected	signature:(void) const
internals	rep.h	/^      const void *internals(void) const;$/;"	p	class:IntVector	access:protected	signature:(void) const
internals	rep.h	/^      const void *internals(void) const;$/;"	p	class:RealVector	access:protected	signature:(void) const
internals	rep.h	/^      virtual const void *internals(void) const = 0;$/;"	p	class:Representation	access:public	signature:(void) const
intnbtable	intnbtable.cc	/^void intnbtable( Boole *P_B_havenbp,$/;"	f	signature:( Boole *P_B_havenbp, int a1, int a2, GridMapSetInfo *info, Real cA, Real cB, int xA, int xB, double coeff_desolv, double sigma, EnergyTables *ad_tables, Boole B_is_unbound_calculation )
intnbtable	intnbtable.h	/^void intnbtable(Boole *P_B_havenbp,$/;"	p	signature:(Boole *P_B_havenbp, int a1, int a2, GridMapSetInfo *info, Real cA, Real cB, int xA, int xB, double coeff_desolv, double sigma, EnergyTables *ad_tables, Boole B_is_unbound_calculation )
intra	structs.h	/^  double intra;			\/* intramolecular energy, a.k.a. "internal" energy *\/$/;"	m	struct:energy	access:public
inv_spacing	grid.h	/^    double          inv_spacing; \/\/ reciprocal of the uniform grid spacing in Angstroms^-1$/;"	m	struct:grid_map_set_info	access:public
inverse	qmultiply.cc	/^Quat inverse( const Quat q )$/;"	f	signature:( const Quat q )
inverse	qmultiply.h	/^Quat inverse( const Quat q );$/;"	p	signature:( const Quat q )
inverse_mapping	mapping.cc	/^Individual &Individual::inverse_mapping(void)$/;"	f	class:Individual	signature:(void)
inverse_mapping	support.h	/^      Individual &inverse_mapping(void); \/\/updates genotype from current phenotype values $/;"	p	class:Individual	access:public	signature:(void)
investigate	investigate.cc	/^void investigate( int   Nnb,$/;"	f	signature:( int Nnb, Real charge[MAX_ATOMS], Real abs_charge[MAX_ATOMS], Real qsp_abs_charge[MAX_ATOMS], Boole B_calcIntElec, Real crd[MAX_ATOMS][SPACE], Real crdpdb[MAX_ATOMS][SPACE], EnergyTables *ptr_ad_energy_tables, int maxTests, int natom, NonbondParam *nonbondlist, int ntor, int outlev, int tlist[MAX_TORS][MAX_ATOMS], int type[MAX_ATOMS], Real vt[MAX_TORS][SPACE], Boole B_isGaussTorCon, unsigned short US_torProfile[MAX_TORS][NTORDIVS], Boole B_isTorConstrained[MAX_TORS], Boole B_ShowTorE, unsigned short US_TorE[MAX_TORS], Real F_TorConRange[MAX_TORS][MAX_TOR_CON][2], int N_con[MAX_TORS], Boole B_symmetry_flag, char *FN_rms_ref_crds, int OutputEveryNTests, int NumLocalTests, Real trnStep, Real torStep, int ignore_inter[MAX_ATOMS], const Boole B_include_1_4_interactions, const Real scale_1_4, const Real unbound_internal_FE, GridMapSetInfo *info, Boole B_use_non_bond_cutoff, Boole B_have_flexible_residues)
investigate	investigate.h	/^void investigate($/;"	p	signature:( int Nnb, Real charge[MAX_ATOMS], Real abs_charge[MAX_ATOMS], Real qsp_abs_charge[MAX_ATOMS], Boole B_calcIntElec, Real crd[MAX_ATOMS][SPACE], Real crdpdb[MAX_ATOMS][SPACE], EnergyTables *ptr_ad_energy_tables, int maxTests, int natom, NonbondParam *nonbondlist, int ntor, int outlev, int tlist[MAX_TORS][MAX_ATOMS], int type[MAX_ATOMS], Real vt[MAX_TORS][SPACE], Boole B_isGaussTorCon, unsigned short US_torProfile[MAX_TORS][NTORDIVS], Boole B_isTorConstrained[MAX_TORS], Boole B_ShowTorE, unsigned short US_TorE[MAX_TORS], Real F_TorConRange[MAX_TORS][MAX_TOR_CON][2], int N_con[MAX_TORS], Boole B_symmetry_flag, char *FN_rms_ref_crds, int OutputEveryNTests, int NumLocalTests, Real trnStep, Real torStep, int ignore_inter[MAX_ATOMS], const Boole B_include_1_4_interactions, const Real scale_1_4, const Real unbound_internal_FE, GridMapSetInfo *info, Boole B_use_non_bond_cutoff, Boole B_have_flexible_residues)
is_angle_index	rep_constants.h	50;"	d
is_axis_index	rep_constants.h	49;"	d
is_conformation_index	rep_constants.h	54;"	d
is_first_rotation_index	rep_constants.h	52;"	d
is_hydrogen	structs.h	/^  Boole     is_hydrogen;		    \/* TRUE if atom is a hydrogen *\/$/;"	m	struct:atom	access:public
is_hydrogen_type	parameters.h	60;"	d
is_normalized	rep.h	/^      int is_normalized(void) const;$/;"	p	class:Representation	access:public	signature:(void) const
is_normalized	rep.h	/^inline int Representation::is_normalized(void) const$/;"	f	class:Representation	signature:(void) const
is_out_grid	constants.h	313;"	d
is_out_grid_info	constants.h	315;"	d
is_rotation_index	rep_constants.h	51;"	d
is_translation_index	rep_constants.h	48;"	d
is_within_rotation_index	rep_constants.h	53;"	d
is_zero	constants.h	317;"	d
keepresnum	autoglobal.h	/^int     keepresnum = 1;$/;"	v
length	structs.h	/^  double length;		\/* current bond length *\/$/;"	m	struct:dist_constraint	access:public
lennob	ranlib.cc	/^FourByteLong lennob( char *str )$/;"	f	signature:( char *str )
lhb	support.h	/^      int lhb;  \/\/  These keep track of the lower & upper heap bounds$/;"	m	class:Population	access:protected
libad_a_AR	Makefile	/^libad_a_AR = $(AR) $(ARFLAGS)$/;"	m
libad_a_LIBADD	Makefile	/^libad_a_LIBADD =$/;"	m
libad_a_OBJECTS	Makefile	/^libad_a_OBJECTS = $(am_libad_a_OBJECTS)$/;"	m
libad_a_SOURCES	Makefile	/^libad_a_SOURCES = \\$/;"	m
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
lig_center	conformation_sampler.cc	/^Real *lig_center;$/;"	v
linear_FE_model	structs.h	/^typedef struct linear_FE_model$/;"	s
linear_FE_model::coeff_desolv	structs.h	/^    double coeff_desolv;              \/\/ Free energy coefficient for desolvation term$/;"	m	struct:linear_FE_model	access:public
linear_FE_model::coeff_estat	structs.h	/^    double coeff_estat;               \/\/ Free energy coefficient for electrostatics term$/;"	m	struct:linear_FE_model	access:public
linear_FE_model::coeff_hbond	structs.h	/^    double coeff_hbond;               \/\/ Free energy coefficient for H-bonding term$/;"	m	struct:linear_FE_model	access:public
linear_FE_model::coeff_tors	structs.h	/^    double coeff_tors;                \/\/ Free energy coefficient for torsional term$/;"	m	struct:linear_FE_model	access:public
linear_FE_model::coeff_vdW	structs.h	/^    double coeff_vdW;                 \/\/ Free energy coefficient for van der Waals term$/;"	m	struct:linear_FE_model	access:public
linear_FE_model::stderr_desolv	structs.h	/^    double stderr_desolv;             \/\/ Free energy standard error for desolvation term$/;"	m	struct:linear_FE_model	access:public
linear_FE_model::stderr_estat	structs.h	/^    double stderr_estat;              \/\/ Free energy standard error for electrostatics term$/;"	m	struct:linear_FE_model	access:public
linear_FE_model::stderr_hbond	structs.h	/^    double stderr_hbond;              \/\/ Free energy standard error for H-bonding term$/;"	m	struct:linear_FE_model	access:public
linear_FE_model::stderr_tors	structs.h	/^    double stderr_tors;               \/\/ Free energy standard error for torsional term$/;"	m	struct:linear_FE_model	access:public
linear_FE_model::stderr_vdW	structs.h	/^    double stderr_vdW;                \/\/ Free energy standard error for van der Waals term$/;"	m	struct:linear_FE_model	access:public
linear_ranking_selection_probability_ratio	gs.h	/^      Real linear_ranking_selection_probability_ratio;$/;"	m	class:Genetic_Algorithm	access:private
lo	grid.h	/^    double          lo[3]; \/\/ minimum coordinates, in Angstroms$/;"	m	struct:grid_map_set_info	access:public
local_random	constants.h	331;"	d
local_random	constants.h	335;"	d
local_random	constants.h	341;"	d
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
logFile	autoglobal.h	/^FILE    *logFile;$/;"	v
lookup	support.h	/^      Lookup *lookup;		      \/\/ a table that helps in looking up a gene$/;"	m	class:Genotype	access:protected
lookup	support.h	/^      Lookup *lookup;$/;"	m	class:Phenotype	access:protected
low	gs.h	/^      int low, high; \/\/ should these be int or Real?$/;"	m	class:Genetic_Algorithm	access:private
low	rep.cc	/^FourByteLong IntVector::low = -INT_MAX\/4;$/;"	m	class:IntVector	file:
low	rep.cc	/^Real ConstrainedRealVector::low = REALV_LOW;$/;"	m	class:ConstrainedRealVector	file:
low	rep.h	/^      Real high, low;$/;"	m	class:RealVector	access:protected
low	rep.h	/^      static FourByteLong low, high;$/;"	m	class:IntVector	access:protected
low	rep.h	/^      static Real high, low;$/;"	m	class:ConstrainedRealVector	access:protected
lower	structs.h	/^  double lower;			\/* lower bound on distance *\/$/;"	m	struct:dist_constraint	access:public
lower_bound_on_rho	ls.h	/^      Real *rho, *lower_bound_on_rho;$/;"	m	class:Pseudo_Solis_Wets	access:protected
lower_bound_on_rho	ls.h	/^      Real rho, lower_bound_on_rho;$/;"	m	class:Solis_Wets	access:protected
m_rate	gs.h	/^	  Real m_rate;$/;"	m	class:Genetic_Algorithm	access:private
m_table_size	gs.h	/^      unsigned int m_table_size;$/;"	m	class:Genetic_Algorithm	access:private
m_type	gs.cc	/^M_mode Genetic_Algorithm::m_type(RepType type)$/;"	f	class:Genetic_Algorithm	signature:(RepType type)
m_type	gs.h	/^      M_mode m_type(RepType);$/;"	p	class:Genetic_Algorithm	access:private	signature:(RepType)
main	config.guess	/^		main()$/;"	f
main	config.guess	/^	main ()$/;"	f
main	config.guess	/^main ()$/;"	f
main	main.cc	/^int main (int argc, char ** argv)$/;"	f	signature:(int argc, char ** argv)
main	main.h	/^int  main( int  argc, char **argv);$/;"	p	signature:( int argc, char **argv)
main	test_times.cc	/^int main( int argc, char **argv, char **envp )$/;"	f	signature:( int argc, char **argv, char **envp )
main	test_times.cc	/^int main( int argc, char **argv, char **envp );$/;"	p	file:	signature:( int argc, char **argv, char **envp )
makeModel	Tests/DlgParser.py	/^    def makeModel(self, lines):$/;"	m	class:DlgParser	access:public
makeModels	Tests/DlgParser.py	/^    def makeModels(self, modelList):$/;"	m	class:DlgParser	access:public
make_state	support.cc	/^State Phenotype::make_state(int ntor)$/;"	f	class:Phenotype	signature:(int ntor)
make_state	support.h	/^      State make_state(int);$/;"	p	class:Phenotype	access:public	signature:(int)
make_state_from_rep	eval.cc	/^void make_state_from_rep(Representation **rep, State *stateNow)$/;"	f	signature:(Representation **rep, State *stateNow)
make_state_from_rep	eval.cc	/^void make_state_from_rep(double *rep, int n, State *now)$/;"	f	signature:(double *rep, int n, State *now)
make_state_from_rep	eval.h	/^void make_state_from_rep(Representation **rep, State *stateNow);$/;"	p	signature:(Representation **rep, State *stateNow)
make_state_from_rep	eval.h	/^void make_state_from_rep(double *x, int n, State *now);$/;"	p	signature:(double *x, int n, State *now)
make_table	gs.cc	/^void Genetic_Algorithm::make_table(int size, Real prob)$/;"	f	class:Genetic_Algorithm	signature:(int size, Real prob)
make_table	gs.h	/^      void make_table(int, Real);$/;"	p	class:Genetic_Algorithm	access:private	signature:(int, Real)
mandir	Makefile	/^mandir = ${prefix}\/man$/;"	m
map	eval.h	/^      Real (*map)[MAX_GRID_PTS][MAX_GRID_PTS][MAX_MAPS];$/;"	m	class:Eval	access:private
map	map_declare.h	/^MapType map[MAX_GRID_PTS][MAX_GRID_PTS][MAX_GRID_PTS][MAX_MAPS],    \/\/  intermolecular interaction energies$/;"	v
map_index	parameters.h	/^  int map_index;		\/* used to set up map atom_types *\/$/;"	m	struct:parameter_entry	access:public
mapc2f	readGridMap.cc	/^Real mapc2f(char numin)$/;"	f	signature:(char numin)
mapc2f	readmap.cc	/^Real mapc2f(char numin)$/;"	f	signature:(char numin)
mapc2f	readmap.h	/^Real   mapc2f( char C_mapValue );$/;"	p	signature:( char C_mapValue )
mapf2c	readGridMap.cc	/^char mapf2c(Real);$/;"	p	file:	signature:(Real)
mapf2c	readmap.cc	/^char mapf2c(Real);$/;"	p	file:	signature:(Real)
mapping	mapping.cc	/^Individual &Individual::mapping(void)$/;"	f	class:Individual	signature:(void)
mapping	support.h	/^      Individual &mapping(void);         \/\/updates phenotype from current genotype values $/;"	p	class:Individual	access:public	signature:(void)
match	Tests/DlgParser.py	/^    def match(self, allLines, verbose=False):$/;"	m	class:DlgParser	access:public
matrixMultiply	conformation_sampler.cc	/^void matrixMultiply(Real m1[3][3], Real m2[3][3], Real result[3][3]) {$/;"	f	signature:(Real m1[3][3], Real m2[3][3], Real result[3][3])
matrixMultiply	conformation_sampler.h	/^void matrixMultiply(Real m1[3][3], Real m2[3][3], Real result[3][3]);$/;"	p	signature:(Real m1[3][3], Real m2[3][3], Real result[3][3])
matrixraa	conformation_sampler.cc	/^void matrixraa(Real matrix[3][3], Real raa[4]) {$/;"	f	signature:(Real matrix[3][3], Real raa[4])
matrixraa	conformation_sampler.h	/^void matrixraa(Real matrix[3][3], Real raa[4]);$/;"	p	signature:(Real matrix[3][3], Real raa[4])
max	constants.h	246;"	d
max_failures	ls.h	/^      unsigned int size, max_its, max_successes, max_failures;$/;"	m	class:Solis_Wets_Base	access:protected
max_generations	gs.h	/^	  unsigned int max_generations;$/;"	m	class:Genetic_Algorithm	access:private
max_its	ls.h	/^      unsigned int size, max_its, max_successes, max_failures;$/;"	m	class:Solis_Wets_Base	access:protected
max_success	ls.h	/^			unsigned int max_success;$/;"	m	class:Pattern_Search	access:protected
max_successes	ls.h	/^      unsigned int size, max_its, max_successes, max_failures;$/;"	m	class:Solis_Wets_Base	access:protected
max_values	conformation_sampler.h	/^		Real max_values[BASE_DIMENSIONS-1];$/;"	m	class:ConformationSampler	access:public
maxdist	mdist.h	/^double maxdist[NUM_ENUM_ATOMTYPES][NUM_ENUM_ATOMTYPES];$/;"	v
maximum	structs.h	/^    Real maximum;$/;"	m	struct:statistics	access:public
maxnum	ranlib.cc	1227;"	d	file:
maxnum	ranlib.cc	1260;"	d	file:
mdist	mdist.h	/^void mdist() {$/;"	f	signature:()
mdist	mdist.h	/^void mdist();$/;"	p	signature:()
mean	structs.h	/^    Real mean;$/;"	m	struct:statistics	access:public
mg_count	gs.h	/^      unsigned int mg_count; \/\/ statistics - mutation gene-by-gene count$/;"	m	class:Global_Search	access:public
mi_count	gs.h	/^      unsigned int mi_count; \/\/ statistics - mutation indiv-by-indiv count$/;"	m	class:Global_Search	access:public
min	constants.h	247;"	d
min_energy	conformation_sampler.h	/^		Real min_energy, min_energy_rmsd;$/;"	m	class:ConformationSampler	access:public
min_energy_rmsd	conformation_sampler.h	/^		Real min_energy, min_energy_rmsd;$/;"	m	class:ConformationSampler	access:public
min_values	conformation_sampler.h	/^		Real min_values[BASE_DIMENSIONS-1];$/;"	m	class:ConformationSampler	access:public
mindist	mdist.h	/^double mindist[NUM_ENUM_ATOMTYPES][NUM_ENUM_ATOMTYPES];$/;"	v
minimum	structs.h	/^    Real minimum;$/;"	m	struct:statistics	access:public
minmeanmax	hybrids.h	/^void minmeanmax( FILE *fp, Population &pop, int num_its, GridMapSetInfo *info );$/;"	p	signature:( FILE *fp, Population &pop, int num_its, GridMapSetInfo *info )
minmeanmax	minmeanmax.cc	/^void minmeanmax( FILE *fp, Population &pop, int num_generations, GridMapSetInfo *info )$/;"	f	signature:( FILE *fp, Population &pop, int num_generations, GridMapSetInfo *info )
mkNewState	mkNewState.cc	/^void mkNewState( State *now,$/;"	f	signature:( State *now, State *last, State *change, Real vt[MAX_TORS][NTRN], int tlist[MAX_TORS][MAX_ATOMS], int ntor, Real crd[MAX_ATOMS][NTRN], Real crdpdb[MAX_ATOMS][NTRN], int natom, Real trnStep, Real qtwStep, Real torStep, Real F_TorConRange[MAX_TORS][MAX_TOR_CON][2], int N_con[MAX_TORS])
mkNewState	mkNewState.h	/^void  mkNewState( State *now,$/;"	p	signature:( State *now, State *last, State *change, Real vt[MAX_TORS][NTRN], int tlist[MAX_TORS][MAX_ATOMS], int ntor, Real crd[MAX_ATOMS][NTRN], Real crdpdb[MAX_ATOMS][NTRN], int natom, Real trnStep, Real qtwStep, Real torStep, Real F_TorConRange[MAX_TORS][MAX_TOR_CON][2], int N_con[MAX_TORS])
mkRandomState	mkRandomState.cc	/^State mkRandomState( int   ntor,$/;"	f	signature:( int ntor, Real F_TorConRange[MAX_TORS][MAX_TOR_CON][2], int N_con[MAX_TORS], GridMapSetInfo *info)
mkRandomState	mkRandomState.h	/^State mkRandomState( int   ntor,$/;"	p	signature:( int ntor, Real F_TorConRange[MAX_TORS][MAX_TOR_CON][2], int N_con[MAX_TORS], GridMapSetInfo *info)
mkTorTree	mkTorTree.cc	/^void mkTorTree( int   atomnumber[ MAX_RECORDS ],$/;"	f	signature:( int atomnumber[ MAX_RECORDS ], char Rec_line[ MAX_RECORDS ][ LINE_LEN ], int nrecord, int tlist[ MAX_TORS ][ MAX_ATOMS ], int *P_ntor, int *P_ntor_ligand, char *smFileName, char pdbaname[ MAX_ATOMS ][ 5 ], Boole *P_B_constrain, int *P_atomC1, int *P_atomC2, Real *P_sqlower, Real *P_squpper, int *P_ntorsdof, int ignore_inter[MAX_ATOMS])
mkTorTree	mkTorTree.h	/^void  mkTorTree(int   atomnumber[MAX_RECORDS],$/;"	p	signature:(int atomnumber[MAX_RECORDS], char record[MAX_RECORDS][LINE_LEN], int nrecord, int tlist[MAX_TORS][MAX_ATOMS], int *P_ntor, int *P_ntor_ligand, char *smFileName, char pdbaname[MAX_ATOMS][5], Boole *P_B_constrain, int *P_atomC1, int *P_atomC2, Real *P_sqlower, Real *P_squpper, int *P_ntorsdof, int ignore_inter[MAX_ATOMS])
mkUnitQuat	qmultiply.cc	/^void mkUnitQuat( Quat *q )$/;"	f	signature:( Quat *q )
mkUnitQuat	qmultiply.h	/^void mkUnitQuat( Quat *q );$/;"	p	signature:( Quat *q )
mkdir_p	Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mltmod	ranlib.cc	/^FourByteLong mltmod(FourByteLong a,FourByteLong s,FourByteLong m)$/;"	f	signature:(FourByteLong a,FourByteLong s,FourByteLong m)
mltmod	ranlib.h	/^extern FourByteLong mltmod(FourByteLong a,FourByteLong s,FourByteLong m);$/;"	p	signature:(FourByteLong a,FourByteLong s,FourByteLong m)
mol	eval.h	/^      Molecule mol;$/;"	m	class:Eval	access:private
mol	support.h	/^      Molecule *mol;		\/* molecule *\/$/;"	m	class:Individual	access:public
molecule	molstruct.h	/^typedef struct molecule {$/;"	s
molecule	structs.h	/^typedef struct molecule$/;"	s
molecule::B_constrain	molstruct.h	/^	Boole B_constrain;$/;"	m	struct:molecule	access:public
molecule::B_haveCharges	molstruct.h	/^	Boole B_haveCharges;$/;"	m	struct:molecule	access:public
molecule::Htype	molstruct.h	/^	int   Htype;$/;"	m	struct:molecule	access:public
molecule::Nnb	molstruct.h	/^	int   Nnb;$/;"	m	struct:molecule	access:public
molecule::Nnbonds	molstruct.h	/^	int   Nnbonds[ MAX_ATOMS ];$/;"	m	struct:molecule	access:public
molecule::S	structs.h	/^  State S;		                    	\/* state of molecule *\/$/;"	m	struct:molecule	access:public
molecule::atomC1	molstruct.h	/^	int   atomC1;$/;"	m	struct:molecule	access:public
molecule::atomC2	molstruct.h	/^	int   atomC2;$/;"	m	struct:molecule	access:public
molecule::atomstr	structs.h	/^  char atomstr[MAX_ATOMS][MAX_CHARS];	\/* strings describing atoms, from PDB file, cols,1-30. *\/$/;"	m	struct:molecule	access:public
molecule::atomstuff	molstruct.h	/^	char  atomstuff[ MAX_ATOMS ][ MAX_CHARS ];$/;"	m	struct:molecule	access:public
molecule::charge	molstruct.h	/^	double charge[ MAX_ATOMS ];$/;"	m	struct:molecule	access:public
molecule::crd	structs.h	/^  Real crd[MAX_ATOMS][SPACE];      	\/* current coordinates of atoms *\/$/;"	m	struct:molecule	access:public
molecule::crdpdb	structs.h	/^  Real crdpdb[MAX_ATOMS][SPACE];	    \/* original coordinates of atoms *\/$/;"	m	struct:molecule	access:public
molecule::natom	molstruct.h	/^	int   natom;$/;"	m	struct:molecule	access:public
molecule::natom	structs.h	/^  int natom;			                \/* number of atoms in molecule *\/$/;"	m	struct:molecule	access:public
molecule::nonbondlist	molstruct.h	/^	NonbondParam *nonbondlist;$/;"	m	struct:molecule	access:public
molecule::ntor	molstruct.h	/^	int   ntor;$/;"	m	struct:molecule	access:public
molecule::ntor1	molstruct.h	/^	int   ntor1;$/;"	m	struct:molecule	access:public
molecule::pdbaname	molstruct.h	/^	char  pdbaname[ MAX_ATOMS ][ 5 ];$/;"	m	struct:molecule	access:public
molecule::pdbqFileName	molstruct.h	/^	char  pdbqFileName[ PATH_MAX ];$/;"	m	struct:molecule	access:public
molecule::sqlower	molstruct.h	/^	double sqlower;$/;"	m	struct:molecule	access:public
molecule::squpper	molstruct.h	/^	double squpper;$/;"	m	struct:molecule	access:public
molecule::tlist	molstruct.h	/^	int   tlist[ MAX_TORS ][ MAX_ATOMS ];$/;"	m	struct:molecule	access:public
molecule::tlist	structs.h	/^  int tlist[MAX_TORS][MAX_ATOMS];	    \/* torsion list of movable atoms *\/$/;"	m	struct:molecule	access:public
molecule::trnsfmd_crdpdb	molstruct.h	/^	double trnsfmd_crdpdb[ MAX_ATOMS ][ NTRN ];$/;"	m	struct:molecule	access:public
molecule::type	molstruct.h	/^	int   type[ MAX_ATOMS ];$/;"	m	struct:molecule	access:public
molecule::untrnfm_crdpdb	molstruct.h	/^	double untrnfm_crdpdb[ MAX_ATOMS ][ NTRN ];$/;"	m	struct:molecule	access:public
molecule::vt	molstruct.h	/^	double vt[ MAX_TORS ][ NTRN ];$/;"	m	struct:molecule	access:public
molecule::vt	structs.h	/^  Real vt[MAX_TORS][SPACE];        	\/* vectors  of torsions *\/$/;"	m	struct:molecule	access:public
msort	support.cc	/^void Population::msort(int m)$/;"	f	class:Population	signature:(int m)
msort	support.h	/^      void msort(int); \/* sorts the first m individuals using heap properties *\/$/;"	p	class:Population	access:public	signature:(int)
multiplyraa	conformation_sampler.cc	/^void multiplyraa(Real raa1[4], Real raa2[4], Real raa_result[4]) {$/;"	f	signature:(Real raa1[4], Real raa2[4], Real raa_result[4])
multiplyraa	conformation_sampler.h	/^void multiplyraa(Real raa1[4], Real raa2[4], Real raa_result[4]);$/;"	p	signature:(Real raa1[4], Real raa2[4], Real raa_result[4])
mutate	gs.cc	/^void Genetic_Algorithm::mutate(Genotype &mutant, int gene_number)$/;"	f	class:Genetic_Algorithm	signature:(Genotype &mutant, int gene_number)
mutate	gs.h	/^      void mutate(Genotype &, int);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Genotype &, int)
mutation	gs.cc	/^void Genetic_Algorithm::mutation(Population &pure)$/;"	f	class:Genetic_Algorithm	signature:(Population &pure)
mutation	gs.h	/^      void mutation(Population &);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Population &)
mutation_table	gs.h	/^      Real *mutation_table;$/;"	m	class:Genetic_Algorithm	access:private
mutation_values	gs.h	/^      void mutation_values(int, int, Real, Real,  Real, Real, Real );$/;"	p	class:Genetic_Algorithm	access:public	signature:(int, int, Real, Real, Real, Real, Real )
mutation_values	gs.h	/^inline void Genetic_Algorithm::mutation_values(int init_low, int init_high, $/;"	f	class:Genetic_Algorithm	signature:(int init_low, int init_high, Real init_alpha, Real init_beta, Real init_tranStep, Real init_quatStep, Real init_torStep )
mytype	rep.h	/^      RepType mytype;$/;"	m	class:Representation	access:protected
name	structs.h	/^  char      name[5];			    \/* PDB atom name; formerly "pdbaname" *\/$/;"	m	struct:atom	access:public
natom	conformation_sampler.cc	/^int natom;$/;"	v
natom	eval.h	/^      int natom, Nnb;$/;"	m	class:Eval	access:private
natom	molstruct.h	/^	int   natom;$/;"	m	struct:molecule	access:public
natom	structs.h	/^  int natom;			                \/* number of atoms in molecule *\/$/;"	m	struct:molecule	access:public
natom	structs.h	/^  int natom;			\/* Number of atoms in fragment *\/$/;"	m	struct:group	access:public
nb_eval	main.cc	/^int nb_eval; \/\/ Current number of Swarm evaluations$/;"	v
nb_group_energy	autoglobal.h	/^Real    nb_group_energy[3] = {0.0};  \/\/ total energy of each nonbond group (intra-ligand, inter, and intra-receptor)$/;"	v
nbe	nbe.cc	/^void nbe( GridMapSetInfo *info,$/;"	f	signature:( GridMapSetInfo *info, EnergyTables *ptr_ad_energy_tables, int num_atm_maps )
nbe	nbe.h	/^void nbe( GridMapSetInfo *info,$/;"	p	signature:( GridMapSetInfo *info, EnergyTables *ptr_ad_energy_tables, int num_atm_maps )
nbs	structs.h	/^  PairID nbs[MAX_NONBONDS];	\/* Non-bond data *\/$/;"	m	struct:group	access:public
nmoved	structs.h	/^  int nmoved;			\/* number of atoms moved by this *\/$/;"	m	struct:torsion	access:public
nnb	structs.h	/^  int       nnb;			        \/* number of non-bonds for this atom *\/$/;"	m	struct:atom	access:public
nnb	structs.h	/^  int nnb;			\/* Number of non-bonds in fragment *\/$/;"	m	struct:group	access:public
noinst_LIBRARIES	Makefile	/^noinst_LIBRARIES = libad.a $/;"	m
nonbond_param	structs.h	/^    nonbond_param() : a1(0), a2(0) {}$/;"	f	struct:nonbond_param	access:public	signature:()
nonbond_param	structs.h	/^typedef struct nonbond_param$/;"	s
nonbond_param::a1	structs.h	/^    int a1;           \/\/ ATM1$/;"	m	struct:nonbond_param	access:public
nonbond_param::a2	structs.h	/^    int a2;           \/\/ ATM2$/;"	m	struct:nonbond_param	access:public
nonbond_param::desolv	structs.h	/^    double desolv;$/;"	m	struct:nonbond_param	access:public
nonbond_param::nonbond_param	structs.h	/^    nonbond_param() : a1(0), a2(0) {}$/;"	f	struct:nonbond_param	access:public	signature:()
nonbond_param::nonbond_type	structs.h	/^    int nonbond_type; \/\/ NBTYPE$/;"	m	struct:nonbond_param	access:public
nonbond_param::q1q2	structs.h	/^    double q1q2;      \/\/ product of atom partial charges$/;"	m	struct:nonbond_param	access:public
nonbond_param::t1	structs.h	/^    int t1;           \/\/ TYPE1$/;"	m	struct:nonbond_param	access:public
nonbond_param::t2	structs.h	/^    int t2;           \/\/ TYPE2$/;"	m	struct:nonbond_param	access:public
nonbond_type	structs.h	/^    int nonbond_type; \/\/ NBTYPE$/;"	m	struct:nonbond_param	access:public
nonbondlist	eval.h	/^      NonbondParam *nonbondlist;$/;"	m	class:Eval	access:private
nonbondlist	molstruct.h	/^	NonbondParam *nonbondlist;$/;"	m	struct:molecule	access:public
nonbonds	nonbonds.cc	/^void nonbonds(const Real  crdpdb[MAX_ATOMS][SPACE],$/;"	f	signature:(const Real crdpdb[MAX_ATOMS][SPACE], int nbmatrix[MAX_ATOMS][MAX_ATOMS], const int natom, const int bond_index[MAX_ATOMS], int B_include_1_4_interactions, int bonded[MAX_ATOMS][6])
nonbonds	nonbonds.h	/^void  nonbonds( const Real crdpdb[MAX_ATOMS][SPACE],  $/;"	p	signature:( const Real crdpdb[MAX_ATOMS][SPACE], int nbmatrix[MAX_ATOMS][MAX_ATOMS], const int natom, const int bond_index[MAX_ATOMS], int B_include_1_4_interactions, int bonded[MAX_ATOMS][6])
normQuat	qmultiply.cc	/^Quat normQuat( Quat q )$/;"	f	signature:( Quat q )
normQuat	qmultiply.h	/^Quat normQuat( Quat q );$/;"	p	signature:( Quat q )
normRot	qmultiply.cc	/^Quat normRot( Quat q )$/;"	f	signature:( Quat q )
normRot	qmultiply.h	/^Quat normRot( Quat q );$/;"	p	signature:( Quat q )
normalize	rep.cc	/^void ConstrainedRealVector::normalize(void)$/;"	f	class:ConstrainedRealVector	signature:(void)
normalize	rep.h	/^      void normalize(void);$/;"	p	class:ConstrainedRealVector	access:protected	signature:(void)
normalized	rep.h	/^      unsigned char normalized; \/\/ =1 means the vector's normalized$/;"	m	class:Representation	access:protected
normalized_Boltzmann	conformation_sampler.cc	/^Real ConformationSampler::normalized_Boltzmann(void) {$/;"	f	class:ConformationSampler	signature:(void)
normalized_Boltzmann	conformation_sampler.h	/^		Real normalized_Boltzmann(void);$/;"	p	class:ConformationSampler	access:private	signature:(void)
normalized_volume	conformation_sampler.cc	/^Real ConformationSampler::normalized_volume(void) {$/;"	f	class:ConformationSampler	signature:(void)
normalized_volume	conformation_sampler.h	/^		Real normalized_volume(void);$/;"	p	class:ConformationSampler	access:private	signature:(void)
ntor	molstruct.h	/^	int   ntor;$/;"	m	struct:molecule	access:public
ntor	structs.h	/^  int ntor;			\/* Number of torsions in fragment *\/$/;"	m	struct:group	access:public
ntor	structs.h	/^  int ntor;			\/* number of torsions *\/$/;"	m	struct:rotamer	access:public
ntor	structs.h	/^  int ntor;			\/* number of torsions in molecule *\/$/;"	m	struct:state	access:public
ntor1	molstruct.h	/^	int   ntor1;$/;"	m	struct:molecule	access:public
num_all_maps	grid.h	/^    int             num_all_maps; \/\/ number of all maps, = num_atom_types + 2$/;"	m	struct:grid_map_set_info	access:public
num_alloc	grid.h	/^    int             num_alloc[3]; \/\/ the dimensions allocated, >= num_points1; if this is a power of 2, it should be faster$/;"	m	struct:grid_map_set_info	access:public
num_alloc_maps	grid.h	/^    int             num_alloc_maps; \/\/ allocated number of maps, >= num_all_maps$/;"	m	struct:grid_map_set_info	access:public
num_atom_types	grid.h	/^    int             num_atom_types; \/\/ number of atom types$/;"	m	struct:grid_map_set_info	access:public
num_dimensions	support.h	/^      unsigned int num_dimensions(void);$/;"	p	class:Phenotype	access:public	signature:(void)
num_evals	eval.h	/^      UnsignedFourByteLong num_evals;$/;"	m	class:Eval	access:private
num_generations	gs.h	/^      unsigned int num_generations(void);$/;"	p	class:Genetic_Algorithm	access:public	signature:(void)
num_generations	gs.h	/^inline unsigned int Genetic_Algorithm::num_generations(void)$/;"	f	class:Genetic_Algorithm	signature:(void)
num_genes	support.h	/^      unsigned int num_genes(void); \/* returns number_of_genes (see above) *\/$/;"	p	class:Genotype	access:public	signature:(void)
num_genes	support.h	/^inline unsigned int Genotype::num_genes(void)$/;"	f	class:Genotype	signature:(void)
num_individuals	support.h	/^      unsigned int num_individuals(void); \/* returns the size of the pop. *\/$/;"	p	class:Population	access:public	signature:(void)
num_individuals	support.h	/^inline unsigned int Population::num_individuals(void)$/;"	f	class:Population	signature:(void)
num_points	grid.h	/^    int             num_points[3]; \/\/ the actual dimensions of the grid minus 1; should be an even number$/;"	m	struct:grid_map_set_info	access:public
num_points1	grid.h	/^    int             num_points1[3]; \/\/ the actual dimensions of the grid; should be an odd number$/;"	m	struct:grid_map_set_info	access:public
num_pts	support.h	/^      unsigned int num_pts(void);$/;"	p	class:Phenotype	access:public	signature:(void)
num_pts	support.h	/^inline unsigned int Phenotype::num_pts(void)$/;"	f	class:Phenotype	signature:(void)
num_vectors	support.h	/^      unsigned int num_vectors(void); \/* e.g. "real,bit,bit,int" would = 4 *\/$/;"	p	class:Genotype	access:public	signature:(void)
num_vectors	support.h	/^inline unsigned int Genotype::num_vectors(void)$/;"	f	class:Genotype	signature:(void)
number	structs.h	/^    int number;$/;"	m	struct:statistics	access:public
number_of_dimensions	support.h	/^      unsigned int number_of_dimensions, number_of_points;$/;"	m	class:Phenotype	access:protected
number_of_genes	support.h	/^      unsigned int number_of_genes;$/;"	m	class:Genotype	access:protected
number_of_points	rep.h	/^      unsigned int number_of_points(void) const;$/;"	p	class:Representation	access:public	signature:(void) const
number_of_points	rep.h	/^inline unsigned int Representation::number_of_points(void) const$/;"	f	class:Representation	signature:(void) const
number_of_points	support.h	/^      unsigned int number_of_dimensions, number_of_points;$/;"	m	class:Phenotype	access:protected
number_of_pts	rep.h	/^      unsigned int number_of_pts;$/;"	m	class:Representation	access:protected
number_of_vectors	support.h	/^      unsigned int number_of_vectors; \/\/ #vectors in rep_vector$/;"	m	class:Genotype	access:protected
numg	com.cc	100;"	d	file:
numg	com.cc	118;"	d	file:
numg	com.cc	135;"	d	file:
numg	com.cc	172;"	d	file:
numg	com.cc	195;"	d	file:
numg	com.cc	232;"	d	file:
numg	com.cc	246;"	d	file:
numg	com.cc	274;"	d	file:
numg	com.cc	295;"	d	file:
numg	com.cc	325;"	d	file:
numg	com.cc	349;"	d	file:
numg	com.cc	366;"	d	file:
numg	com.cc	386;"	d	file:
numg	com.cc	405;"	d	file:
numg	com.cc	56;"	d	file:
numg	com.cc	81;"	d	file:
numg	ranlib.cc	621;"	d	file:
numg	ranlib.cc	631;"	d	file:
nx	structs.h	/^  double nx;			\/* unit vector's x-component *\/$/;"	m	struct:quat	access:public
ny	structs.h	/^  double ny;			\/* unit vector's y-component *\/$/;"	m	struct:quat	access:public
nz	structs.h	/^  double nz;			\/* unit vector's z-component *\/$/;"	m	struct:quat	access:public
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
one_prob	rep.cc	/^Real BitVector::one_prob = 0.5;$/;"	m	class:BitVector	file:
one_prob	rep.h	/^      static Real one_prob;$/;"	m	class:BitVector	access:protected
openFile	openfile.cc	/^int openFile( char       *filename,$/;"	f	signature:( char *filename, char mode[], FILE **fp, Clock start, struct tms tms_start, Boole mayExit)
openFile	openfile.h	/^int openFile( char       *filename,$/;"	p	signature:( char *filename, char mode[], FILE **fp, Clock start, struct tms tms_start, Boole mayExit)
openfile	openfile.cc	/^int openfile( char *filename,$/;"	f	signature:( char *filename, char mode[], FILE **fp )
openfile	openfile.h	/^int  openfile( char  *filename,$/;"	p	signature:( char *filename, char mode[], FILE **fp )
operator ()	eval.cc	/^double Eval::operator()(Representation **rep)$/;"	f	class:Eval	signature:(Representation **rep)
operator ()	eval.cc	/^double Eval::operator()(Representation **rep, int term)$/;"	f	class:Eval	signature:(Representation **rep, int term)
operator ()	eval.cc	/^double Eval::operator()(double* vec, int len)$/;"	f	class:Eval	signature:(double* vec, int len)
operator ()	eval.h	/^      double operator()(Representation **);$/;"	p	class:Eval	access:public	signature:(Representation **)
operator ()	eval.h	/^      double operator()(Representation **, int); \/\/ GMM - allows calculation of a particular term of the total energy$/;"	p	class:Eval	access:public	signature:(Representation **, int)
operator ()	eval.h	/^      double operator()(double*, int);$/;"	p	class:Eval	access:public	signature:(double*, int)
operator =	rep.cc	/^Representation &BitVector::operator=(const Representation &original)$/;"	f	class:BitVector	signature:(const Representation &original)
operator =	rep.cc	/^Representation &ConstrainedRealVector::operator=(const Representation &original)$/;"	f	class:ConstrainedRealVector	signature:(const Representation &original)
operator =	rep.cc	/^Representation &IntVector::operator=(const Representation &original)$/;"	f	class:IntVector	signature:(const Representation &original)
operator =	rep.cc	/^Representation &RealVector::operator=(const Representation &original)$/;"	f	class:RealVector	signature:(const Representation &original)
operator =	rep.h	/^      Representation &operator=(const Representation &);$/;"	p	class:BitVector	access:public	signature:(const Representation &)
operator =	rep.h	/^      Representation &operator=(const Representation &);$/;"	p	class:ConstrainedRealVector	access:public	signature:(const Representation &)
operator =	rep.h	/^      Representation &operator=(const Representation &);$/;"	p	class:IntVector	access:public	signature:(const Representation &)
operator =	rep.h	/^      Representation &operator=(const Representation &);$/;"	p	class:RealVector	access:public	signature:(const Representation &)
operator =	rep.h	/^      virtual Representation &operator=(const Representation &) = 0;$/;"	p	class:Representation	access:public	signature:(const Representation &)
operator =	support.cc	/^Genotype &Genotype::operator=(const Genotype &original)$/;"	f	class:Genotype	signature:(const Genotype &original)
operator =	support.cc	/^Phenotype &Phenotype::operator=(const Phenotype &original)$/;"	f	class:Phenotype	signature:(const Phenotype &original)
operator =	support.cc	/^Population &Population::operator=(const Population &original)$/;"	f	class:Population	signature:(const Population &original)
operator =	support.h	/^      Genotype &operator=(const Genotype &);$/;"	p	class:Genotype	access:public	signature:(const Genotype &)
operator =	support.h	/^      Individual &operator=(const Individual &); \/* assignment function for$/;"	p	class:Individual	access:public	signature:(const Individual &)
operator =	support.h	/^      Phenotype &operator=(const Phenotype &);$/;"	p	class:Phenotype	access:public	signature:(const Phenotype &)
operator =	support.h	/^      Population &operator=(const Population &);$/;"	p	class:Population	access:public	signature:(const Population &)
operator =	support.h	/^inline Individual &Individual::operator=(const Individual &original)$/;"	f	class:Individual	signature:(const Individual &original)
operator []	support.cc	/^Individual &Population::operator[](int ind_num)$/;"	f	class:Population	signature:(int ind_num)
operator []	support.h	/^      Individual &operator[](int);  \/* for accessing a particular indiv.in pop*\/$/;"	p	class:Population	access:public	signature:(int)
ordering	gs.h	/^      unsigned int *ordering;	  $/;"	m	class:Genetic_Algorithm	access:private
outputEveryNgens	gs.h	/^      unsigned int outputEveryNgens; \/\/ gmm 2000.11.1,2003.08.18$/;"	m	class:Genetic_Algorithm	access:private
output_state	output_state.cc	/^void output_state( FILE *fp,$/;"	f	signature:( FILE *fp, State S, int ntor, int istep, Real energy, Real eint, char lastmove, Boole B_watch, char *FN_watch, char atomstuff[MAX_ATOMS][MAX_CHARS], int natom, Real crd[MAX_ATOMS][SPACE])
output_state	output_state.h	/^void  output_state( FILE  *fp,$/;"	p	signature:( FILE *fp, State S, int ntor, int istep, Real energy, Real eint, char lastmove, Boole B_watch, char *FN_watch, char atomstuff[MAX_ATOMS][MAX_CHARS], int natom, Real crd[MAX_ATOMS][SPACE])
output_statistics	conformation_sampler.cc	/^void ConformationSampler::output_statistics(void) {$/;"	f	class:ConformationSampler	signature:(void)
output_statistics	conformation_sampler.h	/^		void output_statistics(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
outputdir	Makefile	/^	outputdir=`pwd` ;\\$/;"	m
pair_id	structs.h	/^typedef struct pair_id$/;"	s
pair_id::atom1	structs.h	/^  Atom *atom1;			\/* pointer to one atom in pair *\/$/;"	m	struct:pair_id	access:public
pair_id::atom2	structs.h	/^  Atom *atom2;			\/* pointer to other atom *\/$/;"	m	struct:pair_id	access:public
parFile	autoglobal.h	/^FILE    *parFile;$/;"	v
param_string_4_0	default_parameters.h	/^char *param_string_4_0[MAX_LINES] = {$/;"	v
param_string_4_1	default_parameters.h	/^char *param_string_4_1[MAX_LINES] = {$/;"	v
parameter_entry	parameters.h	/^typedef struct parameter_entry$/;"	s
parameter_entry::Rij	parameters.h	/^  double Rij;			\/* Lennard-Jones equilibrium separation *\/$/;"	m	struct:parameter_entry	access:public
parameter_entry::Rij_hb	parameters.h	/^  double Rij_hb;		\/* 12-10 Lennard-Jones equilibrium separation *\/$/;"	m	struct:parameter_entry	access:public
parameter_entry::autogrid_type	parameters.h	/^  char autogrid_type[MAX_LEN_AUTOGRID_TYPE + 1];	\/* autogrid_type is a string based on babel_types assigned by PyBabel *\/$/;"	m	struct:parameter_entry	access:public
parameter_entry::bond_index	parameters.h	/^  int bond_index;		\/* used to set up bonds; corresponds to the enum in mdist.h *\/$/;"	m	struct:parameter_entry	access:public
parameter_entry::epsij	parameters.h	/^  double epsij;			\/* Lennard-Jones energy well-depth *\/$/;"	m	struct:parameter_entry	access:public
parameter_entry::epsij_hb	parameters.h	/^  double epsij_hb;		\/* 12-10 Lennard-Jones energy well-depth *\/$/;"	m	struct:parameter_entry	access:public
parameter_entry::hbond	parameters.h	/^  hbond_type hbond;		\/* hbonding character: $/;"	m	struct:parameter_entry	access:public
parameter_entry::map_index	parameters.h	/^  int map_index;		\/* used to set up map atom_types *\/$/;"	m	struct:parameter_entry	access:public
parameter_entry::rec_index	parameters.h	/^  int rec_index;		\/* used to set up receptor atom_types *\/$/;"	m	struct:parameter_entry	access:public
parameter_entry::solpar	parameters.h	/^  double solpar;		\/* solvation parameter *\/$/;"	m	struct:parameter_entry	access:public
parameter_entry::vol	parameters.h	/^  double vol;			\/* solvation volume *\/$/;"	m	struct:parameter_entry	access:public
parameter_library	read_parameter_library.cc	/^static char parameter_library[MAX_CHARS];$/;"	v	file:
parse	Tests/DlgParser.py	/^    def parse(self, filename):$/;"	m	class:DlgParser	access:public
parse_PDBQT_line	parse_PDBQT_line.cc	/^int parse_PDBQT_line( char line[LINE_LEN] )$/;"	f	signature:( char line[LINE_LEN] )
parse_PDBQT_line	parse_PDBQT_line.h	/^int  parse_PDBQT_line( char  line[LINE_LEN] );$/;"	p	signature:( char line[LINE_LEN] )
parse_dpf_line	parse_dpf_line.cc	/^int parse_dpf_line( char line[LINE_LEN] )$/;"	f	signature:( char line[LINE_LEN] )
parse_dpf_line	parse_dpf_line.h	/^int  parse_dpf_line( char  line[LINE_LEN] );$/;"	p	signature:( char line[LINE_LEN] )
parse_energy_from_DLG	Tests/test_autodock4.py	/^def parse_energy_from_DLG( dlg_filename, energy_list):$/;"	f	access:public
parse_param_line	parse_param_line.cc	/^int parse_param_line( char line[LINE_LEN] )$/;"	f	signature:( char line[LINE_LEN] )
parse_param_line	parse_param_line.h	/^int  parse_param_line( char  line[LINE_LEN] );$/;"	p	signature:( char line[LINE_LEN] )
parse_tors_mode	autoglobal.h	/^int     parse_tors_mode = FALSE;$/;"	v
parse_trj_line	parse_trj_line.cc	/^int parse_trj_line( char line[LINE_LEN] )$/;"	f	signature:( char line[LINE_LEN] )
parse_trj_line	parse_trj_line.h	/^int  parse_trj_line( char  line[LINE_LEN] );$/;"	p	signature:( char line[LINE_LEN] )
parsetypes	parsetypes.cc	/^int parsetypes(char * line, char *words[], int maxwords)$/;"	f	signature:(char * line, char *words[], int maxwords)
parsetypes	parsetypes.h	/^int parsetypes(char * line, char *words[], int maxwords);$/;"	p	signature:(char * line, char *words[], int maxwords)
partition_function	conformation_sampler.cc	/^Real ConformationSampler::partition_function(int bin) {$/;"	f	class:ConformationSampler	signature:(int bin)
partition_function	conformation_sampler.cc	/^Real ConformationSampler::partition_function(void) {$/;"	f	class:ConformationSampler	signature:(void)
partition_function	conformation_sampler.h	/^		Real partition_function(int bin);$/;"	p	class:ConformationSampler	access:public	signature:(int bin)
partition_function	conformation_sampler.h	/^		Real partition_function(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
pattern	ls.h	/^			Real *pattern;$/;"	m	class:Pattern_Search	access:protected
pattern_explore	ls.cc	/^Phenotype Pattern_Search::pattern_explore(const Phenotype& base) {$/;"	f	class:Pattern_Search	signature:(const Phenotype& base)
pattern_explore	ls.h	/^			Phenotype pattern_explore(const Phenotype&);$/;"	p	class:Pattern_Search	access:protected	signature:(const Phenotype&)
pattern_move	ls.cc	/^Phenotype Pattern_Search::pattern_move(const Phenotype& base) {$/;"	f	class:Pattern_Search	signature:(const Phenotype& base)
pattern_move	ls.h	/^			Phenotype pattern_move(const Phenotype&);$/;"	p	class:Pattern_Search	access:protected	signature:(const Phenotype&)
pdbaname	molstruct.h	/^	char  pdbaname[ MAX_ATOMS ][ 5 ];$/;"	m	struct:molecule	access:public
pdbqFileName	molstruct.h	/^	char  pdbqFileName[ PATH_MAX ];$/;"	m	struct:molecule	access:public
pdbqfilnam	structs.h	/^  char pdbqfilnam[PATH_MAX];	\/* PDBQ filename holding these data *\/$/;"	m	struct:group	access:public
phenotyp	support.h	/^      Phenotype phenotyp; \/* Phenotype  "     "      "   " *local search*  operators, eg SW *\/$/;"	m	class:Individual	access:public
phrtsd	ranlib.cc	/^void phrtsd(char* phrase,FourByteLong *seed1,FourByteLong *seed2)$/;"	f	signature:(char* phrase,FourByteLong *seed1,FourByteLong *seed2)
phrtsd	ranlib.h	/^extern void phrtsd(char* phrase,FourByteLong* seed1,FourByteLong* seed2);$/;"	p	signature:(char* phrase,FourByteLong* seed1,FourByteLong* seed2)
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/covdock$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/covdock$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/covdock$/;"	m
position	structs.h	/^typedef struct position {$/;"	s
position::f	structs.h	/^        double f;		\/\/ fitness value of particle$/;"	m	struct:position	access:public
position::prev_x	structs.h	/^        double prev_x[D_max];		\/\/ previous fitness value of particle$/;"	m	struct:position	access:public
position::size	structs.h	/^        int size;$/;"	m	struct:position	access:public
position::x	structs.h	/^        double x[D_max];$/;"	m	struct:position	access:public
pr	autocomm.h	131;"	d
prClusterHist	prClusterHist.cc	/^void prClusterHist( int ncluster,$/;"	f	signature:( int ncluster, int irunmax, Real clus_rms_tol, int num_in_clu[MAX_RUNS], int cluster[MAX_RUNS][MAX_RUNS], Real econf[MAX_RUNS], Real clu_rms[MAX_RUNS][MAX_RUNS], Real ref_rms[MAX_RUNS])
prClusterHist	prClusterHist.h	/^void  prClusterHist(int   ncluster,$/;"	p	signature:(int ncluster, int irunmax, Real clus_rms_tol, int num_in_clu[MAX_RUNS], int cluster[MAX_RUNS][MAX_RUNS], Real econf[MAX_RUNS], Real clu_rms[MAX_RUNS][MAX_RUNS], Real ref_rms[MAX_RUNS])
prInitialState	prInitialState.cc	/^void prInitialState($/;"	f	signature:( EnergyBreakdown *p_eb, int natom, Real crd[MAX_ATOMS][SPACE], char atomstuff[MAX_ATOMS][MAX_CHARS], int type[MAX_ATOMS], Real emap[MAX_ATOMS], Real elec[MAX_ATOMS], Real charge[MAX_ATOMS], int ligand_is_inhibitor, Boole B_have_flexible_residues, Unbound_Model ad4_unbound_model )
prInitialState	prInitialState.h	/^void  prInitialState( $/;"	p	signature:( EnergyBreakdown *eb, int natom, Real crd[MAX_ATOMS][SPACE], char atomstuff[MAX_ATOMS][MAX_CHARS], int type[MAX_ATOMS], Real emap[MAX_ATOMS], Real elec[MAX_ATOMS], Real charge[MAX_ATOMS], int ligand_is_inhibitor, Boole B_have_flexible_residues, Unbound_Model ad4_unbound_model )
prStr	autocomm.h	133;"	d
prTorConList	prTorConList.cc	/^void prTorConList( int ntor,$/;"	f	signature:( int ntor, Boole B_isTorConstrained[MAX_TORS], unsigned short US_torProfile[MAX_TORS][NTORDIVS], Real F_TorConRange[MAX_TORS][MAX_TOR_CON][2], int N_con[MAX_TORS])
prTorConList	prTorConList.h	/^void  prTorConList( int   ntor,$/;"	p	signature:( int ntor, Boole B_isTorConstrained[MAX_TORS], unsigned short US_torProfile[MAX_TORS][NTORDIVS], Real F_TorConRange[MAX_TORS][MAX_TOR_CON][2], int N_con[MAX_TORS])
pr_2x	autocomm.h	132;"	d
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
prev_x	structs.h	/^        double prev_x[D_max];		\/\/ previous fitness value of particle$/;"	m	struct:position	access:public
print	support.cc	/^void Population::print(FILE *output, int num) {$/;"	f	class:Population	signature:(FILE *output, int num)
print	support.h	/^      void print(FILE *, int); \/* like above *\/$/;"	p	class:Population	access:public	signature:(FILE *, int)
print1000	printEnergies.cc	43;"	d	file:
print1000_no_sign	printEnergies.cc	/^void print1000_no_sign(FILE* file, double x) {$/;"	f	signature:(FILE* file, double x)
printDState	ls.cc	/^void printDState(FILE *logFile,char * msg,Phenotype &newPh, int i, Real prevxyz[3],$/;"	f	signature:(FILE *logFile,char * msg,Phenotype &newPh, int i, Real prevxyz[3], Real startxyz[3], Quat prevQuat, Quat startQuat, unsigned int num_successes, unsigned int num_failures, Real temp_rho, Real * bias, Real * deviates)
printEnergies	printEnergies.cc	/^void printEnergies( EnergyBreakdown *eb,$/;"	f	signature:( EnergyBreakdown *eb, const char *prefixString, int ligand_is_inhibitor, Real emap_total, Real elec_total, Boole B_have_flexible_residues, Unbound_Model ad4_unbound_model )
printEnergies	printEnergies.h	/^void printEnergies( EnergyBreakdown *eb,$/;"	p	signature:( EnergyBreakdown *eb, const char *prefixString, int ligand_is_inhibitor, Real emap_total, Real elec_total, Boole B_have_flexible_residues, Unbound_Model ad4_unbound_model)
printIndividualsState	support.cc	/^void Individual::printIndividualsState(FILE *filePtr, int ntor, int detail) $/;"	f	class:Individual	signature:(FILE *filePtr, int ntor, int detail)
printIndividualsState	support.h	/^      void printIndividualsState(FILE *, int, int); \/* print out the state of this individual *\/$/;"	p	class:Individual	access:public	signature:(FILE *, int, int)
printPopulationAsCoordsEnergies	support.cc	/^void Population::printPopulationAsCoordsEnergies(FILE *output, int num, int ntor) {$/;"	f	class:Population	signature:(FILE *output, int num, int ntor)
printPopulationAsCoordsEnergies	support.h	/^      void printPopulationAsCoordsEnergies(FILE *, int, int); \/*prints energies,states of top energies *\/$/;"	p	class:Population	access:public	signature:(FILE *, int, int)
printPopulationAsStates	support.cc	/^void Population::printPopulationAsStates(FILE *output, int num, int ntor) {$/;"	f	class:Population	signature:(FILE *output, int num, int ntor)
printPopulationAsStates	support.h	/^      void printPopulationAsStates(FILE *, int, int); \/*prints energies,states of top energies *\/$/;"	p	class:Population	access:public	signature:(FILE *, int, int)
printPopulationStatistics	support.cc	/^int Population::printPopulationStatistics(FILE *output, int level, Boole appendNewline) {$/;"	f	class:Population	signature:(FILE *output, int level, Boole appendNewline)
printPopulationStatistics	support.h	/^      int printPopulationStatistics(FILE *, int, Boole); \/* prints best, worse, mean, etc energies *\/$/;"	p	class:Population	access:public	signature:(FILE *, int, Boole)
printPopulationStatisticsVerbose	support.cc	/^int Population::printPopulationStatisticsVerbose(FILE * output, $/;"	f	class:Population	signature:(FILE * output, unsigned int generations, long int nevals, const char suffix[])
printPopulationStatisticsVerbose	support.h	/^      int printPopulationStatisticsVerbose(FILE *, unsigned int, long int, const char []); \/* print with generations & #evals *\/$/;"	p	class:Population	access:public	signature:(FILE *, unsigned int, long int, const char [])
printQuat	qmultiply.cc	/^void printQuat( FILE *fp, Quat q )$/;"	f	signature:( FILE *fp, Quat q )
printQuat	qmultiply.h	/^void printQuat( FILE *fp, Quat q );$/;"	p	signature:( FILE *fp, Quat q )
printQuat_q	qmultiply.cc	/^void printQuat_q( FILE *fp, Quat q )$/;"	f	signature:( FILE *fp, Quat q )
printQuat_q	qmultiply.h	/^void printQuat_q( FILE *fp, Quat q );$/;"	p	signature:( FILE *fp, Quat q )
printQuat_r	qmultiply.cc	/^void printQuat_r( FILE *fp, Quat q )$/;"	f	signature:( FILE *fp, Quat q )
printQuat_r	qmultiply.h	/^void printQuat_r( FILE *fp, Quat q );$/;"	p	signature:( FILE *fp, Quat q )
printState	stateLibrary.cc	/^void printState( FILE *fp, $/;"	f	signature:( FILE *fp, State S, int detail )
printState	stateLibrary.h	/^void printState( FILE *fp,$/;"	p	signature:( FILE *fp, State state, int detail )
printStateEnergies	printEnergies.cc	/^void printStateEnergies( EnergyBreakdown *eb, const char  *prefixString, int ligand_is_inhibitor )$/;"	f	signature:( EnergyBreakdown *eb, const char *prefixString, int ligand_is_inhibitor )
printStateEnergies	printEnergies.h	/^void printStateEnergies( EnergyBreakdown *eb,$/;"	p	signature:( EnergyBreakdown *eb, const char *prefixString, int ligand_is_inhibitor)
print_1_4_message	nonbonds.cc	/^void print_1_4_message(FILE *file, Boole B_include_1_4_interactions,  Real scale_1_4)$/;"	f	signature:(FILE *file, Boole B_include_1_4_interactions, Real scale_1_4)
print_1_4_message	nonbonds.h	/^void print_1_4_message(FILE *file, Boole B_include_1_4_interactions,  Real scale_1_4);$/;"	p	signature:(FILE *file, Boole B_include_1_4_interactions, Real scale_1_4)
print_2x	print_2x.cc	/^print_2x( FILE *stream1,$/;"	f	signature:( FILE *stream1, FILE *stream2, const char *string )
print_2x	print_2x.h	/^void  print_2x( FILE  *stream1,$/;"	p	signature:( FILE *stream1, FILE *stream2, const char *string )
print_PDBQT	writePDBQT.cc	/^void print_PDBQT( FILE *logFile, $/;"	f	signature:( FILE *logFile, const int true_ligand_atoms, const char atomstuff[MAX_ATOMS][MAX_CHARS], const Real crdpdb[MAX_ATOMS][SPACE], const Real charge[MAX_ATOMS], const ParameterEntry parameterArray[MAX_ATOM_TYPES], const int type[MAX_ATOMS], const char prefix[MAX_CHARS] )
print_PDBQT	writePDBQT.h	/^void print_PDBQT( FILE *logFile, $/;"	p	signature:( FILE *logFile, const int true_ligand_atoms, const char atomstuff[MAX_ATOMS][MAX_CHARS], const Real crdpdb[MAX_ATOMS][SPACE], const Real charge[MAX_ATOMS], const ParameterEntry parameterArray[MAX_ATOM_TYPES], const int type[MAX_ATOMS], const char prefix[MAX_CHARS] )
print_PDBQ_atom_resnum	writePDBQT.cc	/^void print_PDBQ_atom_resnum( FILE *logFile, $/;"	f	signature:( FILE *logFile, const char prefix[MAX_CHARS], int atom_num, const char atomstuff[], const int resnum, const Real crd[MAX_ATOMS][SPACE], const Real vdW, const Real Elec, const Real charge, const char * suffix )
print_PDBQ_atom_resnum	writePDBQT.h	/^void print_PDBQ_atom_resnum( FILE *logFile, $/;"	p	signature:( FILE *logFile, const char prefix[MAX_CHARS], int atom_num, const char atomstuff[], const int resnum, const Real crdpdb[MAX_ATOMS][SPACE], const Real vdW, const Real Elec, const Real charge, const char * suffix )
print_PDBQ_atom_resstr	writePDBQT.cc	/^void print_PDBQ_atom_resstr( FILE *logFile, $/;"	f	signature:( FILE *logFile, const char prefix[MAX_CHARS], int atom_num, const char atomstuff[], const Real crd[MAX_ATOMS][SPACE], const Real vdW, const Real Elec, const Real charge, const char * suffix )
print_PDBQ_atom_resstr	writePDBQT.h	/^void print_PDBQ_atom_resstr( FILE *logFile, $/;"	p	signature:( FILE *logFile, const char prefix[MAX_CHARS], int atom_num, const char atomstuff[], const Real crdpdb[MAX_ATOMS][SPACE], const Real vdW, const Real Elec, const Real charge, const char * suffix )
print_atomic_energies	print_atomic_energies.cc	/^void print_atomic_energies( int natom, $/;"	f	signature:( int natom, char atomstuff[MAX_ATOMS][MAX_CHARS], int type[MAX_ATOMS], Real emap[MAX_ATOMS], Real elec[MAX_ATOMS], Real charge[MAX_ATOMS] )
print_atomic_energies	print_atomic_energies.h	/^void  print_atomic_energies(int   natom,$/;"	p	signature:(int natom, char atomstuff[MAX_ATOMS][MAX_CHARS], int type[MAX_ATOMS], Real emap[MAX_ATOMS], Real elec[MAX_ATOMS], Real charge[MAX_ATOMS] )
print_avsfld	print_avsfld.cc	/^void print_avsfld( FILE *logFile,$/;"	f	signature:( FILE *logFile, int veclen, int natom, int nframe, int offset[VECLENMAX], int stride, char *label, char *filename )
print_avsfld	print_avsfld.h	/^void  print_avsfld(FILE  *logFile,$/;"	p	signature:(FILE *logFile, int veclen, int natom, int nframe, int offset[VECLENMAX], int stride, char *label, char *filename )
print_molar	printEnergies.cc	/^void print_molar(FILE* file, double x) {$/;"	f	signature:(FILE* file, double x)
print_nonbonds	weedbonds.cc	/^void print_nonbonds($/;"	f	signature:( int natom, char pdbaname[MAX_ATOMS][5], int rigid_piece[MAX_ATOMS], int ntor, int tlist[MAX_TORS][MAX_ATOMS], int nbmatrix[MAX_ATOMS][MAX_ATOMS], int Nnb, NonbondParam *nonbondlist, int outlev, int type[MAX_ATOMS])
print_nonbonds	weedbonds.h	/^void print_nonbonds($/;"	p	signature:( int natom, char pdbaname[MAX_ATOMS][5], int piece[MAX_ATOMS], int ntor, int tlist[MAX_TORS][MAX_ATOMS], int nbmatrix[MAX_ATOMS][MAX_ATOMS], int Nnb, NonbondParam *nonbondlist, int outlev, int type[MAX_ATOMS])
print_q_reorient_message	qmultiply.cc	/^void print_q_reorient_message( FILE *logFile, Quat q_reorient )$/;"	f	signature:( FILE *logFile, Quat q_reorient )
print_q_reorient_message	qmultiply.h	/^void print_q_reorient_message( FILE *logFile, Quat q_reorient );$/;"	p	signature:( FILE *logFile, Quat q_reorient )
print_rem	print_rem.cc	/^void print_rem( FILE *outFile,$/;"	f	signature:( FILE *outFile, int Rank, int NumMem, int Run, Real ref_rms)
print_rem	print_rem.h	/^void  print_rem(  FILE  *outFile,$/;"	p	signature:( FILE *outFile, int Rank, int NumMem, int Run, Real ref_rms)
printbonds	nonbonds.cc	/^void printbonds(const int natom, const int bonded[MAX_ATOMS][6], const char *message, const int B_print_all_bonds)$/;"	f	signature:(const int natom, const int bonded[MAX_ATOMS][6], const char *message, const int B_print_all_bonds)
printbonds	nonbonds.h	/^void printbonds(const int natom, const int bonded[MAX_ATOMS][6], const char *message, const int B_print_all_bonds);$/;"	p	signature:(const int natom, const int bonded[MAX_ATOMS][6], const char *message, const int B_print_all_bonds)
printdate	printdate.cc	/^void printdate( FILE *fp, int flag )$/;"	f	signature:( FILE *fp, int flag )
printdate	printdate.h	/^void  printdate( FILE  *fp, int   flag );$/;"	p	signature:( FILE *fp, int flag )
printhms	printhms.cc	/^void printhms( Real t )$/;"	f	signature:( Real t )
printhms	printhms.h	/^void  printhms( Real t );$/;"	p	signature:( Real t )
probe_ind	conformation_sampler.h	/^		Individual base_ind, probe_ind;$/;"	m	class:ConformationSampler	access:public
probe_point	conformation_sampler.h	/^		Phenotype base_point, probe_point;$/;"	m	class:ConformationSampler	access:public
probe_state	conformation_sampler.h	/^		State base_state, probe_state;$/;"	m	class:ConformationSampler	access:public
processDpfLines	Tests/DlgParser.py	/^    def processDpfLines(self, lines):$/;"	m	class:DlgParser	access:public
processFlexResLinesV4	Tests/DlgParser.py	/^    def processFlexResLinesV4(self, lines):$/;"	m	class:DlgParser	access:public
processLigLines	Tests/DlgParser.py	/^    def processLigLines(self, lines):$/;"	m	class:DlgParser	access:public
processLigLinesV4	Tests/DlgParser.py	/^    def processLigLinesV4(self, lines):$/;"	m	class:DlgParser	access:public
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
programname	autoglobal.h	/^char    *programname;$/;"	v
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
ptr_ad_energy_tables	eval.h	/^      EnergyTables *ptr_ad_energy_tables;$/;"	m	class:Eval	access:private
q	autocomm.h	/^	Real q;$/;"	m	struct:AtomDesc	access:public
q1q2	structs.h	/^    double q1q2;      \/\/ product of atom partial charges$/;"	m	struct:nonbond_param	access:public
qconjmultiply	qmultiply.cc	/^void qconjmultiply( Quat *q,$/;"	f	signature:( Quat *q, register const Quat *ql, register const Quat *qr )
qconjmultiply	qmultiply.h	/^void qconjmultiply( Quat *q, register const Quat *ql, register const Quat *qr );$/;"	p	signature:( Quat *q, register const Quat *ql, register const Quat *qr )
qmag	structs.h	/^  double qmag;			\/* quaternion's 4-D magnitude *\/$/;"	m	struct:quat	access:public
qmultiply	qmultiply.cc	/^void qmultiply( Quat *q, \/\/result$/;"	f	signature:( Quat *q, register const Quat *ql, register const Quat *qr )
qmultiply	qmultiply.h	/^void qmultiply( Quat *q, register const Quat *ql, register const Quat *qr );$/;"	p	signature:( Quat *q, register const Quat *ql, register const Quat *qr )
qsp_abs_charge	eval.h	/^      Real *charge, *abs_charge, *qsp_abs_charge;$/;"	m	class:Eval	access:private
qsp_abs_charge	structs.h	/^    double qsp_abs_charge;$/;"	m	struct:chargestruct	access:public
qsp_abs_charge	structs.h	/^  double    qsp_abs_charge;$/;"	m	struct:atom	access:public
qtransform	qtransform.cc	/^void qtransform( const Coord T,$/;"	f	signature:( const Coord T, const Quat q, Real tcoord[MAX_ATOMS][SPACE], const int natom)
qtransform	qtransform.h	/^void qtransform( const Coord T,$/;"	p	signature:( const Coord T, const Quat q, Real tcoord[MAX_ATOMS][SPACE], const int natom)
quantile	support.cc	318;"	d	file:
quantile	support.cc	329;"	d	file:
quat	structs.h	/^typedef struct quat$/;"	s
quat::ang	structs.h	/^  double ang;			\/* angle of rotation about unit-vector *\/$/;"	m	struct:quat	access:public
quat::nx	structs.h	/^  double nx;			\/* unit vector's x-component *\/$/;"	m	struct:quat	access:public
quat::ny	structs.h	/^  double ny;			\/* unit vector's y-component *\/$/;"	m	struct:quat	access:public
quat::nz	structs.h	/^  double nz;			\/* unit vector's z-component *\/$/;"	m	struct:quat	access:public
quat::qmag	structs.h	/^  double qmag;			\/* quaternion's 4-D magnitude *\/$/;"	m	struct:quat	access:public
quat::w	structs.h	/^  double w;			\/* quaternion's w-component *\/$/;"	m	struct:quat	access:public
quat::x	structs.h	/^  double x;			\/* quaternion's x-component *\/$/;"	m	struct:quat	access:public
quat::y	structs.h	/^  double y;			\/* quaternion's y-component *\/$/;"	m	struct:quat	access:public
quat::z	structs.h	/^  double z;			\/* quaternion's z-component *\/$/;"	m	struct:quat	access:public
quatComponentsToQuat	qmultiply.cc	/^Quat quatComponentsToQuat( const Real qx, const Real qy, const Real qz, const Real qw )$/;"	f	signature:( const Real qx, const Real qy, const Real qz, const Real qw )
quatComponentsToQuat	qmultiply.h	/^Quat quatComponentsToQuat( const Real qx, const Real qy, const Real qz, const Real qw );$/;"	p	signature:( const Real qx, const Real qy, const Real qz, const Real qw )
quatDifferenceToAngle	qmultiply.cc	/^Real quatDifferenceToAngle( const Quat ql, const Quat qr )$/;"	f	signature:( const Quat ql, const Quat qr )
quatDifferenceToAngle	qmultiply.h	/^Real quatDifferenceToAngle( const Quat ql, const Quat qr );$/;"	p	signature:( const Quat ql, const Quat qr )
quatDifferenceToAngleDeg	qmultiply.cc	/^Real quatDifferenceToAngleDeg( const Quat ql, const Quat qr )$/;"	f	signature:( const Quat ql, const Quat qr )
quatDifferenceToAngleDeg	qmultiply.h	/^Real quatDifferenceToAngleDeg( const Quat ql, const Quat qr );$/;"	p	signature:( const Quat ql, const Quat qr )
quatStep	gs.h	/^      Real tranStep, quatStep, torsStep;$/;"	m	class:Genetic_Algorithm	access:private
quaternion	structs.h	/^typedef struct quaternion$/;"	s
quaternion::v	structs.h	/^    double v[4];$/;"	m	struct:quaternion	access:public
quicksort	quicksort.cc	/^void quicksort( Real e[], $/;"	f	signature:( Real e[], int isort[], int left, int right )
quicksort	quicksort.h	/^void  quicksort( Real e[], $/;"	p	signature:( Real e[], int isort[], int left, int right )
r_epsilon_fn	structs.h	/^    Real r_epsilon_fn[NDIEL];                      \/\/ r * distance-dependent dielectric function$/;"	m	struct:energy_tables	access:public
raaEuler	conformation_sampler.cc	/^void raaEuler(Real raa[4], Real euler[3]) {$/;"	f	signature:(Real raa[4], Real euler[3])
raaEuler	conformation_sampler.h	/^void raaEuler(Real raa[4], Real euler[3]);$/;"	p	signature:(Real raa[4], Real euler[3])
raaMatrix	conformation_sampler.cc	/^void raaMatrix(Real raa[4], Real matrix[3][3]) {$/;"	f	signature:(Real raa[4], Real matrix[3][3])
raaMatrix	conformation_sampler.h	/^void raaMatrix(Real raa[4], Real matrix[3][3]);$/;"	p	signature:(Real raa[4], Real matrix[3][3])
raaToQuat	qmultiply.cc	/^Quat raaToQuat( const Real raa[3], Real angle )$/;"	f	signature:( const Real raa[3], Real angle )
raaToQuat	qmultiply.h	/^Quat raaToQuat( const Real raa[3], Real angle );$/;"	p	signature:( const Real raa[3], Real angle )
rand_axis	conformation_sampler.cc	/^void rand_axis(Real axis[4], Real angle) {$/;"	f	signature:(Real axis[4], Real angle)
rand_axis	conformation_sampler.h	/^void rand_axis(Real axis[4], Real angle);$/;"	p	signature:(Real axis[4], Real angle)
random_conformation_sampler	conformation_sampler.cc	/^void random_conformation_sampler(State hist[MAX_RUNS], int nconf, int num_samples, Real init_vt[MAX_TORS][SPACE], Real init_crdpdb[MAX_ATOMS][SPACE], int init_tlist[MAX_TORS][MAX_ATOMS], Real init_lig_center[SPACE], int init_natom, int init_type[MAX_ATOMS], GridMapSetInfo *init_info) {$/;"	f	signature:(State hist[MAX_RUNS], int nconf, int num_samples, Real init_vt[MAX_TORS][SPACE], Real init_crdpdb[MAX_ATOMS][SPACE], int init_tlist[MAX_TORS][MAX_ATOMS], Real init_lig_center[SPACE], int init_natom, int init_type[MAX_ATOMS], GridMapSetInfo *init_info)
random_conformation_sampler	conformation_sampler.h	/^void random_conformation_sampler(State hist[MAX_RUNS], int nconf, int num_samples, Real init_vt[MAX_TORS][SPACE], Real init_crdpdb[MAX_ATOMS][SPACE], int init_tlist[MAX_TORS][MAX_ATOMS], Real init_lig_center[SPACE], int init_natom, int init_type[MAX_ATOMS], GridMapSetInfo *init_info);$/;"	p	signature:(State hist[MAX_RUNS], int nconf, int num_samples, Real init_vt[MAX_TORS][SPACE], Real init_crdpdb[MAX_ATOMS][SPACE], int init_tlist[MAX_TORS][MAX_ATOMS], Real init_lig_center[SPACE], int init_natom, int init_type[MAX_ATOMS], GridMapSetInfo *init_info)
random_ind	call_glss.cc	/^Individual random_ind(int num_torsions,  GridMapSetInfo *info) $/;"	f	signature:(int num_torsions, GridMapSetInfo *info)
random_ind	hybrids.h	/^Individual random_ind(int num_torsions, GridMapSetInfo *info );$/;"	p	signature:(int num_torsions, GridMapSetInfo *info )
random_ind_tors	hybrids.h	/^Individual random_ind_tors(int num_torsions, GridMapSetInfo *info );$/;"	p	signature:(int num_torsions, GridMapSetInfo *info )
random_pm	constants.h	355;"	d
random_pm1	constants.h	352;"	d
random_range	constants.h	357;"	d
random_sample	conformation_sampler.cc	/^void ConformationSampler::random_sample(int num_samples) {$/;"	f	class:ConformationSampler	signature:(int num_samples)
random_sample	conformation_sampler.cc	/^void ConformationSampler::random_sample(void) {$/;"	f	class:ConformationSampler	signature:(void)
random_sample	conformation_sampler.h	/^		void random_sample(int);$/;"	p	class:ConformationSampler	access:public	signature:(int)
random_sample	conformation_sampler.h	/^		void random_sample(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
random_sign	constants.h	351;"	d
ranf	ranlib.cc	/^Real ranf(void)$/;"	f	signature:(void)
ranf	ranlib.h	/^extern Real ranf(void);$/;"	p	signature:(void)
rcauchy	gencau.cc	/^Real rcauchy(Real alpha, Real beta)$/;"	f	signature:(Real alpha, Real beta)
rcauchy	ranlib.h	/^extern Real rcauchy(Real, Real);$/;"	p	signature:(Real, Real)
readPDBQT	readPDBQT.cc	/^Molecule readPDBQT(char input_line[LINE_LEN],$/;"	f	signature:(char input_line[LINE_LEN], int num_atom_maps, int *P_natom, Real crdpdb[MAX_ATOMS][NTRN], Real crdreo[MAX_ATOMS][NTRN], Real charge[MAX_ATOMS], Boole * P_B_haveCharges, int map_index[MAX_ATOMS], int bond_index[MAX_ATOMS], char pdbaname[MAX_ATOMS][5], char *FN_ligand, char *FN_flexres, Boole B_have_flexible_residues, char atomstuff[MAX_ATOMS][MAX_CHARS], int *P_n_heavy_atoms_in_ligand, Boole * P_B_constrain, int *P_atomC1, int *P_atomC2, Real *P_sqlower, Real *P_squpper, int *P_ntor1, int *P_ntor, int *P_ntor_ligand, int tlist[MAX_TORS][MAX_ATOMS], Real vt[MAX_TORS][NTRN], int *P_Nnb, NonbondParam *nonbondlist, Clock jobStart, struct tms tms_jobStart, char *hostnm, int *P_ntorsdof, int outlev, int ignore_inter[MAX_ATOMS], int B_include_1_4_interactions, Atom atoms[MAX_ATOMS], char PDBQT_record[MAX_RECORDS][LINE_LEN], int end_of_branch[MAX_TORS] )
readPDBQT	readPDBQT.h	/^Molecule readPDBQT( char  line[LINE_LEN],$/;"	p	signature:( char line[LINE_LEN], int num_atm_maps, int *P_natom, Real crdpdb[MAX_ATOMS][NTRN], Real crdreo[MAX_ATOMS][NTRN], Real charge[MAX_ATOMS], Boole *P_B_haveCharges, int type[MAX_ATOMS], int bondtype[MAX_ATOMS], char pdbaname[MAX_ATOMS][5], char *pdbqFileName, char *FN_flexres, Boole B_have_flexible_residues, char atomstuff[MAX_ATOMS][MAX_CHARS], int *P_n_heavy_atoms_in_ligand, Boole *P_B_constrain, int *P_atomC1, int *P_atomC2, Real *P_sqlower, Real *P_squpper, int *P_ntor1, int *P_ntor, int *P_ntor_ligand, int tortree[MAX_TORS][MAX_ATOMS], Real vt[MAX_TORS][NTRN], int *P_Nnb, NonbondParam *nonbondlist, Clock jobStart, struct tms tms_jobStart, char hostnm[MAX_CHARS], int *P_ntorsdof, int outlev, int ignore_inter[MAX_ATOMS], int B_include_1_4_interactions, Atom atoms[MAX_ATOMS], char PDBQT_record[MAX_RECORDS][LINE_LEN], int end_of_branch[MAX_TORS] )
readPDBQTLine	readPDBQT.cc	/^readPDBQTLine( char line[LINE_LEN],$/;"	f	signature:( char line[LINE_LEN], int *ptr_serial, Real crd[SPACE], Real *ptr_q, ParameterEntry *this_parameter_entry )
readPDBQTLine	readPDBQT.h	/^void  readPDBQTLine( char line[LINE_LEN],$/;"	p	signature:( char line[LINE_LEN], int *ptr_serial, Real crd[SPACE], Real *P_q, ParameterEntry *thisparm)
readQuat	support.cc	/^Quat Genotype::readQuat()$/;"	f	class:Genotype	signature:()
readQuat	support.cc	/^Quat Phenotype::readQuat()$/;"	f	class:Phenotype	signature:()
readQuat	support.h	/^      Quat readQuat();$/;"	p	class:Genotype	access:public	signature:()
readQuat	support.h	/^      Quat readQuat();$/;"	p	class:Phenotype	access:public	signature:()
read_parameter_library	read_parameter_library.cc	/^void read_parameter_library($/;"	f	signature:( char *FN_parameter_library, int outlev )
read_parameter_library	read_parameter_library.h	/^void read_parameter_library($/;"	p	signature:( char *FN_parameter_library, int outlev )
readfield	readfield.cc	/^void readfield( GridMapSetInfo *info,$/;"	f	signature:( GridMapSetInfo *info, char line[LINE_LEN], Clock jobStart, struct tms tms_jobStart )
readfield	readfield.h	/^void readfield( GridMapSetInfo *info, \/\/ *ptr_map_set_info$/;"	p	signature:( GridMapSetInfo *info, char line[LINE_LEN], Clock jobStart, struct tms tms_jobStart )
readmap	readGridMap.cc	/^void readmap( Boole *P_B_HaveMap, $/;"	f	signature:( Boole *P_B_HaveMap, int *P_imap, int *num_atom_types, Real *P_ExtSpacing, char ligand_atom_types[MAX_MAPS][3], char *ExtFldFileName, int ExtGridPts1[SPACE], int ExtGridPts[SPACE], Clock jobStart, char line[LINE_LEN], char *ExtMacromolFileName, Real MapCenter[SPACE], Real MapMax[MAX_MAPS], Real MapMin[MAX_MAPS], struct tms tmsJobStart, Boole B_charMap, int outlev, GridMap grid_map)
readmap	readmap.cc	/^Statistics readmap( char           line[LINE_LEN],$/;"	f	signature:( char line[LINE_LEN], int outlev, Clock jobStart, struct tms tmsJobStart, Boole B_charMap, Boole *P_B_HaveMap, int num_maps, GridMapSetInfo *info, Real map[MAX_GRID_PTS][MAX_GRID_PTS][MAX_GRID_PTS][MAX_MAPS], char map_type )
readmap	readmap.h	/^Statistics readmap( char line[LINE_LEN],$/;"	p	signature:( char line[LINE_LEN], int outlev, Clock jobStart, struct tms tmsJobStart, Boole B_charMap, Boole *P_B_HaveMap, int num_maps, GridMapSetInfo *info, char map_type )
real	rep.h	/^   double real;$/;"	m	union:__anon2
rec_index	parameters.h	/^  int rec_index;		\/* used to set up receptor atom_types *\/$/;"	m	struct:parameter_entry	access:public
ref_crd	conformation_sampler.cc	/^Real ref_crd[MAX_ATOMS][SPACE];$/;"	v
reference_rmsd	conformation_sampler.cc	/^Real ConformationSampler::reference_rmsd(void) {$/;"	f	class:ConformationSampler	signature:(void)
reference_rmsd	conformation_sampler.h	/^		Real reference_rmsd(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
reorient	qtransform.cc	/^void reorient( FILE *logFile, $/;"	f	signature:( FILE *logFile, const int true_ligand_atoms, char atomstuff[MAX_ATOMS][MAX_CHARS], Real crdpdb[MAX_ATOMS][SPACE], Real charge[MAX_ATOMS], int type[MAX_ATOMS], ParameterEntry parameterArray[MAX_ATOM_TYPES], Quat q_reorient, Coord origin, const int ntor, int tlist[MAX_TORS][MAX_ATOMS], Real vt[MAX_TORS][SPACE], Molecule *ptr_ligand, const int debug )
reorient	qtransform.h	/^void reorient( FILE *logFile, $/;"	p	signature:( FILE *logFile, const int true_ligand_atoms, char atomstuff[MAX_ATOMS][MAX_CHARS], Real crdpdb[MAX_ATOMS][SPACE], Real charge[MAX_ATOMS], int type[MAX_ATOMS], ParameterEntry parameterArray[MAX_ATOM_TYPES], Quat q_reorient, Coord origin, const int ntor, int tlist[MAX_TORS][MAX_ATOMS], Real vt[MAX_TORS][SPACE], Molecule *ptr_ligand, const int debug )
rep_vector	support.h	/^      Representation **rep_vector; \/* the actual representation of the genotype$/;"	m	class:Genotype	access:protected
report_parameter_library	read_parameter_library.cc	/^char * report_parameter_library(){$/;"	f	signature:()
report_parameter_library	read_parameter_library.h	/^char * report_parameter_library();$/;"	p	signature:()
reset	eval.h	/^      void reset(void);$/;"	p	class:Eval	access:public	signature:(void)
reset	eval.h	/^inline void Eval::reset(void)$/;"	f	class:Eval	signature:(void)
reset	gs.h	/^      virtual void reset(unsigned int) = 0;$/;"	p	class:Global_Search	access:public	signature:(unsigned int)
reset	gs.h	/^      virtual void reset(void) = 0;$/;"	p	class:Global_Search	access:public	signature:(void)
reset	gs.h	/^      void reset(unsigned int);$/;"	p	class:Genetic_Algorithm	access:public	signature:(unsigned int)
reset	gs.h	/^      void reset(void);$/;"	p	class:Genetic_Algorithm	access:public	signature:(void)
reset	gs.h	/^inline void Genetic_Algorithm::reset(unsigned int extOutputEveryNgens) \/\/ gmm 2000.11.1$/;"	f	class:Genetic_Algorithm	signature:(unsigned int extOutputEveryNgens)
reset	gs.h	/^inline void Genetic_Algorithm::reset(void)$/;"	f	class:Genetic_Algorithm	signature:(void)
reset	ls.cc	/^void Pattern_Search::reset()$/;"	f	class:Pattern_Search	signature:()
reset	ls.h	/^      virtual void reset(void) = 0;$/;"	p	class:Local_Search	access:public	signature:(void)
reset	ls.h	/^      virtual void reset(void);$/;"	p	class:Solis_Wets_Base	access:public	signature:(void)
reset	ls.h	/^      void reset(void);$/;"	p	class:Pattern_Search	access:public	signature:(void)
reset	ls.h	/^inline void Solis_Wets_Base::reset(void)$/;"	f	class:Solis_Wets_Base	signature:(void)
reset_indexes	ls.cc	/^void Pattern_Search::reset_indexes() {$/;"	f	class:Pattern_Search	signature:()
reset_indexes	ls.h	/^			void reset_indexes(void);$/;"	p	class:Pattern_Search	access:protected	signature:(void)
reset_pattern	ls.cc	/^void Pattern_Search::reset_pattern() {$/;"	f	class:Pattern_Search	signature:()
reset_pattern	ls.h	/^			void reset_pattern(void);$/;"	p	class:Pattern_Search	access:protected	signature:(void)
rho	ls.h	/^      Real *rho, *lower_bound_on_rho;$/;"	m	class:Pseudo_Solis_Wets	access:protected
rho	ls.h	/^      Real rho, lower_bound_on_rho;$/;"	m	class:Solis_Wets	access:protected
rotamer	structs.h	/^typedef struct rotamer$/;"	s
rotamer::ntor	structs.h	/^  int ntor;			\/* number of torsions *\/$/;"	m	struct:rotamer	access:public
rotamer::tor	structs.h	/^  double tor[MAX_TORS_IN_ROTAMER];	\/* torsion angles in radians *\/$/;"	m	struct:rotamer	access:public
rotbnd	structs.h	/^  PairID rotbnd;		\/* atom serial-IDs of rotatable bond *\/$/;"	m	struct:torsion	access:public
run_AutoDock	Tests/test_autodock4.py	/^def run_AutoDock( dpf_filename, dlg_filename ):$/;"	f	access:public
sNew	main.cc	/^State sNew[S_max];$/;"	v
s_mode	gs.h	/^      Selection_Mode s_mode;$/;"	m	class:Genetic_Algorithm	access:private
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
scale_1_4	eval.h	/^      Real scale_1_4;                  \/\/ gmm 2005-01-8, for scaling 1-4 nonbonds$/;"	m	class:Eval	access:private
scauchy1	ranlib.h	/^extern Real scauchy1(void);$/;"	p	signature:(void)
scauchy1	scauchy.cc	/^Real scauchy1()$/;"	f	signature:()
scauchy2	ranlib.h	/^extern Real scauchy2(void);$/;"	p	signature:(void)
scauchy2	scauchy.cc	/^Real scauchy2()$/;"	f	signature:()
sdot	linpack.cc	/^Real sdot(FourByteLong n,Real *sx,FourByteLong incx,Real *sy,FourByteLong incy)$/;"	f	signature:(FourByteLong n,Real *sx,FourByteLong incx,Real *sy,FourByteLong incy)
search	gs.cc	/^int Genetic_Algorithm::search(Population &solutions)$/;"	f	class:Genetic_Algorithm	signature:(Population &solutions)
search	gs.h	/^      int search(Population &);$/;"	p	class:Genetic_Algorithm	access:public	signature:(Population &)
search	gs.h	/^      virtual int search(Population &) = 0;$/;"	p	class:Global_Search	access:public	signature:(Population &)
search	ls.cc	/^int Pattern_Search::search(Individual &solution)$/;"	f	class:Pattern_Search	signature:(Individual &solution)
search	ls.cc	/^int Solis_Wets_Base::search(Individual &solution)$/;"	f	class:Solis_Wets_Base	signature:(Individual &solution)
search	ls.h	/^      int search(Individual &);$/;"	p	class:Pattern_Search	access:public	signature:(Individual &)
search	ls.h	/^      int search(Individual &);$/;"	p	class:Solis_Wets_Base	access:public	signature:(Individual &)
search	ls.h	/^      virtual int search(Individual &) = 0;$/;"	p	class:Local_Search	access:public	signature:(Individual &)
search_frequency	ls.h	/^			Real search_frequency;$/;"	m	class:Pattern_Search	access:protected
search_frequency	ls.h	/^      Real search_frequency;$/;"	m	class:Solis_Wets_Base	access:protected
seed_random	constants.h	330;"	d
seed_random	constants.h	334;"	d
seed_random	constants.h	340;"	d
sel_prop_count	main.cc	/^int sel_prop_count = 0;$/;"	v
selection	gs.cc	/^Individual *Genetic_Algorithm::selection(Population &solutions)$/;"	f	class:Genetic_Algorithm	signature:(Population &solutions)
selection	gs.h	/^      Individual *selection(Population &);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Population &)
selection_linear_ranking	gs.cc	/^void Genetic_Algorithm::selection_linear_ranking(Population &original_population, Individual *new_pop)$/;"	f	class:Genetic_Algorithm	signature:(Population &original_population, Individual *new_pop)
selection_linear_ranking	gs.h	/^      void selection_linear_ranking(Population &, Individual *);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Population &, Individual *)
selection_proportional	gs.cc	/^void Genetic_Algorithm::selection_proportional(Population &original_population, Individual *new_pop)$/;"	f	class:Genetic_Algorithm	signature:(Population &original_population, Individual *new_pop)
selection_proportional	gs.h	/^      void selection_proportional(Population &, Individual *);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Population &, Individual *)
selection_tournament	gs.cc	/^void Genetic_Algorithm::selection_tournament(Population &original_population, Individual *new_pop)$/;"	f	class:Genetic_Algorithm	signature:(Population &original_population, Individual *new_pop)
selection_tournament	gs.h	/^      void selection_tournament(Population &, Individual *);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Population &, Individual *)
serial	structs.h	/^  int       serial;			        \/* serial ID *\/$/;"	m	struct:atom	access:public
serial	support.h	/^      int serial; \/\/ serial number of this individual$/;"	m	class:Individual	access:public
setADVersion	Tests/DlgParser.py	/^    def setADVersion(self,lines):$/;"	m	class:DlgParser	access:public
setOutlev	Tests/DlgParser.py	/^    def setOutlev(self,lines):$/;"	m	class:DlgParser	access:public
setUp	Tests/test_autodock4.py	/^    def setUp( self ):$/;"	m	class:AutoDock4_1pgp_no_extension	access:public
setUp	Tests/test_autodock4.py	/^    def setUp( self ):$/;"	m	class:AutoDock4_1pgp_two_extensions	access:public
setUp	Tests/test_autodock4.py	/^    def setUp( self ):$/;"	m	class:AutoDock4_1pgp_wrong_extension	access:public
setUp	Tests/test_autodock4.py	/^    def setUp( self ):$/;"	m	class:AutoDock_base_test	access:public
setUp	Tests/test_autodock4.py	/^    def setUp( self ):$/;"	m	class:AutoDock_simple_test	access:public
setWroteAll	Tests/DlgParser.py	/^    def setWroteAll(self, lines):$/;"	m	class:DlgParser	access:public
set_eob	support.cc	/^void Population::set_eob(int init_end_of_branch[MAX_TORS])$/;"	f	class:Population	signature:(int init_end_of_branch[MAX_TORS])
set_eob	support.h	/^      void set_eob(int init_end_of_branch[MAX_TORS]); \/\/ For Branch Crossover Mode$/;"	p	class:Population	access:public	signature:(int init_end_of_branch[MAX_TORS])
set_ind	call_glss.cc	/^Individual set_ind(int num_torsions,  GridMapSetInfo *info, State state)$/;"	f	signature:(int num_torsions, GridMapSetInfo *info, State state)
set_ind	conformation_sampler.cc	/^Individual set_ind(GridMapSetInfo *info, State state)$/;"	f	signature:(GridMapSetInfo *info, State state)
set_ind	conformation_sampler.h	/^Individual set_ind(GridMapSetInfo *info, State state);$/;"	p	signature:(GridMapSetInfo *info, State state)
set_linear_ranking_selection_probability_ratio	gs.cc	/^int Genetic_Algorithm::set_linear_ranking_selection_probability_ratio(Real r)$/;"	f	class:Genetic_Algorithm	signature:(Real r)
set_linear_ranking_selection_probability_ratio	gs.h	/^      int set_linear_ranking_selection_probability_ratio(Real);$/;"	p	class:Genetic_Algorithm	access:public	signature:(Real)
set_minmax	mdist.h	31;"	d
set_normalized_false	rep.h	/^      void set_normalized_false(void);$/;"	p	class:Representation	access:public	signature:(void)
set_normalized_false	rep.h	/^inline void Representation::set_normalized_false(void)$/;"	f	class:Representation	signature:(void)
set_normalized_true	rep.h	/^      void set_normalized_true(void);$/;"	p	class:Representation	access:public	signature:(void)
set_normalized_true	rep.h	/^inline void Representation::set_normalized_true(void)$/;"	f	class:Representation	signature:(void)
set_worst	gs.cc	/^void Genetic_Algorithm::set_worst(Population &currentPop)$/;"	f	class:Genetic_Algorithm	signature:(Population &currentPop)
set_worst	gs.h	/^      void set_worst(Population &);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Population &)
setall	com.cc	/^void setall(FourByteLong iseed1,FourByteLong iseed2)$/;"	f	signature:(FourByteLong iseed1,FourByteLong iseed2)
setall	ranlib.h	/^extern void setall(FourByteLong iseed1,FourByteLong iseed2);$/;"	p	signature:(FourByteLong iseed1,FourByteLong iseed2)
setant	com.cc	/^void setant(FourByteLong qvalue)$/;"	f	signature:(FourByteLong qvalue)
setant	ranlib.h	/^extern void setant(FourByteLong qvalue);$/;"	p	signature:(FourByteLong qvalue)
setflags	setflags.cc	/^int setflags( int argc, char ** argv, const char * version_num)$/;"	f	signature:( int argc, char ** argv, const char * version_num)
setflags	setflags.h	/^int setflags( int argc, $/;"	p	signature:( int argc, char ** argv, const char * version_num)
setgmn	ranlib.cc	/^void setgmn(Real *meanv,Real *covm,FourByteLong p,Real *parm)$/;"	f	signature:(Real *meanv,Real *covm,FourByteLong p,Real *parm)
setgmn	ranlib.h	/^extern void setgmn(Real *meanv,Real *covm,FourByteLong p,Real *parm);$/;"	p	signature:(Real *meanv,Real *covm,FourByteLong p,Real *parm)
setsd	com.cc	/^void setsd(FourByteLong iseed1,FourByteLong iseed2)$/;"	f	signature:(FourByteLong iseed1,FourByteLong iseed2)
setsd	ranlib.h	/^extern void setsd(FourByteLong iseed1,FourByteLong iseed2);$/;"	p	signature:(FourByteLong iseed1,FourByteLong iseed2)
setup	eval.h	/^      void setup( Real init_crd[MAX_ATOMS][SPACE],$/;"	p	class:Eval	access:public	signature:( Real init_crd[MAX_ATOMS][SPACE], Real init_charge[MAX_ATOMS], Real init_abs_charge[MAX_ATOMS], Real init_qsp_abs_charge[MAX_ATOMS], int init_type[MAX_ATOMS], int init_natom, Real init_map[MAX_GRID_PTS][MAX_GRID_PTS][MAX_GRID_PTS][MAX_MAPS], Real init_elec[MAX_ATOMS], Real init_emap[MAX_ATOMS], NonbondParam *init_nonbondlist, EnergyTables *init_ptr_ad_energy_tables, int init_Nnb, Boole init_B_calcIntElec, Boole init_B_isGaussTorCon, Boole init_B_isTorConstrained[MAX_TORS], Boole init_B_ShowTorE, unsigned short init_US_TorE[MAX_TORS], unsigned short init_US_torProfile[MAX_TORS][NTORDIVS], Real init_vt[MAX_TORS][SPACE], int init_tlist[MAX_TORS][MAX_ATOMS], Real init_crdpdb[MAX_ATOMS][SPACE], Real init_crdreo[MAX_ATOMS][SPACE], State stateInit, Molecule molInit, int init_ignore_inter[MAX_ATOMS], Boole init_B_include_1_4_interactions, Real init_scale_1_4, Real init_unbound_internal_FE, GridMapSetInfo *init_info, Boole init_B_use_non_bond_cutoff, Boole init_B_have_flexible_residues )
setup	eval.h	/^inline void Eval::setup(Real init_crd[MAX_ATOMS][SPACE],$/;"	f	class:Eval	signature:(Real init_crd[MAX_ATOMS][SPACE], Real init_charge[MAX_ATOMS], Real init_abs_charge[MAX_ATOMS], Real init_qsp_abs_charge[MAX_ATOMS], int init_type[MAX_ATOMS], int init_natom, Real init_map[MAX_GRID_PTS][MAX_GRID_PTS][MAX_GRID_PTS][MAX_MAPS], Real init_elec[MAX_ATOMS], Real init_emap[MAX_ATOMS], NonbondParam *init_nonbondlist, EnergyTables *init_ptr_ad_energy_tables, int init_Nnb, Boole init_B_calcIntElec, Boole init_B_isGaussTorCon, Boole init_B_isTorConstrained[MAX_TORS], Boole init_B_ShowTorE, unsigned short init_US_TorE[MAX_TORS], unsigned short init_US_torProfile[MAX_TORS][NTORDIVS], Real init_vt[MAX_TORS][SPACE], int init_tlist[MAX_TORS][MAX_ATOMS], Real init_crdpdb[MAX_ATOMS][SPACE], Real init_crdreo[MAX_ATOMS][SPACE], State stateInit, Molecule molInit, int init_ignore_inter[MAX_ATOMS], Boole init_B_include_1_4_interactions, Real init_scale_1_4, Real init_unbound_internal_FE, GridMapSetInfo *init_info, Boole init_B_use_non_bond_cutoff, Boole init_B_have_flexible_residues )
setup_distdepdiel	intnbtable.cc	/^void setup_distdepdiel( int outlev, $/;"	f	signature:( int outlev, EnergyTables *ptr_ad_energy_tables )
setup_distdepdiel	read_parameter_library.h	/^void setup_distdepdiel( int outlev, $/;"	p	signature:( int outlev, EnergyTables *ptr_ad_energy_tables )
setup_parameter_library	read_parameter_library.cc	/^void setup_parameter_library( int outlev, const char * model_text, Unbound_Model unbound_model )$/;"	f	signature:( int outlev, const char * model_text, Unbound_Model unbound_model )
setup_parameter_library	read_parameter_library.h	/^void setup_parameter_library($/;"	p	signature:( int outlev, const char * model_text, Unbound_Model unbound_model )
setup_reference_coordinates	conformation_sampler.cc	/^void setup_reference_coordinates(void) {$/;"	f	signature:(void)
setup_reference_coordinates	conformation_sampler.h	/^void setup_reference_coordinates(void);$/;"	p	signature:(void)
sexpo	ranlib.cc	/^Real sexpo(void)$/;"	f	signature:(void)
sexpo	ranlib.h	/^extern Real sexpo(void);$/;"	p	signature:(void)
sgamma	ranlib.cc	/^Real sgamma(Real a)$/;"	f	signature:(Real a)
sgamma	ranlib.h	/^extern Real sgamma(Real a);$/;"	p	signature:(Real a)
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
show_copyright	banner.cc	/^void show_copyright( FILE *fp )$/;"	f	signature:( FILE *fp )
show_copyright	banner.h	/^void show_copyright( FILE *fp );$/;"	p	signature:( FILE *fp )
show_warranty	banner.cc	/^void show_warranty( FILE *fp )$/;"	f	signature:( FILE *fp )
show_warranty	banner.h	/^void show_warranty( FILE *fp );$/;"	p	signature:( FILE *fp )
shuffle_indexes	ls.cc	/^void Pattern_Search::shuffle_indexes() {$/;"	f	class:Pattern_Search	signature:()
shuffle_indexes	ls.h	/^			void shuffle_indexes(void);$/;"	p	class:Pattern_Search	access:protected	signature:(void)
simanneal	simanneal.cc	/^void simanneal ( int   *Addr_nconf,$/;"	f	signature:( int *Addr_nconf, int Nnb, Real WallEnergy, char atomstuff[MAX_ATOMS][MAX_CHARS], Real charge[MAX_ATOMS], Real abs_charge[MAX_ATOMS], Real qsp_abs_charge[MAX_ATOMS], Boole B_calcIntElec, Real crd[MAX_ATOMS][SPACE], Real crdpdb[MAX_ATOMS][SPACE], char *FN_dpf, EnergyTables *ptr_ad_energy_tables, Real econf[MAX_RUNS], Boole B_either, Real elec[MAX_ATOMS], Real emap[MAX_ATOMS], int NcycMax, int irunmax, Clock jobStart, int naccmax, int natom, NonbondParam *nonbondlist, int nrejmax, int ntor1, int ntor, int outlev, State sInit, State sHist[MAX_RUNS], Real qtwFac, Boole B_qtwReduc, Real qtwStep0, Boole B_selectmin, char *FN_ligand, Real lig_center[SPACE], Real RT0, Boole B_RTChange, Real RTFac, struct tms tms_jobStart, int tlist[MAX_TORS][MAX_ATOMS], Real torFac, Boole B_torReduc, Real torStep0, char *FN_trj, int trj_cyc_max, int trj_cyc_min, int trj_freq, Real trnFac, Boole B_trnReduc, Real trnStep0, int type[MAX_ATOMS], Real vt[MAX_TORS][SPACE], Boole B_writeTrj, Boole B_constrain, int atomC1, int atomC2, Real sqlower, Real squpper, Boole B_linear_schedule, Real RTreduc, Boole B_watch, char *FN_watch, Boole B_isGaussTorCon, unsigned short US_torProfile[MAX_TORS][NTORDIVS], Boole B_isTorConstrained[MAX_TORS], Boole B_ShowTorE, unsigned short US_TorE[MAX_TORS], Real F_TorConRange[MAX_TORS][MAX_TOR_CON][2], int N_con[MAX_TORS], Boole B_RandomTran0, Boole B_RandomQuat0, Boole B_RandomDihe0, Real e0max, Real torsFreeEnergy, int MaxRetries, int ligand_is_inhibitor, int ignore_inter[MAX_ATOMS], const Boole B_include_1_4_interactions, const Real scale_1_4, const ParameterEntry parameterArray[MAX_ATOM_TYPES], const Real unbound_internal_FE, GridMapSetInfo *info, Boole B_use_non_bond_cutoff, Boole B_have_flexible_residues, char PDBQT_record[MAX_RECORDS][LINE_LEN], Unbound_Model ad4_unbound_model )
simanneal	simanneal.h	/^void simanneal( int   *P_nconf, $/;"	p	signature:( int *P_nconf, int Nnb, Real WallEnergy, char atomstuff[MAX_ATOMS][MAX_CHARS], Real charge[MAX_ATOMS], Real abs_charge[MAX_ATOMS], Real qsp_abs_charge[MAX_ATOMS], Boole B_calcIntElec, Real crd[MAX_ATOMS][SPACE], Real crdpdb[MAX_ATOMS][SPACE], char *dpfFN, EnergyTables *ptr_ad_energy_tables, Real econf[MAX_RUNS], Boole B_either, Real elec[MAX_ATOMS], Real emap[MAX_ATOMS], int icyclemax, int irunmax, Clock jobStart, int naccmax, int natom, NonbondParam *nonbondlist, int nrejmax, int ntor1, int ntor, int outlev, State sInit, State sHist[MAX_RUNS], Real qtwFac, Boole B_qtwReduc, Real qtwStep0, Boole B_selectmin, char *smFileName, Real sml_center[SPACE], Real RT0, Boole B_RTChange, Real RTFac, struct tms tms_jobStart, int tlist[MAX_TORS][MAX_ATOMS], Real torFac, Boole B_torReduc, Real torStep0, char *trjFileName, int trj_cyc_max, int trj_cyc_min, int trj_freq, Real trnFac, Boole B_trnReduc, Real trnStep0, int type[MAX_ATOMS], Real vt[MAX_TORS][SPACE], Boole B_write_trj, Boole B_constrain, int atomC1, int atomC2, Real sqlower, Real squpper, Boole B_linear_schedule, Real RTreduc, Boole B_watch, char *FN_watch, Boole B_isGaussTorCon, unsigned short US_torProfile[MAX_TORS][NTORDIVS], Boole B_isTorConstrained[MAX_TORS], Boole B_ShowTorE, unsigned short US_TorE[MAX_TORS], Real F_TorConRange[MAX_TORS][MAX_TOR_CON][2], int N_con[MAX_TORS], Boole B_RandomTran0, Boole B_RandomQuat0, Boole B_RandomDihe0, Real e0max, Real torsFreeEnergy, int MaxRetries, int ligand_is_inhibitor, int ignore_inter[MAX_ATOMS], const Boole B_include_1_4_interactions, const Real scale_1_4, const ParameterEntry parameterArray[MAX_ATOM_TYPES], const Real unbound_internal_FE, GridMapSetInfo *info, Boole B_use_non_bond_cutoff, Boole B_have_flexible_residues, char PDBQT_record[MAX_RECORDS][LINE_LEN], Unbound_Model ad4_unbound_model)
size	ls.h	/^      unsigned int size, max_its, max_successes, max_failures;$/;"	m	class:Solis_Wets_Base	access:protected
size	ls.h	/^      unsigned int size; $/;"	m	class:Pattern_Search	access:protected
size	stack.h	/^    int size;$/;"	m	struct:__anon3	access:public
size	structs.h	/^	int size;$/;"	m	struct:velocity	access:public
size	structs.h	/^        int size;$/;"	m	struct:position	access:public
size	support.h	/^      int size; \/* the number of individuals in the population *\/$/;"	m	class:Population	access:protected
slerp	qmultiply.cc	/^Quat slerp( const Quat qa, const Quat qb, const double t )$/;"	f	signature:( const Quat qa, const Quat qb, const double t )
slerp	qmultiply.h	/^Quat slerp( const Quat qa, const Quat qb, const double t );$/;"	p	signature:( const Quat qa, const Quat qb, const double t )
slerp0	qmultiply.cc	/^Quat slerp0( const Quat q1, const Quat q2, const double u )$/;"	f	signature:( const Quat q1, const Quat q2, const double u )
slerp0	qmultiply.h	/^Quat slerp0( const Quat qa, const Quat qb, const double t );$/;"	p	signature:( const Quat qa, const Quat qb, const double t )
slerp1	qmultiply.cc	/^Quat slerp1( const Quat qa, const Quat qb, const double t )$/;"	f	signature:( const Quat qa, const Quat qb, const double t )
slerp1	qmultiply.h	/^Quat slerp1( const Quat qa, const Quat qb, const double t );$/;"	p	signature:( const Quat qa, const Quat qb, const double t )
snorm	ranlib.cc	/^Real snorm(void)$/;"	f	signature:(void)
snorm	ranlib.h	/^extern Real snorm(void);$/;"	p	signature:(void)
sol_fn	structs.h	/^    Real sol_fn[NEINT];                            \/\/ distance-dependent desolvation function$/;"	m	struct:energy_tables	access:public
solpar	parameters.h	/^  double solpar;		\/* solvation parameter *\/$/;"	m	struct:parameter_entry	access:public
sort_enrg	sort_enrg.cc	/^void sort_enrg( Real econf[MAX_RUNS],$/;"	f	signature:( Real econf[MAX_RUNS], int isort[MAX_RUNS], int nconf )
sort_enrg	sort_enrg.h	/^void sort_enrg( Real econf[MAX_RUNS],$/;"	p	signature:( Real econf[MAX_RUNS], int isort[MAX_RUNS], int nconf )
spacing	grid.h	/^    double          spacing; \/\/ uniform grid spacing in Angstroms$/;"	m	struct:grid_map_set_info	access:public
spofa	linpack.cc	/^void spofa(Real *a,FourByteLong lda,FourByteLong n,FourByteLong *info)$/;"	f	signature:(Real *a,FourByteLong lda,FourByteLong n,FourByteLong *info)
sq	constants.h	275;"	d
sqhypotenuse	constants.h	278;"	d
sqhypotenuse4	constants.h	282;"	d
sqlower	molstruct.h	/^	double sqlower;$/;"	m	struct:molecule	access:public
squpper	molstruct.h	/^	double squpper;$/;"	m	struct:molecule	access:public
srcdir	Makefile	/^srcdir = .$/;"	m
stack	stack.h	/^typedef integer_stack_t * stack;$/;"	t
stack_create	stack.cc	/^stack stack_create(int maxsize) $/;"	f	signature:(int maxsize)
stack_create	stack.h	/^stack stack_create(int size);$/;"	p	signature:(int size)
stack_depth	stack.cc	/^int stack_depth(stack s)$/;"	f	signature:(stack s)
stack_depth	stack.h	/^int   stack_depth(stack s);$/;"	p	signature:(stack s)
stack_pop	stack.cc	/^int stack_pop(stack s)$/;"	f	signature:(stack s)
stack_pop	stack.h	/^int   stack_pop(stack s);$/;"	p	signature:(stack s)
stack_push	stack.cc	/^void  stack_push(stack s, int i)$/;"	f	signature:(stack s, int i)
stack_push	stack.h	/^void  stack_push(stack s, int i);$/;"	p	signature:(stack s, int i)
stack_size	stack.cc	/^int stack_size(stack s)$/;"	f	signature:(stack s)
stack_size	stack.h	/^int   stack_size(stack s);$/;"	p	signature:(stack s)
stack_test	stack.cc	/^int stack_test(void)$/;"	f	signature:(void)
stack_test	stack.h	/^int   stack_test(void);$/;"	p	signature:(void)
stack_trace	stack.cc	/^void stack_trace(stack s, FILE *f)$/;"	f	signature:(stack s, FILE *f)
stack_trace	stack.h	/^void  stack_trace(stack s, FILE *f);$/;"	p	signature:(stack s, FILE *f)
state	structs.h	/^typedef struct state$/;"	s
state	support.cc	/^State Individual::state(int ntor)$/;"	f	class:Individual	signature:(int ntor)
state	support.h	/^      State state(int); \/* state variables in AutoDock *\/$/;"	p	class:Individual	access:public	signature:(int)
state::Q	structs.h	/^  Quat Q;			\/* rigid-body orientation *\/$/;"	m	struct:state	access:public
state::T	structs.h	/^  Coord T;			\/* coordinates of center of molecule *\/$/;"	m	struct:state	access:public
state::e	structs.h	/^  Energy e;			\/* energy structure *\/$/;"	m	struct:state	access:public
state::hasEnergy	structs.h	/^  int hasEnergy;		\/* if 0, this state has an undefined energy *\/$/;"	m	struct:state	access:public
state::ntor	structs.h	/^  int ntor;			\/* number of torsions in molecule *\/$/;"	m	struct:state	access:public
state::tor	structs.h	/^  double tor[MAX_TORS];		\/* torsion angles in radians *\/$/;"	m	struct:state	access:public
stateFile	autoglobal.h	/^FILE    *stateFile;$/;"	v
stateNow	eval.h	/^      State stateNow;$/;"	m	class:Eval	access:private
statistics	structs.h	/^typedef struct statistics $/;"	s
statistics::maximum	structs.h	/^    Real maximum;$/;"	m	struct:statistics	access:public
statistics::mean	structs.h	/^    Real mean;$/;"	m	struct:statistics	access:public
statistics::minimum	structs.h	/^    Real minimum;$/;"	m	struct:statistics	access:public
statistics::number	structs.h	/^    int number;$/;"	m	struct:statistics	access:public
stderr_desolv	structs.h	/^    double stderr_desolv;             \/\/ Free energy standard error for desolvation term$/;"	m	struct:linear_FE_model	access:public
stderr_estat	structs.h	/^    double stderr_estat;              \/\/ Free energy standard error for electrostatics term$/;"	m	struct:linear_FE_model	access:public
stderr_hbond	structs.h	/^    double stderr_hbond;              \/\/ Free energy standard error for H-bonding term$/;"	m	struct:linear_FE_model	access:public
stderr_tors	structs.h	/^    double stderr_tors;               \/\/ Free energy standard error for torsional term$/;"	m	struct:linear_FE_model	access:public
stderr_vdW	structs.h	/^    double stderr_vdW;                \/\/ Free energy standard error for van der Waals term$/;"	m	struct:linear_FE_model	access:public
step_size	ls.h	/^      Real step_size, current_step_size;$/;"	m	class:Pattern_Search	access:protected
step_threshold	ls.h	/^      Real step_threshold, expansion, contraction;$/;"	m	class:Pattern_Search	access:protected
stop	stop.cc	/^void stop(const char *reason)$/;"	f	signature:(const char *reason)
stop	stop.h	/^void  stop(const char* reason);$/;"	p	signature:(const char* reason)
strindex	strindex.cc	/^int strindex( const char s[], const char t[] )$/;"	f	signature:( const char s[], const char t[] )
strindex	strindex.h	/^int  strindex( const char  s[], $/;"	p	signature:( const char s[], const char t[] )
string_begins_with	read_parameter_library.cc	/^Boole string_begins_with(char *a, char *b) {$/;"	f	signature:(char *a, char *b)
string_begins_with	read_parameter_library.cc	/^Boole string_begins_with(char *a, char *b);$/;"	p	file:	signature:(char *a, char *b)
string_ends_with	read_parameter_library.cc	/^Boole string_ends_with(char *a, char *b) {$/;"	f	signature:(char *a, char *b)
string_ends_with	read_parameter_library.cc	/^Boole string_ends_with(char *a, char *b);$/;"	p	file:	signature:(char *a, char *b)
stuff	structs.h	/^  char      stuff[MAX_CHARS];       \/* PDB atom string; formerly "atomstuff" *\/$/;"	m	struct:atom	access:public
subdir	Makefile	/^subdir = .$/;"	m
success	success.cc	/^void success( char *hostnm,$/;"	f	signature:( char *hostnm, Clock jobStart, struct tms tms_jobStart )
success	success.h	/^void  success( char  hostnm[MAX_CHARS],$/;"	p	signature:( char hostnm[MAX_CHARS], Clock jobStart, struct tms tms_jobStart )
successes	ls.h	/^			unsigned int successes;$/;"	m	class:Pattern_Search	access:protected
sum	rep.cc	/^double ConstrainedRealVector::sum = 1.0;$/;"	m	class:ConstrainedRealVector	file:
sum	rep.h	/^      static double sum;$/;"	m	class:ConstrainedRealVector	access:protected
swap	support.cc	/^void Population::swap(Individual &individual1, Individual &individual2)$/;"	f	class:Population	signature:(Individual &individual1, Individual &individual2)
swap	support.h	/^      void swap(Individual &, Individual &); \/* for maintaining the heap order*\/$/;"	p	class:Population	access:protected	signature:(Individual &, Individual &)
swap	swap.cc	/^void swap ( int v[],$/;"	f	signature:( int v[], int i, int j )
swap	swap.h	/^void swap( int   v[], int i, int j );$/;"	p	signature:( int v[], int i, int j )
swarmActivity	dimLibrary.cc	/^void swarmActivity(int S, int D, Position *Xi, int nb_eval, int outlev)$/;"	f	signature:(int S, int D, Position *Xi, int nb_eval, int outlev)
swarmActivity	dimLibrary.h	/^void swarmActivity(int S, int D, Position *Xi, int nb_eval, int outlev);$/;"	p	signature:(int S, int D, Position *Xi, int nb_eval, int outlev)
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
systematic_conformation_sampler	conformation_sampler.cc	/^void systematic_conformation_sampler(State hist[MAX_RUNS], int nconf, Real init_vt[MAX_TORS][SPACE], Real init_crdpdb[MAX_ATOMS][SPACE], int init_tlist[MAX_TORS][MAX_ATOMS], Real init_lig_center[SPACE], int init_natom, int init_type[MAX_ATOMS], GridMapSetInfo *init_info) {$/;"	f	signature:(State hist[MAX_RUNS], int nconf, Real init_vt[MAX_TORS][SPACE], Real init_crdpdb[MAX_ATOMS][SPACE], int init_tlist[MAX_TORS][MAX_ATOMS], Real init_lig_center[SPACE], int init_natom, int init_type[MAX_ATOMS], GridMapSetInfo *init_info)
systematic_conformation_sampler	conformation_sampler.h	/^void systematic_conformation_sampler(State hist[MAX_RUNS], int nconf, Real init_vt[MAX_TORS][SPACE], Real init_crdpdb[MAX_ATOMS][SPACE], int init_tlist[MAX_TORS][MAX_ATOMS], Real init_lig_center[SPACE], int init_natom, int init_type[MAX_ATOMS], GridMapSetInfo *init_info);$/;"	p	signature:(State hist[MAX_RUNS], int nconf, Real init_vt[MAX_TORS][SPACE], Real init_crdpdb[MAX_ATOMS][SPACE], int init_tlist[MAX_TORS][MAX_ATOMS], Real init_lig_center[SPACE], int init_natom, int init_type[MAX_ATOMS], GridMapSetInfo *init_info)
systematic_search	conformation_sampler.cc	/^void ConformationSampler::systematic_search(int index) {$/;"	f	class:ConformationSampler	signature:(int index)
systematic_search	conformation_sampler.h	/^		void systematic_search(int index);$/;"	p	class:ConformationSampler	access:public	signature:(int index)
t1	structs.h	/^    int t1;           \/\/ TYPE1$/;"	m	struct:nonbond_param	access:public
t2	structs.h	/^    int t2;           \/\/ TYPE2$/;"	m	struct:nonbond_param	access:public
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
target_alias	Makefile	/^target_alias = $/;"	m
temp_rho	ls.h	/^      Real *temp_rho;$/;"	m	class:Pseudo_Solis_Wets	access:protected
temp_rotation_angle	conformation_sampler.h	/^		Real temp_rotation_angle;$/;"	m	class:ConformationSampler	access:public
terminate	gs.h	/^      int terminate(void);$/;"	p	class:Genetic_Algorithm	access:public	signature:(void)
terminate	gs.h	/^      virtual int terminate(void) = 0;$/;"	p	class:Global_Search	access:public	signature:(void)
terminate	gs.h	/^inline int Genetic_Algorithm::terminate(void)$/;"	f	class:Genetic_Algorithm	signature:(void)
terminate	ls.cc	/^int Pattern_Search::terminate(void)$/;"	f	class:Pattern_Search	signature:(void)
terminate	ls.h	/^      int terminate(void);$/;"	p	class:Pattern_Search	access:public	signature:(void)
terminate	ls.h	/^      virtual int terminate(void) = 0;$/;"	p	class:Local_Search	access:public	signature:(void)
terminate	ls.h	/^      virtual int terminate(void);$/;"	p	class:Solis_Wets_Base	access:public	signature:(void)
terminate	ls.h	/^inline int Solis_Wets_Base::terminate(void)$/;"	f	class:Solis_Wets_Base	signature:(void)
testMatrix	conformation_sampler.h	/^void testMatrix(void);$/;"	p	signature:(void)
test_dlg_exists	Tests/test_autodock4.py	/^    def test_dlg_exists( self ):$/;"	m	class:AutoDock_simple_test	access:public
test_dlg_exists_and_test_energy	Tests/test_autodock4.py	/^    def test_dlg_exists_and_test_energy( self ):$/;"	m	class:AutoDock_test	access:public
test_dlg_exists_and_test_energy	Tests/test_autodock4.py	/^    def test_dlg_exists_and_test_energy( self):$/;"	m	class:AutoDock4_unbound_test	access:public
timesys	timesys.cc	/^void timesys( Clock       duration,$/;"	f	signature:( Clock duration, struct tms *start, struct tms *end)
timesys	timesys.h	/^void  timesys( Clock  duration,$/;"	p	signature:( Clock duration, struct tms *start, struct tms *end )
timesyshms	test_times.cc	/^void timesyshms( Clock  duration,$/;"	f	signature:( Clock duration, struct tms *start, struct tms *end )
timesyshms	timesyshms.cc	/^void timesyshms( Clock     duration,$/;"	f	signature:( Clock duration, struct tms *start, struct tms *end)
timesyshms	timesyshms.h	/^void  timesyshms( Clock  duration,$/;"	p	signature:( Clock duration, struct tms *start, struct tms *end )
tlist	conformation_sampler.cc	/^int (*tlist)[MAX_ATOMS];$/;"	v
tlist	eval.h	/^      int *type, (*tlist)[MAX_ATOMS];$/;"	m	class:Eval	access:private
tlist	molstruct.h	/^	int   tlist[ MAX_TORS ][ MAX_ATOMS ];$/;"	m	struct:molecule	access:public
tlist	structs.h	/^  int tlist[MAX_TORS][MAX_ATOMS];	    \/* torsion list of movable atoms *\/$/;"	m	struct:molecule	access:public
top	stack.h	/^    int top;$/;"	m	struct:__anon3	access:public
top_builddir	Makefile	/^top_builddir = .$/;"	m
top_distdir	Makefile	/^top_distdir = $(distdir)$/;"	m
top_srcdir	Makefile	/^top_srcdir = .$/;"	m
tor	structs.h	/^  double tor[MAX_TORS];		\/* torsion angles in radians *\/$/;"	m	struct:state	access:public
tor	structs.h	/^  double tor[MAX_TORS_IN_ROTAMER];	\/* torsion angles in radians *\/$/;"	m	struct:rotamer	access:public
torNorVec	torNorVec.cc	/^void torNorVec( Real crdpdb[MAX_ATOMS][SPACE],$/;"	f	signature:( Real crdpdb[MAX_ATOMS][SPACE], int ntor, int tlist[MAX_TORS][MAX_ATOMS], Real vt[MAX_TORS][SPACE] )
torNorVec	torNorVec.h	/^void  torNorVec( Real crdpdb[MAX_ATOMS][SPACE],$/;"	p	signature:( Real crdpdb[MAX_ATOMS][SPACE], int ntor, int tlist[MAX_TORS][MAX_ATOMS], Real vt[MAX_TORS][SPACE] )
tors	structs.h	/^  Torsion tors[MAX_TORS];	\/* Torsion data *\/$/;"	m	struct:group	access:public
torsStep	gs.h	/^      Real tranStep, quatStep, torsStep;$/;"	m	class:Genetic_Algorithm	access:private
torsion	structs.h	/^typedef struct torsion$/;"	s
torsion	torsion.cc	/^void torsion( const State now,$/;"	f	signature:( const State now, Real crd[MAX_ATOMS][SPACE], const Real v[MAX_TORS][SPACE], const int tlist[MAX_TORS][MAX_ATOMS], const int ntor )
torsion	torsion.h	/^void  torsion( const State now,$/;"	p	signature:( const State now, Real crd[MAX_ATOMS][SPACE], const Real vt[MAX_TORS][SPACE], const int tlist[MAX_TORS][MAX_ATOMS], const int ntor )
torsion::IDmove	structs.h	/^  int IDmove[MAX_ATOMS];	\/* atom serial-IDs of atoms moved by this *\/$/;"	m	struct:torsion	access:public
torsion::nmoved	structs.h	/^  int nmoved;			\/* number of atoms moved by this *\/$/;"	m	struct:torsion	access:public
torsion::rotbnd	structs.h	/^  PairID rotbnd;		\/* atom serial-IDs of rotatable bond *\/$/;"	m	struct:torsion	access:public
torsion::vt	structs.h	/^  Coord vt;			\/* bond-vector of rotatable bond *\/$/;"	m	struct:torsion	access:public
total	structs.h	/^  double total;			\/* total energy *\/$/;"	m	struct:energy	access:public
total_energy	conformation_sampler.h	/^		Real base_energy, total_energy, total_favorable_energy;$/;"	m	class:ConformationSampler	access:public
total_favorable_energy	conformation_sampler.h	/^		Real base_energy, total_energy, total_favorable_energy;$/;"	m	class:ConformationSampler	access:public
trace	stack.h	/^    FILE *trace;$/;"	m	struct:__anon3	access:public
traceState	ls.cc	108;"	d	file:
tranStep	gs.h	/^      Real tranStep, quatStep, torsStep;$/;"	m	class:Genetic_Algorithm	access:private
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
trilinterp	trilinterp.cc	/^Real trilinterp( $/;"	f	signature:( const int first_atom, const int last_atom, const Real tcoord[MAX_ATOMS][SPACE], const Real charge[MAX_ATOMS], const Real abs_charge[MAX_ATOMS], const int type[MAX_ATOMS], GridMapSetInfo *info, int some_atoms_outside_grid, int ignore_inter[MAX_ATOMS], Real elec[MAX_ATOMS], Real emap[MAX_ATOMS], Real *p_elec_total, Real *p_emap_total )
trilinterp	trilinterp.h	/^Real  trilinterp( CONST_INT first_atom,$/;"	p	signature:( CONST_INT first_atom, CONST_INT last_atom, CONST_FLOAT tcoord[MAX_ATOMS][SPACE], CONST_FLOAT charge[MAX_ATOMS], CONST_FLOAT abs_charge[MAX_ATOMS], CONST_INT type[MAX_ATOMS], GridMapSetInfo *info, int some_atoms_outside_grid, int ignore_inter[MAX_ATOMS], Real elec[MAX_ATOMS], Real emap[MAX_ATOMS], Real *p_elec_total, Real *p_emap_total )
trnsfmd_crdpdb	molstruct.h	/^	double trnsfmd_crdpdb[ MAX_ATOMS ][ NTRN ];$/;"	m	struct:molecule	access:public
true_ligand_atoms	autoglobal.h	/^int	    true_ligand_atoms = 0;$/;"	v
twop30	ranlib.cc	1430;"	d	file:
type	autocomm.h	/^	int   type;$/;"	m	struct:AtomDesc	access:public
type	conformation_sampler.cc	/^int *type;$/;"	v
type	eval.h	/^      int *type, (*tlist)[MAX_ATOMS];$/;"	m	class:Eval	access:private
type	molstruct.h	/^	int   type[ MAX_ATOMS ];$/;"	m	struct:molecule	access:public
type	rep.h	/^      virtual RepType type(void) const; $/;"	p	class:Representation	access:public	signature:(void) const
type	rep.h	/^inline RepType Representation::type(void) const$/;"	f	class:Representation	signature:(void) const
type	structs.h	/^  int       type;			        \/* atom type as integer *\/$/;"	m	struct:atom	access:public
type_string	structs.h	/^  char      type_string[MAX_CHARS]; \/* atom type as string *\/$/;"	m	struct:atom	access:public
unbound_internal_FE	eval.h	/^      Real  unbound_internal_FE;$/;"	m	class:Eval	access:private
uniformQuat	qmultiply.cc	/^Quat uniformQuat( void )$/;"	f	signature:( void )
uniformQuat	qmultiply.h	/^Quat uniformQuat( void );$/;"	p	signature:( void )
uniformQuatByAmount	qmultiply.cc	/^Quat uniformQuatByAmount( Real amount )$/;"	f	signature:( Real amount )
uniformQuatByAmount	qmultiply.h	/^Quat uniformQuatByAmount( Real amount );$/;"	p	signature:( Real amount )
unitQuat2rotation	qmultiply.cc	/^void unitQuat2rotation( Quat *q )$/;"	f	signature:( Quat *q )
unitQuat2rotation	qmultiply.h	/^void unitQuat2rotation( Quat *q );$/;"	p	signature:( Quat *q )
untrnfm_crdpdb	molstruct.h	/^	double untrnfm_crdpdb[ MAX_ATOMS ][ NTRN ];$/;"	m	struct:molecule	access:public
update_binding_energy_breakdown	calculateEnergies.cc	/^void update_binding_energy_breakdown( EnergyBreakdown * eb, Unbound_Model ad4_unbound_model )$/;"	f	signature:( EnergyBreakdown * eb, Unbound_Model ad4_unbound_model )
update_binding_energy_breakdown	calculateEnergies.h	/^void update_binding_energy_breakdown( EnergyBreakdown * eb, Unbound_Model ad4_unbound_model$/;"	p	signature:( EnergyBreakdown * eb, Unbound_Model ad4_unbound_model )
update_bounds	conformation_sampler.cc	/^void ConformationSampler::update_bounds(void) {$/;"	f	class:ConformationSampler	signature:(void)
update_bounds	conformation_sampler.h	/^		void update_bounds(void);$/;"	p	class:ConformationSampler	access:private	signature:(void)
update_crds	eval.h	/^      void update_crds( Real init_crdreo[MAX_ATOMS][SPACE], $/;"	p	class:Eval	access:public	signature:( Real init_crdreo[MAX_ATOMS][SPACE], Real init_vt[MAX_TORS][SPACE] )
update_crds	eval.h	/^inline void Eval::update_crds( Real init_crdreo[MAX_ATOMS][SPACE], $/;"	f	class:Eval	signature:( Real init_crdreo[MAX_ATOMS][SPACE], Real init_vt[MAX_TORS][SPACE] )
update_energy_breakdown	calculateEnergies.cc	/^void update_energy_breakdown( EnergyBreakdown * eb )$/;"	f	signature:( EnergyBreakdown * eb )
update_energy_breakdown	calculateEnergies.h	/^void update_energy_breakdown( EnergyBreakdown * eb );$/;"	p	signature:( EnergyBreakdown * eb )
update_torsion_vectors	torNorVec.cc	/^void update_torsion_vectors( Real crdpdb[MAX_ATOMS][SPACE],$/;"	f	signature:( Real crdpdb[MAX_ATOMS][SPACE], int ntor, int tlist[MAX_TORS][MAX_ATOMS], Real vt[MAX_TORS][SPACE], Molecule *ligand, int debug )
update_torsion_vectors	torNorVec.h	/^void update_torsion_vectors( Real crdpdb[MAX_ATOMS][SPACE],$/;"	p	signature:( Real crdpdb[MAX_ATOMS][SPACE], int ntor, int tlist[MAX_TORS][MAX_ATOMS], Real vt[MAX_TORS][SPACE], Molecule *ligand, int debug )
upper	structs.h	/^  double upper;			\/* upper bound on distance *\/$/;"	m	struct:dist_constraint	access:public
usage	Tests/test_autodock4.py	/^def usage():$/;"	f	access:public
usage	usage.cc	/^void usage( FILE * file, char * programname )$/;"	f	signature:( FILE * file, char * programname )
usage	usage.h	/^void  usage(FILE * file, char * programname );$/;"	p	signature:(FILE * file, char * programname )
v	structs.h	/^	double v[D_max];$/;"	m	struct:velocity	access:public
v	structs.h	/^    double v[3];$/;"	m	struct:axis	access:public
v	structs.h	/^    double v[4];$/;"	m	struct:quaternion	access:public
value	support.h	/^      double value(EvalMode); \/* evaluation of the individual gives its value *\/$/;"	p	class:Individual	access:public	signature:(EvalMode)
value	support.h	/^      double value;$/;"	m	class:Phenotype	access:protected
value	support.h	/^inline double Individual::value(EvalMode mode)$/;"	f	class:Individual	signature:(EvalMode mode)
value_vector	support.h	/^      Representation **value_vector;$/;"	m	class:Phenotype	access:protected
vec	typedefs.h	/^	vector float vec;$/;"	m	union:__anon5
vector	rep.h	/^      FourByteLong *vector;$/;"	m	class:IntVector	access:protected
vector	rep.h	/^      double *vector;$/;"	m	class:ConstrainedRealVector	access:protected
vector	rep.h	/^      double *vector;$/;"	m	class:RealVector	access:protected
vector	rep.h	/^      unsigned char *vector;$/;"	m	class:BitVector	access:protected
vector	support.h	/^   unsigned int vector;$/;"	m	struct:__anon4	access:public
velocity	structs.h	/^typedef struct velocity {$/;"	s
velocity::size	structs.h	/^	int size;$/;"	m	struct:velocity	access:public
velocity::v	structs.h	/^	double v[D_max];$/;"	m	struct:velocity	access:public
vertices	conformation_sampler.cc	/^const Real vertices[12][3] = {{-ICO_X, 0., ICO_Y}, {ICO_X, 0., ICO_Y}, {-ICO_X, 0., -ICO_Y}, {ICO_X, 0., -ICO_Y},$/;"	v
vol	parameters.h	/^  double vol;			\/* solvation volume *\/$/;"	m	struct:parameter_entry	access:public
vread	support.h	/^      const Representation *vread(int);$/;"	p	class:Genotype	access:public	signature:(int)
vread	support.h	/^      const Representation *vread(int);$/;"	p	class:Phenotype	access:public	signature:(int)
vread	support.h	/^inline const Representation *Genotype::vread(int vector_number)$/;"	f	class:Genotype	signature:(int vector_number)
vread	support.h	/^inline const Representation *Phenotype::vread(int vector_number)$/;"	f	class:Phenotype	signature:(int vector_number)
vt	conformation_sampler.cc	/^Real (*vt)[SPACE], (*crdpdb)[SPACE];$/;"	v
vt	eval.h	/^      Real (*crd)[SPACE], (*vt)[SPACE], (*crdpdb)[SPACE], (*crdreo)[SPACE];$/;"	m	class:Eval	access:private
vt	molstruct.h	/^	double vt[ MAX_TORS ][ NTRN ];$/;"	m	struct:molecule	access:public
vt	structs.h	/^  Coord vt;			\/* bond-vector of rotatable bond *\/$/;"	m	struct:torsion	access:public
vt	structs.h	/^  Real vt[MAX_TORS][SPACE];        	\/* vectors  of torsions *\/$/;"	m	struct:molecule	access:public
w	structs.h	/^  double w;			\/* quaternion's w-component *\/$/;"	m	struct:quat	access:public
w_mode	gs.h	/^      Worst_Mode w_mode;$/;"	m	class:Genetic_Algorithm	access:private
warn_bad_file	warn_bad_file.cc	/^void warn_bad_file( char *filename,$/;"	f	signature:( char *filename, char message[LINE_LEN] )
warn_bad_file	warn_bad_file.h	/^void  warn_bad_file( char  *filename,$/;"	p	signature:( char *filename, char *message )
weedbonds	weedbonds.cc	/^void weedbonds( int natom,$/;"	f	signature:( int natom, char pdbaname[MAX_ATOMS][5], int rigid_piece[MAX_ATOMS], int ntor, int tlist[MAX_TORS][MAX_ATOMS], int nbmatrix[MAX_ATOMS][MAX_ATOMS], int *Addr_Nnb, NonbondParam *nonbondlist, int outlev, int type[MAX_ATOMS] )
weedbonds	weedbonds.h	/^void  weedbonds( int   natom,$/;"	p	signature:( int natom, char pdbaname[MAX_ATOMS][5], int piece[MAX_ATOMS], int ntor, int tlist[MAX_TORS][MAX_ATOMS], int nbmatrix_binary[MAX_ATOMS][MAX_ATOMS], int *P_Nnb, NonbondParam *nonbondlist, int outlev, int type[MAX_ATOMS])
which_bin	minmeanmax.cc	43;"	d	file:
window_size	gs.h	/^      unsigned int window_size;$/;"	m	class:Genetic_Algorithm	access:private
worst	gs.h	/^      double worst, avg;$/;"	m	class:Genetic_Algorithm	access:private
worst_in_window	gs.cc	/^double worst_in_window(double *window, int size)$/;"	f	signature:(double *window, int size)
worst_this_generation	gs.cc	/^double Genetic_Algorithm::worst_this_generation(Population &pop)$/;"	f	class:Genetic_Algorithm	signature:(Population &pop)
worst_this_generation	gs.h	/^      double worst_this_generation(Population &);$/;"	p	class:Genetic_Algorithm	access:private	signature:(Population &)
worst_window	gs.h	/^      double *worst_window;$/;"	m	class:Genetic_Algorithm	access:private
write	eval.cc	/^int Eval::write(FILE *out_file, Representation **rep)$/;"	f	class:Eval	signature:(FILE *out_file, Representation **rep)
write	eval.h	/^      int write(FILE *out_file, Representation **rep);$/;"	p	class:Eval	access:public	signature:(FILE *out_file, Representation **rep)
write	rep.cc	/^void BitVector::write(FourByteLong value, int gene)$/;"	f	class:BitVector	signature:(FourByteLong value, int gene)
write	rep.cc	/^void BitVector::write(const Element value, int gene)$/;"	f	class:BitVector	signature:(const Element value, int gene)
write	rep.cc	/^void BitVector::write(double value, int gene)$/;"	f	class:BitVector	signature:(double value, int gene)
write	rep.cc	/^void BitVector::write(unsigned char value, int gene)$/;"	f	class:BitVector	signature:(unsigned char value, int gene)
write	rep.cc	/^void ConstrainedRealVector::write(FourByteLong value, int gene)$/;"	f	class:ConstrainedRealVector	signature:(FourByteLong value, int gene)
write	rep.cc	/^void ConstrainedRealVector::write(const Element value, int gene)$/;"	f	class:ConstrainedRealVector	signature:(const Element value, int gene)
write	rep.cc	/^void ConstrainedRealVector::write(double a, double b, double c, double d)$/;"	f	class:ConstrainedRealVector	signature:(double a, double b, double c, double d)
write	rep.cc	/^void ConstrainedRealVector::write(double value, int gene)$/;"	f	class:ConstrainedRealVector	signature:(double value, int gene)
write	rep.cc	/^void ConstrainedRealVector::write(unsigned char value, int gene)$/;"	f	class:ConstrainedRealVector	signature:(unsigned char value, int gene)
write	rep.cc	/^void IntVector::write(FourByteLong value, int gene)$/;"	f	class:IntVector	signature:(FourByteLong value, int gene)
write	rep.cc	/^void IntVector::write(const Element value, int gene)$/;"	f	class:IntVector	signature:(const Element value, int gene)
write	rep.cc	/^void IntVector::write(double value, int gene)$/;"	f	class:IntVector	signature:(double value, int gene)
write	rep.cc	/^void IntVector::write(unsigned char value, int gene)$/;"	f	class:IntVector	signature:(unsigned char value, int gene)
write	rep.cc	/^void RealVector::write(FourByteLong value, int gene)$/;"	f	class:RealVector	signature:(FourByteLong value, int gene)
write	rep.cc	/^void RealVector::write(const Element value, int gene)$/;"	f	class:RealVector	signature:(const Element value, int gene)
write	rep.cc	/^void RealVector::write(double value, int gene)$/;"	f	class:RealVector	signature:(double value, int gene)
write	rep.cc	/^void RealVector::write(unsigned char value, int gene)$/;"	f	class:RealVector	signature:(unsigned char value, int gene)
write	rep.h	/^      virtual void write(FourByteLong, int) = 0;$/;"	p	class:Representation	access:public	signature:(FourByteLong, int)
write	rep.h	/^      virtual void write(const Element, int) = 0;$/;"	p	class:Representation	access:public	signature:(const Element, int)
write	rep.h	/^      virtual void write(double, int) = 0;$/;"	p	class:Representation	access:public	signature:(double, int)
write	rep.h	/^      virtual void write(unsigned char, int) = 0;$/;"	p	class:Representation	access:public	signature:(unsigned char, int)
write	rep.h	/^      void write(FourByteLong, int);$/;"	p	class:BitVector	access:public	signature:(FourByteLong, int)
write	rep.h	/^      void write(FourByteLong, int);$/;"	p	class:ConstrainedRealVector	access:public	signature:(FourByteLong, int)
write	rep.h	/^      void write(FourByteLong, int);$/;"	p	class:IntVector	access:public	signature:(FourByteLong, int)
write	rep.h	/^      void write(FourByteLong, int);$/;"	p	class:RealVector	access:public	signature:(FourByteLong, int)
write	rep.h	/^      void write(const Element, int);$/;"	p	class:BitVector	access:public	signature:(const Element, int)
write	rep.h	/^      void write(const Element, int);$/;"	p	class:ConstrainedRealVector	access:public	signature:(const Element, int)
write	rep.h	/^      void write(const Element, int);$/;"	p	class:IntVector	access:public	signature:(const Element, int)
write	rep.h	/^      void write(const Element, int);$/;"	p	class:RealVector	access:public	signature:(const Element, int)
write	rep.h	/^      void write(double, double, double, double);$/;"	p	class:ConstrainedRealVector	access:public	signature:(double, double, double, double)
write	rep.h	/^      void write(double, int);$/;"	p	class:BitVector	access:public	signature:(double, int)
write	rep.h	/^      void write(double, int);$/;"	p	class:ConstrainedRealVector	access:public	signature:(double, int)
write	rep.h	/^      void write(double, int);$/;"	p	class:IntVector	access:public	signature:(double, int)
write	rep.h	/^      void write(double, int);$/;"	p	class:RealVector	access:public	signature:(double, int)
write	rep.h	/^      void write(unsigned char, int);$/;"	p	class:BitVector	access:public	signature:(unsigned char, int)
write	rep.h	/^      void write(unsigned char, int);$/;"	p	class:ConstrainedRealVector	access:public	signature:(unsigned char, int)
write	rep.h	/^      void write(unsigned char, int);$/;"	p	class:IntVector	access:public	signature:(unsigned char, int)
write	rep.h	/^      void write(unsigned char, int);$/;"	p	class:RealVector	access:public	signature:(unsigned char, int)
write	support.cc	/^void Genotype::write(Element value, int gene_number)$/;"	f	class:Genotype	signature:(Element value, int gene_number)
write	support.cc	/^void Genotype::write(FourByteLong value, int gene_number)$/;"	f	class:Genotype	signature:(FourByteLong value, int gene_number)
write	support.cc	/^void Genotype::write(const Representation &value, int gene_number)$/;"	f	class:Genotype	signature:(const Representation &value, int gene_number)
write	support.cc	/^void Genotype::write(double value, int gene_number)$/;"	f	class:Genotype	signature:(double value, int gene_number)
write	support.cc	/^void Genotype::write(unsigned char value, int gene_number)$/;"	f	class:Genotype	signature:(unsigned char value, int gene_number)
write	support.cc	/^void Phenotype::write(Element value, int gene_number)$/;"	f	class:Phenotype	signature:(Element value, int gene_number)
write	support.cc	/^void Phenotype::write(FourByteLong value, int gene_number)$/;"	f	class:Phenotype	signature:(FourByteLong value, int gene_number)
write	support.cc	/^void Phenotype::write(const Representation &value, int gene_number)$/;"	f	class:Phenotype	signature:(const Representation &value, int gene_number)
write	support.cc	/^void Phenotype::write(double value, int gene_number)$/;"	f	class:Phenotype	signature:(double value, int gene_number)
write	support.cc	/^void Phenotype::write(unsigned char value, int gene_number)$/;"	f	class:Phenotype	signature:(unsigned char value, int gene_number)
write	support.h	/^      void write(Element, int);$/;"	p	class:Genotype	access:public	signature:(Element, int)
write	support.h	/^      void write(Element, int);$/;"	p	class:Phenotype	access:public	signature:(Element, int)
write	support.h	/^      void write(FourByteLong, int);$/;"	p	class:Genotype	access:public	signature:(FourByteLong, int)
write	support.h	/^      void write(FourByteLong, int);$/;"	p	class:Phenotype	access:public	signature:(FourByteLong, int)
write	support.h	/^      void write(const Representation &, int);$/;"	p	class:Genotype	access:public	signature:(const Representation &, int)
write	support.h	/^      void write(const Representation &, int);$/;"	p	class:Phenotype	access:public	signature:(const Representation &, int)
write	support.h	/^      void write(double, int);$/;"	p	class:Genotype	access:public	signature:(double, int)
write	support.h	/^      void write(double, int);$/;"	p	class:Phenotype	access:public	signature:(double, int)
write	support.h	/^      void write(unsigned char, int);$/;"	p	class:Genotype	access:public	signature:(unsigned char, int)
write	support.h	/^      void write(unsigned char, int);$/;"	p	class:Phenotype	access:public	signature:(unsigned char, int)
writePDBQT	writePDBQT.cc	/^writePDBQT(int irun, FourByteLong seed[2],$/;"	f	signature:(int irun, FourByteLong seed[2], char *smFileName, char *dpfFN, Real sml_center[SPACE], State state, int ntor, Real * Ptr_eintra, Real * Ptr_einter, int natom, char atomstuff[MAX_ATOMS][MAX_CHARS], Real crd[MAX_ATOMS][SPACE], Real emap[MAX_ATOMS], Real elec[MAX_ATOMS], Real charge[MAX_ATOMS], Real abs_charge[MAX_ATOMS], Real qsp_abs_charge[MAX_ATOMS], int ligand_is_inhibitor, Real torsFreeEnergy, Real vt[MAX_TORS][SPACE], int tlist[MAX_TORS][MAX_ATOMS], Real crdpdb[MAX_ATOMS][SPACE], NonbondParam *nonbondlist, EnergyTables *ptr_ad_energy_tables, int type[MAX_ATOMS], int Nnb, Boole B_calcIntElec, int outlev, int ignore_inter[MAX_ATOMS], const Boole B_include_1_4_interactions, const Real scale_1_4, const ParameterEntry parameterArray[MAX_ATOM_TYPES], const Real unbound_internal_FE, GridMapSetInfo *info, int state_type, char PDBQT_record[MAX_RECORDS][LINE_LEN], Boole B_use_non_bond_cutoff, Boole B_have_flexible_residues, Unbound_Model ad4_unbound_model )
writePDBQT	writePDBQT.h	/^void writePDBQT(int irun,FourByteLong seed[2],$/;"	p	signature:(int irun,FourByteLong seed[2], char *smFileName, char *dpfFN, Real sml_center[SPACE], State state, int ntor, Real (*Ptr_eintra), Real (*Ptr_einter), int natom, char atomstuff[MAX_ATOMS][MAX_CHARS], Real crd[MAX_ATOMS][SPACE], Real emap[MAX_ATOMS], Real elec[MAX_ATOMS], Real charge[MAX_ATOMS], Real abs_charge[MAX_ATOMS], Real qsp_abs_charge[MAX_ATOMS], int ligand_is_inhibitor, Real torsFreeEnergy, Real vt[MAX_TORS][SPACE], int tlist[MAX_TORS][MAX_ATOMS], Real crdpdb[MAX_ATOMS][SPACE], NonbondParam *nonbondlist, EnergyTables *ptr_ad_energy_tables, int type[MAX_ATOMS], int Nnb, Boole B_calcIntElec, int outlev, int ignore_inter[MAX_ATOMS], const Boole B_include_1_4_interactions, const Real scale_1_4, const ParameterEntry parameterArray[MAX_ATOM_TYPES], const Real unbound_internal_FE, GridMapSetInfo *info, int state_type, char PDBQT_record[MAX_RECORDS][LINE_LEN], Boole B_use_non_bond_cutoff, Boole B_have_flexible_residues, Unbound_Model ad4_unbound_model )
writeQuat	support.cc	/^void Genotype::writeQuat( Quat q )$/;"	f	class:Genotype	signature:( Quat q )
writeQuat	support.cc	/^void Phenotype::writeQuat( Quat q )$/;"	f	class:Phenotype	signature:( Quat q )
writeQuat	support.h	/^      void writeQuat( Quat q );$/;"	p	class:Genotype	access:public	signature:( Quat q )
writeQuat	support.h	/^      void writeQuat( Quat q );$/;"	p	class:Phenotype	access:public	signature:( Quat q )
writeState	stateLibrary.cc	/^void writeState( FILE *fp, State S )$/;"	f	signature:( FILE *fp, State S )
writeState	stateLibrary.h	/^void writeState( FILE *fp, $/;"	p	signature:( FILE *fp, State state )
write_stateFile	autoglobal.h	/^int     write_stateFile = FALSE;$/;"	v
x	structs.h	/^        double x[D_max];$/;"	m	struct:position	access:public
x	structs.h	/^  double x;			\/* Cartesian x-coordinate *\/$/;"	m	struct:coord	access:public
x	structs.h	/^  double x;			\/* quaternion's x-component *\/$/;"	m	struct:quat	access:public
xmax	main.cc	/^double xmin[D_max], xmax[D_max]; \/\/ Intervals defining the search space$/;"	v
xmin	main.cc	/^double xmin[D_max], xmax[D_max]; \/\/ Intervals defining the search space$/;"	v
y	structs.h	/^  double y;			\/* Cartesian y-coordinate *\/$/;"	m	struct:coord	access:public
y	structs.h	/^  double y;			\/* quaternion's y-component *\/$/;"	m	struct:quat	access:public
z	structs.h	/^  double z;			\/* Cartesian z-coordinate *\/$/;"	m	struct:coord	access:public
z	structs.h	/^  double z;			\/* quaternion's z-component *\/$/;"	m	struct:quat	access:public
~BitVector	rep.h	/^      ~BitVector(void);$/;"	p	class:BitVector	access:public	signature:(void)
~BitVector	rep.h	/^inline BitVector::~BitVector(void)$/;"	f	class:BitVector	signature:(void)
~ConformationSampler	conformation_sampler.cc	/^ConformationSampler::~ConformationSampler(void) {$/;"	f	class:ConformationSampler	signature:(void)
~ConformationSampler	conformation_sampler.h	/^		~ConformationSampler(void);$/;"	p	class:ConformationSampler	access:public	signature:(void)
~ConstrainedRealVector	rep.h	/^      ~ConstrainedRealVector(void);$/;"	p	class:ConstrainedRealVector	access:public	signature:(void)
~ConstrainedRealVector	rep.h	/^inline ConstrainedRealVector::~ConstrainedRealVector(void)$/;"	f	class:ConstrainedRealVector	signature:(void)
~Genetic_Algorithm	gs.h	/^      ~Genetic_Algorithm(void);$/;"	p	class:Genetic_Algorithm	access:public	signature:(void)
~Genetic_Algorithm	gs.h	/^inline Genetic_Algorithm::~Genetic_Algorithm(void)$/;"	f	class:Genetic_Algorithm	signature:(void)
~Genotype	support.cc	/^Genotype::~Genotype(void)$/;"	f	class:Genotype	signature:(void)
~Genotype	support.h	/^      ~Genotype(void); \/* destructor *\/$/;"	p	class:Genotype	access:public	signature:(void)
~Global_Search	gs.h	/^      virtual ~Global_Search(void);$/;"	p	class:Global_Search	access:public	signature:(void)
~Global_Search	gs.h	/^inline Global_Search::~Global_Search(void)$/;"	f	class:Global_Search	signature:(void)
~Individual	support.h	/^      ~Individual(void); \/* destructor *\/$/;"	p	class:Individual	access:public	signature:(void)
~Individual	support.h	/^inline Individual::~Individual(void)$/;"	f	class:Individual	signature:(void)
~IntVector	rep.h	/^      ~IntVector(void);$/;"	p	class:IntVector	access:public	signature:(void)
~IntVector	rep.h	/^inline IntVector::~IntVector(void)$/;"	f	class:IntVector	signature:(void)
~Local_Search	ls.h	/^      virtual ~Local_Search(void);$/;"	p	class:Local_Search	access:public	signature:(void)
~Local_Search	ls.h	/^inline Local_Search::~Local_Search(void)$/;"	f	class:Local_Search	signature:(void)
~Pattern_Search	ls.cc	/^Pattern_Search::~Pattern_Search(void)$/;"	f	class:Pattern_Search	signature:(void)
~Pattern_Search	ls.h	/^      ~Pattern_Search(void);$/;"	p	class:Pattern_Search	access:public	signature:(void)
~Phenotype	support.cc	/^Phenotype::~Phenotype(void)$/;"	f	class:Phenotype	signature:(void)
~Phenotype	support.h	/^      ~Phenotype(void);$/;"	p	class:Phenotype	access:public	signature:(void)
~Population	support.h	/^      ~Population(void); \/* destructor *\/$/;"	p	class:Population	access:public	signature:(void)
~Population	support.h	/^inline Population::~Population(void)$/;"	f	class:Population	signature:(void)
~Pseudo_Solis_Wets	ls.h	/^      virtual ~Pseudo_Solis_Wets(void);$/;"	p	class:Pseudo_Solis_Wets	access:public	signature:(void)
~Pseudo_Solis_Wets	ls.h	/^inline Pseudo_Solis_Wets::~Pseudo_Solis_Wets(void)$/;"	f	class:Pseudo_Solis_Wets	signature:(void)
~Pseudo_Solis_Wets1	ls.h	/^      ~Pseudo_Solis_Wets1(void);$/;"	p	class:Pseudo_Solis_Wets1	access:public	signature:(void)
~Pseudo_Solis_Wets1	ls.h	/^inline Pseudo_Solis_Wets1::~Pseudo_Solis_Wets1(void)$/;"	f	class:Pseudo_Solis_Wets1	signature:(void)
~Pseudo_Solis_Wets2	ls.h	/^      ~Pseudo_Solis_Wets2(void);$/;"	p	class:Pseudo_Solis_Wets2	access:public	signature:(void)
~Pseudo_Solis_Wets2	ls.h	/^inline Pseudo_Solis_Wets2::~Pseudo_Solis_Wets2(void)$/;"	f	class:Pseudo_Solis_Wets2	signature:(void)
~RealVector	rep.h	/^      ~RealVector(void);$/;"	p	class:RealVector	access:public	signature:(void)
~RealVector	rep.h	/^inline RealVector::~RealVector(void)$/;"	f	class:RealVector	signature:(void)
~Representation	rep.h	/^      virtual ~Representation(void);$/;"	p	class:Representation	access:public	signature:(void)
~Representation	rep.h	/^inline Representation::~Representation(void)$/;"	f	class:Representation	signature:(void)
~Solis_Wets	ls.h	/^      virtual ~Solis_Wets(void);$/;"	p	class:Solis_Wets	access:public	signature:(void)
~Solis_Wets	ls.h	/^inline Solis_Wets::~Solis_Wets(void)$/;"	f	class:Solis_Wets	signature:(void)
~Solis_Wets1	ls.h	/^      ~Solis_Wets1(void);$/;"	p	class:Solis_Wets1	access:public	signature:(void)
~Solis_Wets1	ls.h	/^inline Solis_Wets1::~Solis_Wets1(void)$/;"	f	class:Solis_Wets1	signature:(void)
~Solis_Wets2	ls.h	/^      ~Solis_Wets2(void);$/;"	p	class:Solis_Wets2	access:public	signature:(void)
~Solis_Wets2	ls.h	/^inline Solis_Wets2::~Solis_Wets2(void)$/;"	f	class:Solis_Wets2	signature:(void)
~Solis_Wets_Base	ls.h	/^      virtual ~Solis_Wets_Base(void);$/;"	p	class:Solis_Wets_Base	access:public	signature:(void)
~Solis_Wets_Base	ls.h	/^inline Solis_Wets_Base::~Solis_Wets_Base(void)$/;"	f	class:Solis_Wets_Base	signature:(void)
